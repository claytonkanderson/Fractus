// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_core_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_core_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_core_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_core_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[49]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_core_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_core_2eproto_metadata_getter(int index);
namespace IronGames {
class Actor;
struct ActorDefaultTypeInternal;
extern ActorDefaultTypeInternal _Actor_default_instance_;
class Asset;
struct AssetDefaultTypeInternal;
extern AssetDefaultTypeInternal _Asset_default_instance_;
class Box;
struct BoxDefaultTypeInternal;
extern BoxDefaultTypeInternal _Box_default_instance_;
class Color;
struct ColorDefaultTypeInternal;
extern ColorDefaultTypeInternal _Color_default_instance_;
class CommandAttack;
struct CommandAttackDefaultTypeInternal;
extern CommandAttackDefaultTypeInternal _CommandAttack_default_instance_;
class CommandAttackMove;
struct CommandAttackMoveDefaultTypeInternal;
extern CommandAttackMoveDefaultTypeInternal _CommandAttackMove_default_instance_;
class CommandMove;
struct CommandMoveDefaultTypeInternal;
extern CommandMoveDefaultTypeInternal _CommandMove_default_instance_;
class EditCube;
struct EditCubeDefaultTypeInternal;
extern EditCubeDefaultTypeInternal _EditCube_default_instance_;
class EndGameRequest;
struct EndGameRequestDefaultTypeInternal;
extern EndGameRequestDefaultTypeInternal _EndGameRequest_default_instance_;
class EndGameResponse;
struct EndGameResponseDefaultTypeInternal;
extern EndGameResponseDefaultTypeInternal _EndGameResponse_default_instance_;
class Event;
struct EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class EventActorCreationRequest;
struct EventActorCreationRequestDefaultTypeInternal;
extern EventActorCreationRequestDefaultTypeInternal _EventActorCreationRequest_default_instance_;
class EventAllPlayersReadyForGameToStart;
struct EventAllPlayersReadyForGameToStartDefaultTypeInternal;
extern EventAllPlayersReadyForGameToStartDefaultTypeInternal _EventAllPlayersReadyForGameToStart_default_instance_;
class EventBuildingCreation;
struct EventBuildingCreationDefaultTypeInternal;
extern EventBuildingCreationDefaultTypeInternal _EventBuildingCreation_default_instance_;
class EventBuildingDestruction;
struct EventBuildingDestructionDefaultTypeInternal;
extern EventBuildingDestructionDefaultTypeInternal _EventBuildingDestruction_default_instance_;
class EventGameStart;
struct EventGameStartDefaultTypeInternal;
extern EventGameStartDefaultTypeInternal _EventGameStart_default_instance_;
class EventList;
struct EventListDefaultTypeInternal;
extern EventListDefaultTypeInternal _EventList_default_instance_;
class EventPlayerChanged;
struct EventPlayerChangedDefaultTypeInternal;
extern EventPlayerChangedDefaultTypeInternal _EventPlayerChanged_default_instance_;
class EventPlayerConnected;
struct EventPlayerConnectedDefaultTypeInternal;
extern EventPlayerConnectedDefaultTypeInternal _EventPlayerConnected_default_instance_;
class EventPlayerDisconnected;
struct EventPlayerDisconnectedDefaultTypeInternal;
extern EventPlayerDisconnectedDefaultTypeInternal _EventPlayerDisconnected_default_instance_;
class EventPlayerLoadedGame;
struct EventPlayerLoadedGameDefaultTypeInternal;
extern EventPlayerLoadedGameDefaultTypeInternal _EventPlayerLoadedGame_default_instance_;
class EventPlayerLoadedTile;
struct EventPlayerLoadedTileDefaultTypeInternal;
extern EventPlayerLoadedTileDefaultTypeInternal _EventPlayerLoadedTile_default_instance_;
class EventPlayerReadyToStartGame;
struct EventPlayerReadyToStartGameDefaultTypeInternal;
extern EventPlayerReadyToStartGameDefaultTypeInternal _EventPlayerReadyToStartGame_default_instance_;
class EventUnitCommand;
struct EventUnitCommandDefaultTypeInternal;
extern EventUnitCommandDefaultTypeInternal _EventUnitCommand_default_instance_;
class EventUnitCreation;
struct EventUnitCreationDefaultTypeInternal;
extern EventUnitCreationDefaultTypeInternal _EventUnitCreation_default_instance_;
class EventUnitDestruction;
struct EventUnitDestructionDefaultTypeInternal;
extern EventUnitDestructionDefaultTypeInternal _EventUnitDestruction_default_instance_;
class ExitGameRequest;
struct ExitGameRequestDefaultTypeInternal;
extern ExitGameRequestDefaultTypeInternal _ExitGameRequest_default_instance_;
class ExitGameResponse;
struct ExitGameResponseDefaultTypeInternal;
extern ExitGameResponseDefaultTypeInternal _ExitGameResponse_default_instance_;
class JoinGameRequest;
struct JoinGameRequestDefaultTypeInternal;
extern JoinGameRequestDefaultTypeInternal _JoinGameRequest_default_instance_;
class JoinGameResponse;
struct JoinGameResponseDefaultTypeInternal;
extern JoinGameResponseDefaultTypeInternal _JoinGameResponse_default_instance_;
class Matrix3;
struct Matrix3DefaultTypeInternal;
extern Matrix3DefaultTypeInternal _Matrix3_default_instance_;
class NewGameRequest;
struct NewGameRequestDefaultTypeInternal;
extern NewGameRequestDefaultTypeInternal _NewGameRequest_default_instance_;
class NewGameResponse;
struct NewGameResponseDefaultTypeInternal;
extern NewGameResponseDefaultTypeInternal _NewGameResponse_default_instance_;
class PalaceAsset;
struct PalaceAssetDefaultTypeInternal;
extern PalaceAssetDefaultTypeInternal _PalaceAsset_default_instance_;
class Parameter;
struct ParameterDefaultTypeInternal;
extern ParameterDefaultTypeInternal _Parameter_default_instance_;
class Player;
struct PlayerDefaultTypeInternal;
extern PlayerDefaultTypeInternal _Player_default_instance_;
class PlayerAssets;
struct PlayerAssetsDefaultTypeInternal;
extern PlayerAssetsDefaultTypeInternal _PlayerAssets_default_instance_;
class Quaternion;
struct QuaternionDefaultTypeInternal;
extern QuaternionDefaultTypeInternal _Quaternion_default_instance_;
class SendEventResponse;
struct SendEventResponseDefaultTypeInternal;
extern SendEventResponseDefaultTypeInternal _SendEventResponse_default_instance_;
class SimulationFrame;
struct SimulationFrameDefaultTypeInternal;
extern SimulationFrameDefaultTypeInternal _SimulationFrame_default_instance_;
class SimulationSummaries;
struct SimulationSummariesDefaultTypeInternal;
extern SimulationSummariesDefaultTypeInternal _SimulationSummaries_default_instance_;
class SimulationSummary;
struct SimulationSummaryDefaultTypeInternal;
extern SimulationSummaryDefaultTypeInternal _SimulationSummary_default_instance_;
class SimulationTetrahedra;
struct SimulationTetrahedraDefaultTypeInternal;
extern SimulationTetrahedraDefaultTypeInternal _SimulationTetrahedra_default_instance_;
class SimulationVertex;
struct SimulationVertexDefaultTypeInternal;
extern SimulationVertexDefaultTypeInternal _SimulationVertex_default_instance_;
class SubscribeEventsRequest;
struct SubscribeEventsRequestDefaultTypeInternal;
extern SubscribeEventsRequestDefaultTypeInternal _SubscribeEventsRequest_default_instance_;
class TetrahedraMesh;
struct TetrahedraMeshDefaultTypeInternal;
extern TetrahedraMeshDefaultTypeInternal _TetrahedraMesh_default_instance_;
class Tile;
struct TileDefaultTypeInternal;
extern TileDefaultTypeInternal _Tile_default_instance_;
class Transform;
struct TransformDefaultTypeInternal;
extern TransformDefaultTypeInternal _Transform_default_instance_;
class Vector3;
struct Vector3DefaultTypeInternal;
extern Vector3DefaultTypeInternal _Vector3_default_instance_;
}  // namespace IronGames
PROTOBUF_NAMESPACE_OPEN
template<> ::IronGames::Actor* Arena::CreateMaybeMessage<::IronGames::Actor>(Arena*);
template<> ::IronGames::Asset* Arena::CreateMaybeMessage<::IronGames::Asset>(Arena*);
template<> ::IronGames::Box* Arena::CreateMaybeMessage<::IronGames::Box>(Arena*);
template<> ::IronGames::Color* Arena::CreateMaybeMessage<::IronGames::Color>(Arena*);
template<> ::IronGames::CommandAttack* Arena::CreateMaybeMessage<::IronGames::CommandAttack>(Arena*);
template<> ::IronGames::CommandAttackMove* Arena::CreateMaybeMessage<::IronGames::CommandAttackMove>(Arena*);
template<> ::IronGames::CommandMove* Arena::CreateMaybeMessage<::IronGames::CommandMove>(Arena*);
template<> ::IronGames::EditCube* Arena::CreateMaybeMessage<::IronGames::EditCube>(Arena*);
template<> ::IronGames::EndGameRequest* Arena::CreateMaybeMessage<::IronGames::EndGameRequest>(Arena*);
template<> ::IronGames::EndGameResponse* Arena::CreateMaybeMessage<::IronGames::EndGameResponse>(Arena*);
template<> ::IronGames::Event* Arena::CreateMaybeMessage<::IronGames::Event>(Arena*);
template<> ::IronGames::EventActorCreationRequest* Arena::CreateMaybeMessage<::IronGames::EventActorCreationRequest>(Arena*);
template<> ::IronGames::EventAllPlayersReadyForGameToStart* Arena::CreateMaybeMessage<::IronGames::EventAllPlayersReadyForGameToStart>(Arena*);
template<> ::IronGames::EventBuildingCreation* Arena::CreateMaybeMessage<::IronGames::EventBuildingCreation>(Arena*);
template<> ::IronGames::EventBuildingDestruction* Arena::CreateMaybeMessage<::IronGames::EventBuildingDestruction>(Arena*);
template<> ::IronGames::EventGameStart* Arena::CreateMaybeMessage<::IronGames::EventGameStart>(Arena*);
template<> ::IronGames::EventList* Arena::CreateMaybeMessage<::IronGames::EventList>(Arena*);
template<> ::IronGames::EventPlayerChanged* Arena::CreateMaybeMessage<::IronGames::EventPlayerChanged>(Arena*);
template<> ::IronGames::EventPlayerConnected* Arena::CreateMaybeMessage<::IronGames::EventPlayerConnected>(Arena*);
template<> ::IronGames::EventPlayerDisconnected* Arena::CreateMaybeMessage<::IronGames::EventPlayerDisconnected>(Arena*);
template<> ::IronGames::EventPlayerLoadedGame* Arena::CreateMaybeMessage<::IronGames::EventPlayerLoadedGame>(Arena*);
template<> ::IronGames::EventPlayerLoadedTile* Arena::CreateMaybeMessage<::IronGames::EventPlayerLoadedTile>(Arena*);
template<> ::IronGames::EventPlayerReadyToStartGame* Arena::CreateMaybeMessage<::IronGames::EventPlayerReadyToStartGame>(Arena*);
template<> ::IronGames::EventUnitCommand* Arena::CreateMaybeMessage<::IronGames::EventUnitCommand>(Arena*);
template<> ::IronGames::EventUnitCreation* Arena::CreateMaybeMessage<::IronGames::EventUnitCreation>(Arena*);
template<> ::IronGames::EventUnitDestruction* Arena::CreateMaybeMessage<::IronGames::EventUnitDestruction>(Arena*);
template<> ::IronGames::ExitGameRequest* Arena::CreateMaybeMessage<::IronGames::ExitGameRequest>(Arena*);
template<> ::IronGames::ExitGameResponse* Arena::CreateMaybeMessage<::IronGames::ExitGameResponse>(Arena*);
template<> ::IronGames::JoinGameRequest* Arena::CreateMaybeMessage<::IronGames::JoinGameRequest>(Arena*);
template<> ::IronGames::JoinGameResponse* Arena::CreateMaybeMessage<::IronGames::JoinGameResponse>(Arena*);
template<> ::IronGames::Matrix3* Arena::CreateMaybeMessage<::IronGames::Matrix3>(Arena*);
template<> ::IronGames::NewGameRequest* Arena::CreateMaybeMessage<::IronGames::NewGameRequest>(Arena*);
template<> ::IronGames::NewGameResponse* Arena::CreateMaybeMessage<::IronGames::NewGameResponse>(Arena*);
template<> ::IronGames::PalaceAsset* Arena::CreateMaybeMessage<::IronGames::PalaceAsset>(Arena*);
template<> ::IronGames::Parameter* Arena::CreateMaybeMessage<::IronGames::Parameter>(Arena*);
template<> ::IronGames::Player* Arena::CreateMaybeMessage<::IronGames::Player>(Arena*);
template<> ::IronGames::PlayerAssets* Arena::CreateMaybeMessage<::IronGames::PlayerAssets>(Arena*);
template<> ::IronGames::Quaternion* Arena::CreateMaybeMessage<::IronGames::Quaternion>(Arena*);
template<> ::IronGames::SendEventResponse* Arena::CreateMaybeMessage<::IronGames::SendEventResponse>(Arena*);
template<> ::IronGames::SimulationFrame* Arena::CreateMaybeMessage<::IronGames::SimulationFrame>(Arena*);
template<> ::IronGames::SimulationSummaries* Arena::CreateMaybeMessage<::IronGames::SimulationSummaries>(Arena*);
template<> ::IronGames::SimulationSummary* Arena::CreateMaybeMessage<::IronGames::SimulationSummary>(Arena*);
template<> ::IronGames::SimulationTetrahedra* Arena::CreateMaybeMessage<::IronGames::SimulationTetrahedra>(Arena*);
template<> ::IronGames::SimulationVertex* Arena::CreateMaybeMessage<::IronGames::SimulationVertex>(Arena*);
template<> ::IronGames::SubscribeEventsRequest* Arena::CreateMaybeMessage<::IronGames::SubscribeEventsRequest>(Arena*);
template<> ::IronGames::TetrahedraMesh* Arena::CreateMaybeMessage<::IronGames::TetrahedraMesh>(Arena*);
template<> ::IronGames::Tile* Arena::CreateMaybeMessage<::IronGames::Tile>(Arena*);
template<> ::IronGames::Transform* Arena::CreateMaybeMessage<::IronGames::Transform>(Arena*);
template<> ::IronGames::Vector3* Arena::CreateMaybeMessage<::IronGames::Vector3>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace IronGames {

// ===================================================================

class Color PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IronGames.Color) */ {
 public:
  inline Color() : Color(nullptr) {}
  virtual ~Color();
  explicit constexpr Color(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Color(const Color& from);
  Color(Color&& from) noexcept
    : Color() {
    *this = ::std::move(from);
  }

  inline Color& operator=(const Color& from) {
    CopyFrom(from);
    return *this;
  }
  inline Color& operator=(Color&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Color& default_instance() {
    return *internal_default_instance();
  }
  static inline const Color* internal_default_instance() {
    return reinterpret_cast<const Color*>(
               &_Color_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Color& a, Color& b) {
    a.Swap(&b);
  }
  inline void Swap(Color* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Color* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Color* New() const final {
    return CreateMaybeMessage<Color>(nullptr);
  }

  Color* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Color>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Color& from);
  void MergeFrom(const Color& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Color* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IronGames.Color";
  }
  protected:
  explicit Color(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_core_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRFieldNumber = 1,
    kGFieldNumber = 2,
    kBFieldNumber = 3,
    kAFieldNumber = 4,
  };
  // float r = 1;
  void clear_r();
  float r() const;
  void set_r(float value);
  private:
  float _internal_r() const;
  void _internal_set_r(float value);
  public:

  // float g = 2;
  void clear_g();
  float g() const;
  void set_g(float value);
  private:
  float _internal_g() const;
  void _internal_set_g(float value);
  public:

  // float b = 3;
  void clear_b();
  float b() const;
  void set_b(float value);
  private:
  float _internal_b() const;
  void _internal_set_b(float value);
  public:

  // float a = 4;
  void clear_a();
  float a() const;
  void set_a(float value);
  private:
  float _internal_a() const;
  void _internal_set_a(float value);
  public:

  // @@protoc_insertion_point(class_scope:IronGames.Color)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float r_;
  float g_;
  float b_;
  float a_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2eproto;
};
// -------------------------------------------------------------------

class Vector3 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IronGames.Vector3) */ {
 public:
  inline Vector3() : Vector3(nullptr) {}
  virtual ~Vector3();
  explicit constexpr Vector3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector3(const Vector3& from);
  Vector3(Vector3&& from) noexcept
    : Vector3() {
    *this = ::std::move(from);
  }

  inline Vector3& operator=(const Vector3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3& operator=(Vector3&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vector3& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector3* internal_default_instance() {
    return reinterpret_cast<const Vector3*>(
               &_Vector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Vector3& a, Vector3& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector3* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vector3* New() const final {
    return CreateMaybeMessage<Vector3>(nullptr);
  }

  Vector3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vector3>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vector3& from);
  void MergeFrom(const Vector3& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IronGames.Vector3";
  }
  protected:
  explicit Vector3(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_core_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:IronGames.Vector3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2eproto;
};
// -------------------------------------------------------------------

class Matrix3 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IronGames.Matrix3) */ {
 public:
  inline Matrix3() : Matrix3(nullptr) {}
  virtual ~Matrix3();
  explicit constexpr Matrix3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Matrix3(const Matrix3& from);
  Matrix3(Matrix3&& from) noexcept
    : Matrix3() {
    *this = ::std::move(from);
  }

  inline Matrix3& operator=(const Matrix3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Matrix3& operator=(Matrix3&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Matrix3& default_instance() {
    return *internal_default_instance();
  }
  static inline const Matrix3* internal_default_instance() {
    return reinterpret_cast<const Matrix3*>(
               &_Matrix3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Matrix3& a, Matrix3& b) {
    a.Swap(&b);
  }
  inline void Swap(Matrix3* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Matrix3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Matrix3* New() const final {
    return CreateMaybeMessage<Matrix3>(nullptr);
  }

  Matrix3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Matrix3>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Matrix3& from);
  void MergeFrom(const Matrix3& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Matrix3* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IronGames.Matrix3";
  }
  protected:
  explicit Matrix3(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_core_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCol0FieldNumber = 1,
    kCol1FieldNumber = 2,
    kCol2FieldNumber = 3,
  };
  // .IronGames.Vector3 col0 = 1;
  bool has_col0() const;
  private:
  bool _internal_has_col0() const;
  public:
  void clear_col0();
  const ::IronGames::Vector3& col0() const;
  ::IronGames::Vector3* release_col0();
  ::IronGames::Vector3* mutable_col0();
  void set_allocated_col0(::IronGames::Vector3* col0);
  private:
  const ::IronGames::Vector3& _internal_col0() const;
  ::IronGames::Vector3* _internal_mutable_col0();
  public:
  void unsafe_arena_set_allocated_col0(
      ::IronGames::Vector3* col0);
  ::IronGames::Vector3* unsafe_arena_release_col0();

  // .IronGames.Vector3 col1 = 2;
  bool has_col1() const;
  private:
  bool _internal_has_col1() const;
  public:
  void clear_col1();
  const ::IronGames::Vector3& col1() const;
  ::IronGames::Vector3* release_col1();
  ::IronGames::Vector3* mutable_col1();
  void set_allocated_col1(::IronGames::Vector3* col1);
  private:
  const ::IronGames::Vector3& _internal_col1() const;
  ::IronGames::Vector3* _internal_mutable_col1();
  public:
  void unsafe_arena_set_allocated_col1(
      ::IronGames::Vector3* col1);
  ::IronGames::Vector3* unsafe_arena_release_col1();

  // .IronGames.Vector3 col2 = 3;
  bool has_col2() const;
  private:
  bool _internal_has_col2() const;
  public:
  void clear_col2();
  const ::IronGames::Vector3& col2() const;
  ::IronGames::Vector3* release_col2();
  ::IronGames::Vector3* mutable_col2();
  void set_allocated_col2(::IronGames::Vector3* col2);
  private:
  const ::IronGames::Vector3& _internal_col2() const;
  ::IronGames::Vector3* _internal_mutable_col2();
  public:
  void unsafe_arena_set_allocated_col2(
      ::IronGames::Vector3* col2);
  ::IronGames::Vector3* unsafe_arena_release_col2();

  // @@protoc_insertion_point(class_scope:IronGames.Matrix3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::IronGames::Vector3* col0_;
  ::IronGames::Vector3* col1_;
  ::IronGames::Vector3* col2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2eproto;
};
// -------------------------------------------------------------------

class Quaternion PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IronGames.Quaternion) */ {
 public:
  inline Quaternion() : Quaternion(nullptr) {}
  virtual ~Quaternion();
  explicit constexpr Quaternion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Quaternion(const Quaternion& from);
  Quaternion(Quaternion&& from) noexcept
    : Quaternion() {
    *this = ::std::move(from);
  }

  inline Quaternion& operator=(const Quaternion& from) {
    CopyFrom(from);
    return *this;
  }
  inline Quaternion& operator=(Quaternion&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Quaternion& default_instance() {
    return *internal_default_instance();
  }
  static inline const Quaternion* internal_default_instance() {
    return reinterpret_cast<const Quaternion*>(
               &_Quaternion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Quaternion& a, Quaternion& b) {
    a.Swap(&b);
  }
  inline void Swap(Quaternion* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Quaternion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Quaternion* New() const final {
    return CreateMaybeMessage<Quaternion>(nullptr);
  }

  Quaternion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Quaternion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Quaternion& from);
  void MergeFrom(const Quaternion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Quaternion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IronGames.Quaternion";
  }
  protected:
  explicit Quaternion(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_core_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
  };
  // float w = 1;
  void clear_w();
  float w() const;
  void set_w(float value);
  private:
  float _internal_w() const;
  void _internal_set_w(float value);
  public:

  // float x = 2;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 3;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 4;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:IronGames.Quaternion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float w_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2eproto;
};
// -------------------------------------------------------------------

class Transform PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IronGames.Transform) */ {
 public:
  inline Transform() : Transform(nullptr) {}
  virtual ~Transform();
  explicit constexpr Transform(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transform(const Transform& from);
  Transform(Transform&& from) noexcept
    : Transform() {
    *this = ::std::move(from);
  }

  inline Transform& operator=(const Transform& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transform& operator=(Transform&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transform& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transform* internal_default_instance() {
    return reinterpret_cast<const Transform*>(
               &_Transform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Transform& a, Transform& b) {
    a.Swap(&b);
  }
  inline void Swap(Transform* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transform* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transform* New() const final {
    return CreateMaybeMessage<Transform>(nullptr);
  }

  Transform* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transform>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transform& from);
  void MergeFrom(const Transform& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transform* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IronGames.Transform";
  }
  protected:
  explicit Transform(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_core_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kRotationFieldNumber = 2,
  };
  // .IronGames.Vector3 position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::IronGames::Vector3& position() const;
  ::IronGames::Vector3* release_position();
  ::IronGames::Vector3* mutable_position();
  void set_allocated_position(::IronGames::Vector3* position);
  private:
  const ::IronGames::Vector3& _internal_position() const;
  ::IronGames::Vector3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::IronGames::Vector3* position);
  ::IronGames::Vector3* unsafe_arena_release_position();

  // .IronGames.Quaternion rotation = 2;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::IronGames::Quaternion& rotation() const;
  ::IronGames::Quaternion* release_rotation();
  ::IronGames::Quaternion* mutable_rotation();
  void set_allocated_rotation(::IronGames::Quaternion* rotation);
  private:
  const ::IronGames::Quaternion& _internal_rotation() const;
  ::IronGames::Quaternion* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::IronGames::Quaternion* rotation);
  ::IronGames::Quaternion* unsafe_arena_release_rotation();

  // @@protoc_insertion_point(class_scope:IronGames.Transform)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::IronGames::Vector3* position_;
  ::IronGames::Quaternion* rotation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2eproto;
};
// -------------------------------------------------------------------

class Parameter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IronGames.Parameter) */ {
 public:
  inline Parameter() : Parameter(nullptr) {}
  virtual ~Parameter();
  explicit constexpr Parameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Parameter(const Parameter& from);
  Parameter(Parameter&& from) noexcept
    : Parameter() {
    *this = ::std::move(from);
  }

  inline Parameter& operator=(const Parameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline Parameter& operator=(Parameter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Parameter& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kValFloat = 2,
    kValInt = 3,
    kValString = 4,
    kValVector3 = 5,
    kColor = 6,
    VALUE_NOT_SET = 0,
  };

  static inline const Parameter* internal_default_instance() {
    return reinterpret_cast<const Parameter*>(
               &_Parameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Parameter& a, Parameter& b) {
    a.Swap(&b);
  }
  inline void Swap(Parameter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Parameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Parameter* New() const final {
    return CreateMaybeMessage<Parameter>(nullptr);
  }

  Parameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Parameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Parameter& from);
  void MergeFrom(const Parameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Parameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IronGames.Parameter";
  }
  protected:
  explicit Parameter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_core_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValFloatFieldNumber = 2,
    kValIntFieldNumber = 3,
    kValStringFieldNumber = 4,
    kValVector3FieldNumber = 5,
    kColorFieldNumber = 6,
  };
  // int32 name = 1;
  void clear_name();
  ::PROTOBUF_NAMESPACE_ID::int32 name() const;
  void set_name(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_name() const;
  void _internal_set_name(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float val_float = 2;
  bool has_val_float() const;
  private:
  bool _internal_has_val_float() const;
  public:
  void clear_val_float();
  float val_float() const;
  void set_val_float(float value);
  private:
  float _internal_val_float() const;
  void _internal_set_val_float(float value);
  public:

  // int32 val_int = 3;
  bool has_val_int() const;
  private:
  bool _internal_has_val_int() const;
  public:
  void clear_val_int();
  ::PROTOBUF_NAMESPACE_ID::int32 val_int() const;
  void set_val_int(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_val_int() const;
  void _internal_set_val_int(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // string val_string = 4;
  bool has_val_string() const;
  private:
  bool _internal_has_val_string() const;
  public:
  void clear_val_string();
  const std::string& val_string() const;
  void set_val_string(const std::string& value);
  void set_val_string(std::string&& value);
  void set_val_string(const char* value);
  void set_val_string(const char* value, size_t size);
  std::string* mutable_val_string();
  std::string* release_val_string();
  void set_allocated_val_string(std::string* val_string);
  private:
  const std::string& _internal_val_string() const;
  void _internal_set_val_string(const std::string& value);
  std::string* _internal_mutable_val_string();
  public:

  // .IronGames.Vector3 val_vector3 = 5;
  bool has_val_vector3() const;
  private:
  bool _internal_has_val_vector3() const;
  public:
  void clear_val_vector3();
  const ::IronGames::Vector3& val_vector3() const;
  ::IronGames::Vector3* release_val_vector3();
  ::IronGames::Vector3* mutable_val_vector3();
  void set_allocated_val_vector3(::IronGames::Vector3* val_vector3);
  private:
  const ::IronGames::Vector3& _internal_val_vector3() const;
  ::IronGames::Vector3* _internal_mutable_val_vector3();
  public:
  void unsafe_arena_set_allocated_val_vector3(
      ::IronGames::Vector3* val_vector3);
  ::IronGames::Vector3* unsafe_arena_release_val_vector3();

  // .IronGames.Color color = 6;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::IronGames::Color& color() const;
  ::IronGames::Color* release_color();
  ::IronGames::Color* mutable_color();
  void set_allocated_color(::IronGames::Color* color);
  private:
  const ::IronGames::Color& _internal_color() const;
  ::IronGames::Color* _internal_mutable_color();
  public:
  void unsafe_arena_set_allocated_color(
      ::IronGames::Color* color);
  ::IronGames::Color* unsafe_arena_release_color();

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:IronGames.Parameter)
 private:
  class _Internal;
  void set_has_val_float();
  void set_has_val_int();
  void set_has_val_string();
  void set_has_val_vector3();
  void set_has_color();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 name_;
  union ValueUnion {
    constexpr ValueUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    float val_float_;
    ::PROTOBUF_NAMESPACE_ID::int32 val_int_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr val_string_;
    ::IronGames::Vector3* val_vector3_;
    ::IronGames::Color* color_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_core_2eproto;
};
// -------------------------------------------------------------------

class Player PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IronGames.Player) */ {
 public:
  inline Player() : Player(nullptr) {}
  virtual ~Player();
  explicit constexpr Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Player(const Player& from);
  Player(Player&& from) noexcept
    : Player() {
    *this = ::std::move(from);
  }

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline Player& operator=(Player&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const Player* internal_default_instance() {
    return reinterpret_cast<const Player*>(
               &_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Player& a, Player& b) {
    a.Swap(&b);
  }
  inline void Swap(Player* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Player* New() const final {
    return CreateMaybeMessage<Player>(nullptr);
  }

  Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Player>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Player& from);
  void MergeFrom(const Player& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Player* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IronGames.Player";
  }
  protected:
  explicit Player(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_core_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kColorFieldNumber = 2,
    kIdFieldNumber = 3,
    kRowFieldNumber = 4,
    kColFieldNumber = 5,
    kRotationFieldNumber = 6,
    kTeamIdFieldNumber = 7,
    kIsHostFieldNumber = 8,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .IronGames.Color color = 2;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::IronGames::Color& color() const;
  ::IronGames::Color* release_color();
  ::IronGames::Color* mutable_color();
  void set_allocated_color(::IronGames::Color* color);
  private:
  const ::IronGames::Color& _internal_color() const;
  ::IronGames::Color* _internal_mutable_color();
  public:
  void unsafe_arena_set_allocated_color(
      ::IronGames::Color* color);
  ::IronGames::Color* unsafe_arena_release_color();

  // int32 id = 3;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 row = 4;
  void clear_row();
  ::PROTOBUF_NAMESPACE_ID::int32 row() const;
  void set_row(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_row() const;
  void _internal_set_row(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 col = 5;
  void clear_col();
  ::PROTOBUF_NAMESPACE_ID::int32 col() const;
  void set_col(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_col() const;
  void _internal_set_col(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float rotation = 6;
  void clear_rotation();
  float rotation() const;
  void set_rotation(float value);
  private:
  float _internal_rotation() const;
  void _internal_set_rotation(float value);
  public:

  // int32 team_id = 7;
  void clear_team_id();
  ::PROTOBUF_NAMESPACE_ID::int32 team_id() const;
  void set_team_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_team_id() const;
  void _internal_set_team_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_host = 8;
  void clear_is_host();
  bool is_host() const;
  void set_is_host(bool value);
  private:
  bool _internal_is_host() const;
  void _internal_set_is_host(bool value);
  public:

  // @@protoc_insertion_point(class_scope:IronGames.Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::IronGames::Color* color_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 row_;
  ::PROTOBUF_NAMESPACE_ID::int32 col_;
  float rotation_;
  ::PROTOBUF_NAMESPACE_ID::int32 team_id_;
  bool is_host_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2eproto;
};
// -------------------------------------------------------------------

class Actor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IronGames.Actor) */ {
 public:
  inline Actor() : Actor(nullptr) {}
  virtual ~Actor();
  explicit constexpr Actor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Actor(const Actor& from);
  Actor(Actor&& from) noexcept
    : Actor() {
    *this = ::std::move(from);
  }

  inline Actor& operator=(const Actor& from) {
    CopyFrom(from);
    return *this;
  }
  inline Actor& operator=(Actor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Actor& default_instance() {
    return *internal_default_instance();
  }
  static inline const Actor* internal_default_instance() {
    return reinterpret_cast<const Actor*>(
               &_Actor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Actor& a, Actor& b) {
    a.Swap(&b);
  }
  inline void Swap(Actor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Actor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Actor* New() const final {
    return CreateMaybeMessage<Actor>(nullptr);
  }

  Actor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Actor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Actor& from);
  void MergeFrom(const Actor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Actor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IronGames.Actor";
  }
  protected:
  explicit Actor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_core_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParametersFieldNumber = 5,
    kTransformFieldNumber = 4,
    kUnitIdFieldNumber = 1,
    kTypeIdFieldNumber = 2,
    kOwnerIdFieldNumber = 3,
  };
  // repeated .IronGames.Parameter parameters = 5;
  int parameters_size() const;
  private:
  int _internal_parameters_size() const;
  public:
  void clear_parameters();
  ::IronGames::Parameter* mutable_parameters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::Parameter >*
      mutable_parameters();
  private:
  const ::IronGames::Parameter& _internal_parameters(int index) const;
  ::IronGames::Parameter* _internal_add_parameters();
  public:
  const ::IronGames::Parameter& parameters(int index) const;
  ::IronGames::Parameter* add_parameters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::Parameter >&
      parameters() const;

  // .IronGames.Transform transform = 4;
  bool has_transform() const;
  private:
  bool _internal_has_transform() const;
  public:
  void clear_transform();
  const ::IronGames::Transform& transform() const;
  ::IronGames::Transform* release_transform();
  ::IronGames::Transform* mutable_transform();
  void set_allocated_transform(::IronGames::Transform* transform);
  private:
  const ::IronGames::Transform& _internal_transform() const;
  ::IronGames::Transform* _internal_mutable_transform();
  public:
  void unsafe_arena_set_allocated_transform(
      ::IronGames::Transform* transform);
  ::IronGames::Transform* unsafe_arena_release_transform();

  // int32 unit_id = 1;
  void clear_unit_id();
  ::PROTOBUF_NAMESPACE_ID::int32 unit_id() const;
  void set_unit_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_unit_id() const;
  void _internal_set_unit_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type_id = 2;
  void clear_type_id();
  ::PROTOBUF_NAMESPACE_ID::int32 type_id() const;
  void set_type_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type_id() const;
  void _internal_set_type_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 owner_id = 3;
  void clear_owner_id();
  ::PROTOBUF_NAMESPACE_ID::int32 owner_id() const;
  void set_owner_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_owner_id() const;
  void _internal_set_owner_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:IronGames.Actor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::Parameter > parameters_;
  ::IronGames::Transform* transform_;
  ::PROTOBUF_NAMESPACE_ID::int32 unit_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 owner_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2eproto;
};
// -------------------------------------------------------------------

class Tile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IronGames.Tile) */ {
 public:
  inline Tile() : Tile(nullptr) {}
  virtual ~Tile();
  explicit constexpr Tile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Tile(const Tile& from);
  Tile(Tile&& from) noexcept
    : Tile() {
    *this = ::std::move(from);
  }

  inline Tile& operator=(const Tile& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tile& operator=(Tile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Tile& default_instance() {
    return *internal_default_instance();
  }
  static inline const Tile* internal_default_instance() {
    return reinterpret_cast<const Tile*>(
               &_Tile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Tile& a, Tile& b) {
    a.Swap(&b);
  }
  inline void Swap(Tile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Tile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Tile* New() const final {
    return CreateMaybeMessage<Tile>(nullptr);
  }

  Tile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Tile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Tile& from);
  void MergeFrom(const Tile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IronGames.Tile";
  }
  protected:
  explicit Tile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_core_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActorsFieldNumber = 2,
    kPlayerAssetsFieldNumber = 3,
    kTerrainIdFieldNumber = 1,
  };
  // repeated .IronGames.Actor actors = 2;
  int actors_size() const;
  private:
  int _internal_actors_size() const;
  public:
  void clear_actors();
  ::IronGames::Actor* mutable_actors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::Actor >*
      mutable_actors();
  private:
  const ::IronGames::Actor& _internal_actors(int index) const;
  ::IronGames::Actor* _internal_add_actors();
  public:
  const ::IronGames::Actor& actors(int index) const;
  ::IronGames::Actor* add_actors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::Actor >&
      actors() const;

  // .IronGames.PlayerAssets player_assets = 3;
  bool has_player_assets() const;
  private:
  bool _internal_has_player_assets() const;
  public:
  void clear_player_assets();
  const ::IronGames::PlayerAssets& player_assets() const;
  ::IronGames::PlayerAssets* release_player_assets();
  ::IronGames::PlayerAssets* mutable_player_assets();
  void set_allocated_player_assets(::IronGames::PlayerAssets* player_assets);
  private:
  const ::IronGames::PlayerAssets& _internal_player_assets() const;
  ::IronGames::PlayerAssets* _internal_mutable_player_assets();
  public:
  void unsafe_arena_set_allocated_player_assets(
      ::IronGames::PlayerAssets* player_assets);
  ::IronGames::PlayerAssets* unsafe_arena_release_player_assets();

  // int32 terrain_id = 1;
  void clear_terrain_id();
  ::PROTOBUF_NAMESPACE_ID::int32 terrain_id() const;
  void set_terrain_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_terrain_id() const;
  void _internal_set_terrain_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:IronGames.Tile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::Actor > actors_;
  ::IronGames::PlayerAssets* player_assets_;
  ::PROTOBUF_NAMESPACE_ID::int32 terrain_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2eproto;
};
// -------------------------------------------------------------------

class SimulationVertex PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IronGames.SimulationVertex) */ {
 public:
  inline SimulationVertex() : SimulationVertex(nullptr) {}
  virtual ~SimulationVertex();
  explicit constexpr SimulationVertex(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimulationVertex(const SimulationVertex& from);
  SimulationVertex(SimulationVertex&& from) noexcept
    : SimulationVertex() {
    *this = ::std::move(from);
  }

  inline SimulationVertex& operator=(const SimulationVertex& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimulationVertex& operator=(SimulationVertex&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SimulationVertex& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimulationVertex* internal_default_instance() {
    return reinterpret_cast<const SimulationVertex*>(
               &_SimulationVertex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SimulationVertex& a, SimulationVertex& b) {
    a.Swap(&b);
  }
  inline void Swap(SimulationVertex* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimulationVertex* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SimulationVertex* New() const final {
    return CreateMaybeMessage<SimulationVertex>(nullptr);
  }

  SimulationVertex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimulationVertex>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SimulationVertex& from);
  void MergeFrom(const SimulationVertex& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimulationVertex* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IronGames.SimulationVertex";
  }
  protected:
  explicit SimulationVertex(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_core_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCompressiveForcesFieldNumber = 8,
    kTensileForcesFieldNumber = 9,
    kCollisionForcesFieldNumber = 10,
    kPositionFieldNumber = 1,
    kMaterialCoordinatesFieldNumber = 2,
    kVelocityFieldNumber = 3,
    kForceFieldNumber = 5,
    kPrincipalEigenvectorFieldNumber = 7,
    kSeparationTensorFieldNumber = 11,
    kMassFieldNumber = 4,
    kLargestEigenvalueFieldNumber = 6,
  };
  // repeated .IronGames.Vector3 compressive_forces = 8;
  int compressive_forces_size() const;
  private:
  int _internal_compressive_forces_size() const;
  public:
  void clear_compressive_forces();
  ::IronGames::Vector3* mutable_compressive_forces(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::Vector3 >*
      mutable_compressive_forces();
  private:
  const ::IronGames::Vector3& _internal_compressive_forces(int index) const;
  ::IronGames::Vector3* _internal_add_compressive_forces();
  public:
  const ::IronGames::Vector3& compressive_forces(int index) const;
  ::IronGames::Vector3* add_compressive_forces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::Vector3 >&
      compressive_forces() const;

  // repeated .IronGames.Vector3 tensile_forces = 9;
  int tensile_forces_size() const;
  private:
  int _internal_tensile_forces_size() const;
  public:
  void clear_tensile_forces();
  ::IronGames::Vector3* mutable_tensile_forces(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::Vector3 >*
      mutable_tensile_forces();
  private:
  const ::IronGames::Vector3& _internal_tensile_forces(int index) const;
  ::IronGames::Vector3* _internal_add_tensile_forces();
  public:
  const ::IronGames::Vector3& tensile_forces(int index) const;
  ::IronGames::Vector3* add_tensile_forces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::Vector3 >&
      tensile_forces() const;

  // repeated .IronGames.Vector3 collision_forces = 10;
  int collision_forces_size() const;
  private:
  int _internal_collision_forces_size() const;
  public:
  void clear_collision_forces();
  ::IronGames::Vector3* mutable_collision_forces(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::Vector3 >*
      mutable_collision_forces();
  private:
  const ::IronGames::Vector3& _internal_collision_forces(int index) const;
  ::IronGames::Vector3* _internal_add_collision_forces();
  public:
  const ::IronGames::Vector3& collision_forces(int index) const;
  ::IronGames::Vector3* add_collision_forces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::Vector3 >&
      collision_forces() const;

  // .IronGames.Vector3 position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::IronGames::Vector3& position() const;
  ::IronGames::Vector3* release_position();
  ::IronGames::Vector3* mutable_position();
  void set_allocated_position(::IronGames::Vector3* position);
  private:
  const ::IronGames::Vector3& _internal_position() const;
  ::IronGames::Vector3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::IronGames::Vector3* position);
  ::IronGames::Vector3* unsafe_arena_release_position();

  // .IronGames.Vector3 material_coordinates = 2;
  bool has_material_coordinates() const;
  private:
  bool _internal_has_material_coordinates() const;
  public:
  void clear_material_coordinates();
  const ::IronGames::Vector3& material_coordinates() const;
  ::IronGames::Vector3* release_material_coordinates();
  ::IronGames::Vector3* mutable_material_coordinates();
  void set_allocated_material_coordinates(::IronGames::Vector3* material_coordinates);
  private:
  const ::IronGames::Vector3& _internal_material_coordinates() const;
  ::IronGames::Vector3* _internal_mutable_material_coordinates();
  public:
  void unsafe_arena_set_allocated_material_coordinates(
      ::IronGames::Vector3* material_coordinates);
  ::IronGames::Vector3* unsafe_arena_release_material_coordinates();

  // .IronGames.Vector3 velocity = 3;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::IronGames::Vector3& velocity() const;
  ::IronGames::Vector3* release_velocity();
  ::IronGames::Vector3* mutable_velocity();
  void set_allocated_velocity(::IronGames::Vector3* velocity);
  private:
  const ::IronGames::Vector3& _internal_velocity() const;
  ::IronGames::Vector3* _internal_mutable_velocity();
  public:
  void unsafe_arena_set_allocated_velocity(
      ::IronGames::Vector3* velocity);
  ::IronGames::Vector3* unsafe_arena_release_velocity();

  // .IronGames.Vector3 force = 5;
  bool has_force() const;
  private:
  bool _internal_has_force() const;
  public:
  void clear_force();
  const ::IronGames::Vector3& force() const;
  ::IronGames::Vector3* release_force();
  ::IronGames::Vector3* mutable_force();
  void set_allocated_force(::IronGames::Vector3* force);
  private:
  const ::IronGames::Vector3& _internal_force() const;
  ::IronGames::Vector3* _internal_mutable_force();
  public:
  void unsafe_arena_set_allocated_force(
      ::IronGames::Vector3* force);
  ::IronGames::Vector3* unsafe_arena_release_force();

  // .IronGames.Vector3 principal_eigenvector = 7;
  bool has_principal_eigenvector() const;
  private:
  bool _internal_has_principal_eigenvector() const;
  public:
  void clear_principal_eigenvector();
  const ::IronGames::Vector3& principal_eigenvector() const;
  ::IronGames::Vector3* release_principal_eigenvector();
  ::IronGames::Vector3* mutable_principal_eigenvector();
  void set_allocated_principal_eigenvector(::IronGames::Vector3* principal_eigenvector);
  private:
  const ::IronGames::Vector3& _internal_principal_eigenvector() const;
  ::IronGames::Vector3* _internal_mutable_principal_eigenvector();
  public:
  void unsafe_arena_set_allocated_principal_eigenvector(
      ::IronGames::Vector3* principal_eigenvector);
  ::IronGames::Vector3* unsafe_arena_release_principal_eigenvector();

  // .IronGames.Matrix3 separation_tensor = 11;
  bool has_separation_tensor() const;
  private:
  bool _internal_has_separation_tensor() const;
  public:
  void clear_separation_tensor();
  const ::IronGames::Matrix3& separation_tensor() const;
  ::IronGames::Matrix3* release_separation_tensor();
  ::IronGames::Matrix3* mutable_separation_tensor();
  void set_allocated_separation_tensor(::IronGames::Matrix3* separation_tensor);
  private:
  const ::IronGames::Matrix3& _internal_separation_tensor() const;
  ::IronGames::Matrix3* _internal_mutable_separation_tensor();
  public:
  void unsafe_arena_set_allocated_separation_tensor(
      ::IronGames::Matrix3* separation_tensor);
  ::IronGames::Matrix3* unsafe_arena_release_separation_tensor();

  // float mass = 4;
  void clear_mass();
  float mass() const;
  void set_mass(float value);
  private:
  float _internal_mass() const;
  void _internal_set_mass(float value);
  public:

  // float largest_eigenvalue = 6;
  void clear_largest_eigenvalue();
  float largest_eigenvalue() const;
  void set_largest_eigenvalue(float value);
  private:
  float _internal_largest_eigenvalue() const;
  void _internal_set_largest_eigenvalue(float value);
  public:

  // @@protoc_insertion_point(class_scope:IronGames.SimulationVertex)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::Vector3 > compressive_forces_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::Vector3 > tensile_forces_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::Vector3 > collision_forces_;
  ::IronGames::Vector3* position_;
  ::IronGames::Vector3* material_coordinates_;
  ::IronGames::Vector3* velocity_;
  ::IronGames::Vector3* force_;
  ::IronGames::Vector3* principal_eigenvector_;
  ::IronGames::Matrix3* separation_tensor_;
  float mass_;
  float largest_eigenvalue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2eproto;
};
// -------------------------------------------------------------------

class SimulationTetrahedra PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IronGames.SimulationTetrahedra) */ {
 public:
  inline SimulationTetrahedra() : SimulationTetrahedra(nullptr) {}
  virtual ~SimulationTetrahedra();
  explicit constexpr SimulationTetrahedra(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimulationTetrahedra(const SimulationTetrahedra& from);
  SimulationTetrahedra(SimulationTetrahedra&& from) noexcept
    : SimulationTetrahedra() {
    *this = ::std::move(from);
  }

  inline SimulationTetrahedra& operator=(const SimulationTetrahedra& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimulationTetrahedra& operator=(SimulationTetrahedra&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SimulationTetrahedra& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimulationTetrahedra* internal_default_instance() {
    return reinterpret_cast<const SimulationTetrahedra*>(
               &_SimulationTetrahedra_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SimulationTetrahedra& a, SimulationTetrahedra& b) {
    a.Swap(&b);
  }
  inline void Swap(SimulationTetrahedra* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimulationTetrahedra* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SimulationTetrahedra* New() const final {
    return CreateMaybeMessage<SimulationTetrahedra>(nullptr);
  }

  SimulationTetrahedra* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimulationTetrahedra>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SimulationTetrahedra& from);
  void MergeFrom(const SimulationTetrahedra& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimulationTetrahedra* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IronGames.SimulationTetrahedra";
  }
  protected:
  explicit SimulationTetrahedra(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_core_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndicesFieldNumber = 3,
    kStrainTensorFieldNumber = 4,
    kStressTensorFieldNumber = 5,
    kMassFieldNumber = 1,
    kVolumeFieldNumber = 2,
  };
  // repeated int32 indices = 3;
  int indices_size() const;
  private:
  int _internal_indices_size() const;
  public:
  void clear_indices();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_indices() const;
  void _internal_add_indices(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_indices();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 indices(int index) const;
  void set_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_indices(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_indices();

  // .IronGames.Matrix3 strain_tensor = 4;
  bool has_strain_tensor() const;
  private:
  bool _internal_has_strain_tensor() const;
  public:
  void clear_strain_tensor();
  const ::IronGames::Matrix3& strain_tensor() const;
  ::IronGames::Matrix3* release_strain_tensor();
  ::IronGames::Matrix3* mutable_strain_tensor();
  void set_allocated_strain_tensor(::IronGames::Matrix3* strain_tensor);
  private:
  const ::IronGames::Matrix3& _internal_strain_tensor() const;
  ::IronGames::Matrix3* _internal_mutable_strain_tensor();
  public:
  void unsafe_arena_set_allocated_strain_tensor(
      ::IronGames::Matrix3* strain_tensor);
  ::IronGames::Matrix3* unsafe_arena_release_strain_tensor();

  // .IronGames.Matrix3 stress_tensor = 5;
  bool has_stress_tensor() const;
  private:
  bool _internal_has_stress_tensor() const;
  public:
  void clear_stress_tensor();
  const ::IronGames::Matrix3& stress_tensor() const;
  ::IronGames::Matrix3* release_stress_tensor();
  ::IronGames::Matrix3* mutable_stress_tensor();
  void set_allocated_stress_tensor(::IronGames::Matrix3* stress_tensor);
  private:
  const ::IronGames::Matrix3& _internal_stress_tensor() const;
  ::IronGames::Matrix3* _internal_mutable_stress_tensor();
  public:
  void unsafe_arena_set_allocated_stress_tensor(
      ::IronGames::Matrix3* stress_tensor);
  ::IronGames::Matrix3* unsafe_arena_release_stress_tensor();

  // float mass = 1;
  void clear_mass();
  float mass() const;
  void set_mass(float value);
  private:
  float _internal_mass() const;
  void _internal_set_mass(float value);
  public:

  // float volume = 2;
  void clear_volume();
  float volume() const;
  void set_volume(float value);
  private:
  float _internal_volume() const;
  void _internal_set_volume(float value);
  public:

  // @@protoc_insertion_point(class_scope:IronGames.SimulationTetrahedra)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > indices_;
  mutable std::atomic<int> _indices_cached_byte_size_;
  ::IronGames::Matrix3* strain_tensor_;
  ::IronGames::Matrix3* stress_tensor_;
  float mass_;
  float volume_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2eproto;
};
// -------------------------------------------------------------------

class SimulationFrame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IronGames.SimulationFrame) */ {
 public:
  inline SimulationFrame() : SimulationFrame(nullptr) {}
  virtual ~SimulationFrame();
  explicit constexpr SimulationFrame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimulationFrame(const SimulationFrame& from);
  SimulationFrame(SimulationFrame&& from) noexcept
    : SimulationFrame() {
    *this = ::std::move(from);
  }

  inline SimulationFrame& operator=(const SimulationFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimulationFrame& operator=(SimulationFrame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SimulationFrame& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimulationFrame* internal_default_instance() {
    return reinterpret_cast<const SimulationFrame*>(
               &_SimulationFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SimulationFrame& a, SimulationFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(SimulationFrame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimulationFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SimulationFrame* New() const final {
    return CreateMaybeMessage<SimulationFrame>(nullptr);
  }

  SimulationFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimulationFrame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SimulationFrame& from);
  void MergeFrom(const SimulationFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimulationFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IronGames.SimulationFrame";
  }
  protected:
  explicit SimulationFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_core_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerticesFieldNumber = 2,
    kTetrahedraFieldNumber = 3,
    kTimeFieldNumber = 1,
  };
  // repeated .IronGames.SimulationVertex vertices = 2;
  int vertices_size() const;
  private:
  int _internal_vertices_size() const;
  public:
  void clear_vertices();
  ::IronGames::SimulationVertex* mutable_vertices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::SimulationVertex >*
      mutable_vertices();
  private:
  const ::IronGames::SimulationVertex& _internal_vertices(int index) const;
  ::IronGames::SimulationVertex* _internal_add_vertices();
  public:
  const ::IronGames::SimulationVertex& vertices(int index) const;
  ::IronGames::SimulationVertex* add_vertices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::SimulationVertex >&
      vertices() const;

  // repeated .IronGames.SimulationTetrahedra tetrahedra = 3;
  int tetrahedra_size() const;
  private:
  int _internal_tetrahedra_size() const;
  public:
  void clear_tetrahedra();
  ::IronGames::SimulationTetrahedra* mutable_tetrahedra(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::SimulationTetrahedra >*
      mutable_tetrahedra();
  private:
  const ::IronGames::SimulationTetrahedra& _internal_tetrahedra(int index) const;
  ::IronGames::SimulationTetrahedra* _internal_add_tetrahedra();
  public:
  const ::IronGames::SimulationTetrahedra& tetrahedra(int index) const;
  ::IronGames::SimulationTetrahedra* add_tetrahedra();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::SimulationTetrahedra >&
      tetrahedra() const;

  // float time = 1;
  void clear_time();
  float time() const;
  void set_time(float value);
  private:
  float _internal_time() const;
  void _internal_set_time(float value);
  public:

  // @@protoc_insertion_point(class_scope:IronGames.SimulationFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::SimulationVertex > vertices_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::SimulationTetrahedra > tetrahedra_;
  float time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2eproto;
};
// -------------------------------------------------------------------

class SimulationSummary PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IronGames.SimulationSummary) */ {
 public:
  inline SimulationSummary() : SimulationSummary(nullptr) {}
  virtual ~SimulationSummary();
  explicit constexpr SimulationSummary(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimulationSummary(const SimulationSummary& from);
  SimulationSummary(SimulationSummary&& from) noexcept
    : SimulationSummary() {
    *this = ::std::move(from);
  }

  inline SimulationSummary& operator=(const SimulationSummary& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimulationSummary& operator=(SimulationSummary&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SimulationSummary& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimulationSummary* internal_default_instance() {
    return reinterpret_cast<const SimulationSummary*>(
               &_SimulationSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SimulationSummary& a, SimulationSummary& b) {
    a.Swap(&b);
  }
  inline void Swap(SimulationSummary* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimulationSummary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SimulationSummary* New() const final {
    return CreateMaybeMessage<SimulationSummary>(nullptr);
  }

  SimulationSummary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimulationSummary>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SimulationSummary& from);
  void MergeFrom(const SimulationSummary& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimulationSummary* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IronGames.SimulationSummary";
  }
  protected:
  explicit SimulationSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_core_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFramesFieldNumber = 9,
    kLambdaFieldNumber = 1,
    kPsiFieldNumber = 2,
    kMuFieldNumber = 3,
    kPhiFieldNumber = 4,
    kDensityFieldNumber = 5,
    kToughnessFieldNumber = 6,
    kMaxNumVerticesFieldNumber = 7,
    kMaxNumTetrahedraFieldNumber = 8,
  };
  // repeated .IronGames.SimulationFrame frames = 9;
  int frames_size() const;
  private:
  int _internal_frames_size() const;
  public:
  void clear_frames();
  ::IronGames::SimulationFrame* mutable_frames(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::SimulationFrame >*
      mutable_frames();
  private:
  const ::IronGames::SimulationFrame& _internal_frames(int index) const;
  ::IronGames::SimulationFrame* _internal_add_frames();
  public:
  const ::IronGames::SimulationFrame& frames(int index) const;
  ::IronGames::SimulationFrame* add_frames();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::SimulationFrame >&
      frames() const;

  // float lambda = 1;
  void clear_lambda();
  float lambda() const;
  void set_lambda(float value);
  private:
  float _internal_lambda() const;
  void _internal_set_lambda(float value);
  public:

  // float psi = 2;
  void clear_psi();
  float psi() const;
  void set_psi(float value);
  private:
  float _internal_psi() const;
  void _internal_set_psi(float value);
  public:

  // float mu = 3;
  void clear_mu();
  float mu() const;
  void set_mu(float value);
  private:
  float _internal_mu() const;
  void _internal_set_mu(float value);
  public:

  // float phi = 4;
  void clear_phi();
  float phi() const;
  void set_phi(float value);
  private:
  float _internal_phi() const;
  void _internal_set_phi(float value);
  public:

  // float density = 5;
  void clear_density();
  float density() const;
  void set_density(float value);
  private:
  float _internal_density() const;
  void _internal_set_density(float value);
  public:

  // float toughness = 6;
  void clear_toughness();
  float toughness() const;
  void set_toughness(float value);
  private:
  float _internal_toughness() const;
  void _internal_set_toughness(float value);
  public:

  // int32 max_num_vertices = 7;
  void clear_max_num_vertices();
  ::PROTOBUF_NAMESPACE_ID::int32 max_num_vertices() const;
  void set_max_num_vertices(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_num_vertices() const;
  void _internal_set_max_num_vertices(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max_num_tetrahedra = 8;
  void clear_max_num_tetrahedra();
  ::PROTOBUF_NAMESPACE_ID::int32 max_num_tetrahedra() const;
  void set_max_num_tetrahedra(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_num_tetrahedra() const;
  void _internal_set_max_num_tetrahedra(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:IronGames.SimulationSummary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::SimulationFrame > frames_;
  float lambda_;
  float psi_;
  float mu_;
  float phi_;
  float density_;
  float toughness_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_num_vertices_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_num_tetrahedra_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2eproto;
};
// -------------------------------------------------------------------

class SimulationSummaries PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IronGames.SimulationSummaries) */ {
 public:
  inline SimulationSummaries() : SimulationSummaries(nullptr) {}
  virtual ~SimulationSummaries();
  explicit constexpr SimulationSummaries(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimulationSummaries(const SimulationSummaries& from);
  SimulationSummaries(SimulationSummaries&& from) noexcept
    : SimulationSummaries() {
    *this = ::std::move(from);
  }

  inline SimulationSummaries& operator=(const SimulationSummaries& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimulationSummaries& operator=(SimulationSummaries&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SimulationSummaries& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimulationSummaries* internal_default_instance() {
    return reinterpret_cast<const SimulationSummaries*>(
               &_SimulationSummaries_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SimulationSummaries& a, SimulationSummaries& b) {
    a.Swap(&b);
  }
  inline void Swap(SimulationSummaries* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimulationSummaries* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SimulationSummaries* New() const final {
    return CreateMaybeMessage<SimulationSummaries>(nullptr);
  }

  SimulationSummaries* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimulationSummaries>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SimulationSummaries& from);
  void MergeFrom(const SimulationSummaries& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimulationSummaries* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IronGames.SimulationSummaries";
  }
  protected:
  explicit SimulationSummaries(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_core_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSummariesFieldNumber = 1,
  };
  // repeated .IronGames.SimulationSummary summaries = 1;
  int summaries_size() const;
  private:
  int _internal_summaries_size() const;
  public:
  void clear_summaries();
  ::IronGames::SimulationSummary* mutable_summaries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::SimulationSummary >*
      mutable_summaries();
  private:
  const ::IronGames::SimulationSummary& _internal_summaries(int index) const;
  ::IronGames::SimulationSummary* _internal_add_summaries();
  public:
  const ::IronGames::SimulationSummary& summaries(int index) const;
  ::IronGames::SimulationSummary* add_summaries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::SimulationSummary >&
      summaries() const;

  // @@protoc_insertion_point(class_scope:IronGames.SimulationSummaries)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::SimulationSummary > summaries_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2eproto;
};
// -------------------------------------------------------------------

class Box PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IronGames.Box) */ {
 public:
  inline Box() : Box(nullptr) {}
  virtual ~Box();
  explicit constexpr Box(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Box(const Box& from);
  Box(Box&& from) noexcept
    : Box() {
    *this = ::std::move(from);
  }

  inline Box& operator=(const Box& from) {
    CopyFrom(from);
    return *this;
  }
  inline Box& operator=(Box&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Box& default_instance() {
    return *internal_default_instance();
  }
  static inline const Box* internal_default_instance() {
    return reinterpret_cast<const Box*>(
               &_Box_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Box& a, Box& b) {
    a.Swap(&b);
  }
  inline void Swap(Box* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Box* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Box* New() const final {
    return CreateMaybeMessage<Box>(nullptr);
  }

  Box* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Box>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Box& from);
  void MergeFrom(const Box& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Box* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IronGames.Box";
  }
  protected:
  explicit Box(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_core_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinFieldNumber = 1,
    kMaxFieldNumber = 2,
  };
  // .IronGames.Vector3 min = 1;
  bool has_min() const;
  private:
  bool _internal_has_min() const;
  public:
  void clear_min();
  const ::IronGames::Vector3& min() const;
  ::IronGames::Vector3* release_min();
  ::IronGames::Vector3* mutable_min();
  void set_allocated_min(::IronGames::Vector3* min);
  private:
  const ::IronGames::Vector3& _internal_min() const;
  ::IronGames::Vector3* _internal_mutable_min();
  public:
  void unsafe_arena_set_allocated_min(
      ::IronGames::Vector3* min);
  ::IronGames::Vector3* unsafe_arena_release_min();

  // .IronGames.Vector3 max = 2;
  bool has_max() const;
  private:
  bool _internal_has_max() const;
  public:
  void clear_max();
  const ::IronGames::Vector3& max() const;
  ::IronGames::Vector3* release_max();
  ::IronGames::Vector3* mutable_max();
  void set_allocated_max(::IronGames::Vector3* max);
  private:
  const ::IronGames::Vector3& _internal_max() const;
  ::IronGames::Vector3* _internal_mutable_max();
  public:
  void unsafe_arena_set_allocated_max(
      ::IronGames::Vector3* max);
  ::IronGames::Vector3* unsafe_arena_release_max();

  // @@protoc_insertion_point(class_scope:IronGames.Box)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::IronGames::Vector3* min_;
  ::IronGames::Vector3* max_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2eproto;
};
// -------------------------------------------------------------------

class EditCube PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IronGames.EditCube) */ {
 public:
  inline EditCube() : EditCube(nullptr) {}
  virtual ~EditCube();
  explicit constexpr EditCube(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EditCube(const EditCube& from);
  EditCube(EditCube&& from) noexcept
    : EditCube() {
    *this = ::std::move(from);
  }

  inline EditCube& operator=(const EditCube& from) {
    CopyFrom(from);
    return *this;
  }
  inline EditCube& operator=(EditCube&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EditCube& default_instance() {
    return *internal_default_instance();
  }
  static inline const EditCube* internal_default_instance() {
    return reinterpret_cast<const EditCube*>(
               &_EditCube_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(EditCube& a, EditCube& b) {
    a.Swap(&b);
  }
  inline void Swap(EditCube* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EditCube* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EditCube* New() const final {
    return CreateMaybeMessage<EditCube>(nullptr);
  }

  EditCube* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EditCube>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EditCube& from);
  void MergeFrom(const EditCube& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EditCube* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IronGames.EditCube";
  }
  protected:
  explicit EditCube(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_core_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCenterFieldNumber = 1,
  };
  // .IronGames.Vector3 center = 1;
  bool has_center() const;
  private:
  bool _internal_has_center() const;
  public:
  void clear_center();
  const ::IronGames::Vector3& center() const;
  ::IronGames::Vector3* release_center();
  ::IronGames::Vector3* mutable_center();
  void set_allocated_center(::IronGames::Vector3* center);
  private:
  const ::IronGames::Vector3& _internal_center() const;
  ::IronGames::Vector3* _internal_mutable_center();
  public:
  void unsafe_arena_set_allocated_center(
      ::IronGames::Vector3* center);
  ::IronGames::Vector3* unsafe_arena_release_center();

  // @@protoc_insertion_point(class_scope:IronGames.EditCube)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::IronGames::Vector3* center_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2eproto;
};
// -------------------------------------------------------------------

class TetrahedraMesh PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IronGames.TetrahedraMesh) */ {
 public:
  inline TetrahedraMesh() : TetrahedraMesh(nullptr) {}
  virtual ~TetrahedraMesh();
  explicit constexpr TetrahedraMesh(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TetrahedraMesh(const TetrahedraMesh& from);
  TetrahedraMesh(TetrahedraMesh&& from) noexcept
    : TetrahedraMesh() {
    *this = ::std::move(from);
  }

  inline TetrahedraMesh& operator=(const TetrahedraMesh& from) {
    CopyFrom(from);
    return *this;
  }
  inline TetrahedraMesh& operator=(TetrahedraMesh&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TetrahedraMesh& default_instance() {
    return *internal_default_instance();
  }
  static inline const TetrahedraMesh* internal_default_instance() {
    return reinterpret_cast<const TetrahedraMesh*>(
               &_TetrahedraMesh_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(TetrahedraMesh& a, TetrahedraMesh& b) {
    a.Swap(&b);
  }
  inline void Swap(TetrahedraMesh* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TetrahedraMesh* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TetrahedraMesh* New() const final {
    return CreateMaybeMessage<TetrahedraMesh>(nullptr);
  }

  TetrahedraMesh* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TetrahedraMesh>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TetrahedraMesh& from);
  void MergeFrom(const TetrahedraMesh& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TetrahedraMesh* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IronGames.TetrahedraMesh";
  }
  protected:
  explicit TetrahedraMesh(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_core_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionsFieldNumber = 1,
  };
  // repeated .IronGames.Vector3 positions = 1;
  int positions_size() const;
  private:
  int _internal_positions_size() const;
  public:
  void clear_positions();
  ::IronGames::Vector3* mutable_positions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::Vector3 >*
      mutable_positions();
  private:
  const ::IronGames::Vector3& _internal_positions(int index) const;
  ::IronGames::Vector3* _internal_add_positions();
  public:
  const ::IronGames::Vector3& positions(int index) const;
  ::IronGames::Vector3* add_positions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::Vector3 >&
      positions() const;

  // @@protoc_insertion_point(class_scope:IronGames.TetrahedraMesh)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::Vector3 > positions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2eproto;
};
// -------------------------------------------------------------------

class Asset PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IronGames.Asset) */ {
 public:
  inline Asset() : Asset(nullptr) {}
  virtual ~Asset();
  explicit constexpr Asset(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Asset(const Asset& from);
  Asset(Asset&& from) noexcept
    : Asset() {
    *this = ::std::move(from);
  }

  inline Asset& operator=(const Asset& from) {
    CopyFrom(from);
    return *this;
  }
  inline Asset& operator=(Asset&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Asset& default_instance() {
    return *internal_default_instance();
  }
  static inline const Asset* internal_default_instance() {
    return reinterpret_cast<const Asset*>(
               &_Asset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Asset& a, Asset& b) {
    a.Swap(&b);
  }
  inline void Swap(Asset* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Asset* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Asset* New() const final {
    return CreateMaybeMessage<Asset>(nullptr);
  }

  Asset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Asset>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Asset& from);
  void MergeFrom(const Asset& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Asset* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IronGames.Asset";
  }
  protected:
  explicit Asset(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_core_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCubesFieldNumber = 1,
    kTetrahedraMeshesFieldNumber = 2,
    kLastSavedFieldNumber = 4,
    kAuthorFieldNumber = 5,
    kAssetIdFieldNumber = 6,
    kBoundsFieldNumber = 3,
  };
  // repeated .IronGames.EditCube cubes = 1;
  int cubes_size() const;
  private:
  int _internal_cubes_size() const;
  public:
  void clear_cubes();
  ::IronGames::EditCube* mutable_cubes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::EditCube >*
      mutable_cubes();
  private:
  const ::IronGames::EditCube& _internal_cubes(int index) const;
  ::IronGames::EditCube* _internal_add_cubes();
  public:
  const ::IronGames::EditCube& cubes(int index) const;
  ::IronGames::EditCube* add_cubes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::EditCube >&
      cubes() const;

  // repeated .IronGames.TetrahedraMesh tetrahedra_Meshes = 2;
  int tetrahedra_meshes_size() const;
  private:
  int _internal_tetrahedra_meshes_size() const;
  public:
  void clear_tetrahedra_meshes();
  ::IronGames::TetrahedraMesh* mutable_tetrahedra_meshes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::TetrahedraMesh >*
      mutable_tetrahedra_meshes();
  private:
  const ::IronGames::TetrahedraMesh& _internal_tetrahedra_meshes(int index) const;
  ::IronGames::TetrahedraMesh* _internal_add_tetrahedra_meshes();
  public:
  const ::IronGames::TetrahedraMesh& tetrahedra_meshes(int index) const;
  ::IronGames::TetrahedraMesh* add_tetrahedra_meshes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::TetrahedraMesh >&
      tetrahedra_meshes() const;

  // string last_saved = 4;
  void clear_last_saved();
  const std::string& last_saved() const;
  void set_last_saved(const std::string& value);
  void set_last_saved(std::string&& value);
  void set_last_saved(const char* value);
  void set_last_saved(const char* value, size_t size);
  std::string* mutable_last_saved();
  std::string* release_last_saved();
  void set_allocated_last_saved(std::string* last_saved);
  private:
  const std::string& _internal_last_saved() const;
  void _internal_set_last_saved(const std::string& value);
  std::string* _internal_mutable_last_saved();
  public:

  // string author = 5;
  void clear_author();
  const std::string& author() const;
  void set_author(const std::string& value);
  void set_author(std::string&& value);
  void set_author(const char* value);
  void set_author(const char* value, size_t size);
  std::string* mutable_author();
  std::string* release_author();
  void set_allocated_author(std::string* author);
  private:
  const std::string& _internal_author() const;
  void _internal_set_author(const std::string& value);
  std::string* _internal_mutable_author();
  public:

  // string asset_id = 6;
  void clear_asset_id();
  const std::string& asset_id() const;
  void set_asset_id(const std::string& value);
  void set_asset_id(std::string&& value);
  void set_asset_id(const char* value);
  void set_asset_id(const char* value, size_t size);
  std::string* mutable_asset_id();
  std::string* release_asset_id();
  void set_allocated_asset_id(std::string* asset_id);
  private:
  const std::string& _internal_asset_id() const;
  void _internal_set_asset_id(const std::string& value);
  std::string* _internal_mutable_asset_id();
  public:

  // .IronGames.Box bounds = 3;
  bool has_bounds() const;
  private:
  bool _internal_has_bounds() const;
  public:
  void clear_bounds();
  const ::IronGames::Box& bounds() const;
  ::IronGames::Box* release_bounds();
  ::IronGames::Box* mutable_bounds();
  void set_allocated_bounds(::IronGames::Box* bounds);
  private:
  const ::IronGames::Box& _internal_bounds() const;
  ::IronGames::Box* _internal_mutable_bounds();
  public:
  void unsafe_arena_set_allocated_bounds(
      ::IronGames::Box* bounds);
  ::IronGames::Box* unsafe_arena_release_bounds();

  // @@protoc_insertion_point(class_scope:IronGames.Asset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::EditCube > cubes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::TetrahedraMesh > tetrahedra_meshes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_saved_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr author_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_id_;
  ::IronGames::Box* bounds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2eproto;
};
// -------------------------------------------------------------------

class PalaceAsset PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IronGames.PalaceAsset) */ {
 public:
  inline PalaceAsset() : PalaceAsset(nullptr) {}
  virtual ~PalaceAsset();
  explicit constexpr PalaceAsset(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PalaceAsset(const PalaceAsset& from);
  PalaceAsset(PalaceAsset&& from) noexcept
    : PalaceAsset() {
    *this = ::std::move(from);
  }

  inline PalaceAsset& operator=(const PalaceAsset& from) {
    CopyFrom(from);
    return *this;
  }
  inline PalaceAsset& operator=(PalaceAsset&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PalaceAsset& default_instance() {
    return *internal_default_instance();
  }
  static inline const PalaceAsset* internal_default_instance() {
    return reinterpret_cast<const PalaceAsset*>(
               &_PalaceAsset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(PalaceAsset& a, PalaceAsset& b) {
    a.Swap(&b);
  }
  inline void Swap(PalaceAsset* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PalaceAsset* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PalaceAsset* New() const final {
    return CreateMaybeMessage<PalaceAsset>(nullptr);
  }

  PalaceAsset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PalaceAsset>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PalaceAsset& from);
  void MergeFrom(const PalaceAsset& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PalaceAsset* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IronGames.PalaceAsset";
  }
  protected:
  explicit PalaceAsset(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_core_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssetIdFieldNumber = 1,
    kTransformFieldNumber = 2,
    kColorFieldNumber = 3,
    kScaleFieldNumber = 4,
  };
  // string asset_id = 1;
  void clear_asset_id();
  const std::string& asset_id() const;
  void set_asset_id(const std::string& value);
  void set_asset_id(std::string&& value);
  void set_asset_id(const char* value);
  void set_asset_id(const char* value, size_t size);
  std::string* mutable_asset_id();
  std::string* release_asset_id();
  void set_allocated_asset_id(std::string* asset_id);
  private:
  const std::string& _internal_asset_id() const;
  void _internal_set_asset_id(const std::string& value);
  std::string* _internal_mutable_asset_id();
  public:

  // .IronGames.Transform transform = 2;
  bool has_transform() const;
  private:
  bool _internal_has_transform() const;
  public:
  void clear_transform();
  const ::IronGames::Transform& transform() const;
  ::IronGames::Transform* release_transform();
  ::IronGames::Transform* mutable_transform();
  void set_allocated_transform(::IronGames::Transform* transform);
  private:
  const ::IronGames::Transform& _internal_transform() const;
  ::IronGames::Transform* _internal_mutable_transform();
  public:
  void unsafe_arena_set_allocated_transform(
      ::IronGames::Transform* transform);
  ::IronGames::Transform* unsafe_arena_release_transform();

  // .IronGames.Color color = 3;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::IronGames::Color& color() const;
  ::IronGames::Color* release_color();
  ::IronGames::Color* mutable_color();
  void set_allocated_color(::IronGames::Color* color);
  private:
  const ::IronGames::Color& _internal_color() const;
  ::IronGames::Color* _internal_mutable_color();
  public:
  void unsafe_arena_set_allocated_color(
      ::IronGames::Color* color);
  ::IronGames::Color* unsafe_arena_release_color();

  // .IronGames.Vector3 scale = 4;
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  const ::IronGames::Vector3& scale() const;
  ::IronGames::Vector3* release_scale();
  ::IronGames::Vector3* mutable_scale();
  void set_allocated_scale(::IronGames::Vector3* scale);
  private:
  const ::IronGames::Vector3& _internal_scale() const;
  ::IronGames::Vector3* _internal_mutable_scale();
  public:
  void unsafe_arena_set_allocated_scale(
      ::IronGames::Vector3* scale);
  ::IronGames::Vector3* unsafe_arena_release_scale();

  // @@protoc_insertion_point(class_scope:IronGames.PalaceAsset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_id_;
  ::IronGames::Transform* transform_;
  ::IronGames::Color* color_;
  ::IronGames::Vector3* scale_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2eproto;
};
// -------------------------------------------------------------------

class PlayerAssets PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IronGames.PlayerAssets) */ {
 public:
  inline PlayerAssets() : PlayerAssets(nullptr) {}
  virtual ~PlayerAssets();
  explicit constexpr PlayerAssets(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerAssets(const PlayerAssets& from);
  PlayerAssets(PlayerAssets&& from) noexcept
    : PlayerAssets() {
    *this = ::std::move(from);
  }

  inline PlayerAssets& operator=(const PlayerAssets& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerAssets& operator=(PlayerAssets&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerAssets& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerAssets* internal_default_instance() {
    return reinterpret_cast<const PlayerAssets*>(
               &_PlayerAssets_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(PlayerAssets& a, PlayerAssets& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerAssets* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerAssets* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerAssets* New() const final {
    return CreateMaybeMessage<PlayerAssets>(nullptr);
  }

  PlayerAssets* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerAssets>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerAssets& from);
  void MergeFrom(const PlayerAssets& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerAssets* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IronGames.PlayerAssets";
  }
  protected:
  explicit PlayerAssets(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_core_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssetsFieldNumber = 1,
    kPalaceAssetsFieldNumber = 2,
  };
  // repeated .IronGames.Asset assets = 1;
  int assets_size() const;
  private:
  int _internal_assets_size() const;
  public:
  void clear_assets();
  ::IronGames::Asset* mutable_assets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::Asset >*
      mutable_assets();
  private:
  const ::IronGames::Asset& _internal_assets(int index) const;
  ::IronGames::Asset* _internal_add_assets();
  public:
  const ::IronGames::Asset& assets(int index) const;
  ::IronGames::Asset* add_assets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::Asset >&
      assets() const;

  // repeated .IronGames.PalaceAsset palace_assets = 2;
  int palace_assets_size() const;
  private:
  int _internal_palace_assets_size() const;
  public:
  void clear_palace_assets();
  ::IronGames::PalaceAsset* mutable_palace_assets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::PalaceAsset >*
      mutable_palace_assets();
  private:
  const ::IronGames::PalaceAsset& _internal_palace_assets(int index) const;
  ::IronGames::PalaceAsset* _internal_add_palace_assets();
  public:
  const ::IronGames::PalaceAsset& palace_assets(int index) const;
  ::IronGames::PalaceAsset* add_palace_assets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::PalaceAsset >&
      palace_assets() const;

  // @@protoc_insertion_point(class_scope:IronGames.PlayerAssets)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::Asset > assets_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::PalaceAsset > palace_assets_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2eproto;
};
// -------------------------------------------------------------------

class EventPlayerConnected PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IronGames.EventPlayerConnected) */ {
 public:
  inline EventPlayerConnected() : EventPlayerConnected(nullptr) {}
  virtual ~EventPlayerConnected();
  explicit constexpr EventPlayerConnected(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventPlayerConnected(const EventPlayerConnected& from);
  EventPlayerConnected(EventPlayerConnected&& from) noexcept
    : EventPlayerConnected() {
    *this = ::std::move(from);
  }

  inline EventPlayerConnected& operator=(const EventPlayerConnected& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventPlayerConnected& operator=(EventPlayerConnected&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EventPlayerConnected& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventPlayerConnected* internal_default_instance() {
    return reinterpret_cast<const EventPlayerConnected*>(
               &_EventPlayerConnected_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(EventPlayerConnected& a, EventPlayerConnected& b) {
    a.Swap(&b);
  }
  inline void Swap(EventPlayerConnected* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventPlayerConnected* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventPlayerConnected* New() const final {
    return CreateMaybeMessage<EventPlayerConnected>(nullptr);
  }

  EventPlayerConnected* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventPlayerConnected>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EventPlayerConnected& from);
  void MergeFrom(const EventPlayerConnected& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventPlayerConnected* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IronGames.EventPlayerConnected";
  }
  protected:
  explicit EventPlayerConnected(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_core_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
  };
  // .IronGames.Player player = 1;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::IronGames::Player& player() const;
  ::IronGames::Player* release_player();
  ::IronGames::Player* mutable_player();
  void set_allocated_player(::IronGames::Player* player);
  private:
  const ::IronGames::Player& _internal_player() const;
  ::IronGames::Player* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::IronGames::Player* player);
  ::IronGames::Player* unsafe_arena_release_player();

  // @@protoc_insertion_point(class_scope:IronGames.EventPlayerConnected)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::IronGames::Player* player_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2eproto;
};
// -------------------------------------------------------------------

class EventPlayerChanged PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IronGames.EventPlayerChanged) */ {
 public:
  inline EventPlayerChanged() : EventPlayerChanged(nullptr) {}
  virtual ~EventPlayerChanged();
  explicit constexpr EventPlayerChanged(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventPlayerChanged(const EventPlayerChanged& from);
  EventPlayerChanged(EventPlayerChanged&& from) noexcept
    : EventPlayerChanged() {
    *this = ::std::move(from);
  }

  inline EventPlayerChanged& operator=(const EventPlayerChanged& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventPlayerChanged& operator=(EventPlayerChanged&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EventPlayerChanged& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventPlayerChanged* internal_default_instance() {
    return reinterpret_cast<const EventPlayerChanged*>(
               &_EventPlayerChanged_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(EventPlayerChanged& a, EventPlayerChanged& b) {
    a.Swap(&b);
  }
  inline void Swap(EventPlayerChanged* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventPlayerChanged* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventPlayerChanged* New() const final {
    return CreateMaybeMessage<EventPlayerChanged>(nullptr);
  }

  EventPlayerChanged* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventPlayerChanged>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EventPlayerChanged& from);
  void MergeFrom(const EventPlayerChanged& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventPlayerChanged* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IronGames.EventPlayerChanged";
  }
  protected:
  explicit EventPlayerChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_core_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
  };
  // .IronGames.Player player = 1;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::IronGames::Player& player() const;
  ::IronGames::Player* release_player();
  ::IronGames::Player* mutable_player();
  void set_allocated_player(::IronGames::Player* player);
  private:
  const ::IronGames::Player& _internal_player() const;
  ::IronGames::Player* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::IronGames::Player* player);
  ::IronGames::Player* unsafe_arena_release_player();

  // @@protoc_insertion_point(class_scope:IronGames.EventPlayerChanged)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::IronGames::Player* player_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2eproto;
};
// -------------------------------------------------------------------

class EventPlayerDisconnected PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IronGames.EventPlayerDisconnected) */ {
 public:
  inline EventPlayerDisconnected() : EventPlayerDisconnected(nullptr) {}
  virtual ~EventPlayerDisconnected();
  explicit constexpr EventPlayerDisconnected(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventPlayerDisconnected(const EventPlayerDisconnected& from);
  EventPlayerDisconnected(EventPlayerDisconnected&& from) noexcept
    : EventPlayerDisconnected() {
    *this = ::std::move(from);
  }

  inline EventPlayerDisconnected& operator=(const EventPlayerDisconnected& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventPlayerDisconnected& operator=(EventPlayerDisconnected&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EventPlayerDisconnected& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventPlayerDisconnected* internal_default_instance() {
    return reinterpret_cast<const EventPlayerDisconnected*>(
               &_EventPlayerDisconnected_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(EventPlayerDisconnected& a, EventPlayerDisconnected& b) {
    a.Swap(&b);
  }
  inline void Swap(EventPlayerDisconnected* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventPlayerDisconnected* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventPlayerDisconnected* New() const final {
    return CreateMaybeMessage<EventPlayerDisconnected>(nullptr);
  }

  EventPlayerDisconnected* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventPlayerDisconnected>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EventPlayerDisconnected& from);
  void MergeFrom(const EventPlayerDisconnected& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventPlayerDisconnected* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IronGames.EventPlayerDisconnected";
  }
  protected:
  explicit EventPlayerDisconnected(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_core_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
  };
  // .IronGames.Player player = 1;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::IronGames::Player& player() const;
  ::IronGames::Player* release_player();
  ::IronGames::Player* mutable_player();
  void set_allocated_player(::IronGames::Player* player);
  private:
  const ::IronGames::Player& _internal_player() const;
  ::IronGames::Player* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::IronGames::Player* player);
  ::IronGames::Player* unsafe_arena_release_player();

  // @@protoc_insertion_point(class_scope:IronGames.EventPlayerDisconnected)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::IronGames::Player* player_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2eproto;
};
// -------------------------------------------------------------------

class EventUnitCreation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IronGames.EventUnitCreation) */ {
 public:
  inline EventUnitCreation() : EventUnitCreation(nullptr) {}
  virtual ~EventUnitCreation();
  explicit constexpr EventUnitCreation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventUnitCreation(const EventUnitCreation& from);
  EventUnitCreation(EventUnitCreation&& from) noexcept
    : EventUnitCreation() {
    *this = ::std::move(from);
  }

  inline EventUnitCreation& operator=(const EventUnitCreation& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventUnitCreation& operator=(EventUnitCreation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EventUnitCreation& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventUnitCreation* internal_default_instance() {
    return reinterpret_cast<const EventUnitCreation*>(
               &_EventUnitCreation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(EventUnitCreation& a, EventUnitCreation& b) {
    a.Swap(&b);
  }
  inline void Swap(EventUnitCreation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventUnitCreation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventUnitCreation* New() const final {
    return CreateMaybeMessage<EventUnitCreation>(nullptr);
  }

  EventUnitCreation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventUnitCreation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EventUnitCreation& from);
  void MergeFrom(const EventUnitCreation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventUnitCreation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IronGames.EventUnitCreation";
  }
  protected:
  explicit EventUnitCreation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_core_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransformFieldNumber = 4,
    kUnitIdFieldNumber = 1,
    kTypeIdFieldNumber = 2,
    kOwnerIdFieldNumber = 3,
  };
  // .IronGames.Transform transform = 4;
  bool has_transform() const;
  private:
  bool _internal_has_transform() const;
  public:
  void clear_transform();
  const ::IronGames::Transform& transform() const;
  ::IronGames::Transform* release_transform();
  ::IronGames::Transform* mutable_transform();
  void set_allocated_transform(::IronGames::Transform* transform);
  private:
  const ::IronGames::Transform& _internal_transform() const;
  ::IronGames::Transform* _internal_mutable_transform();
  public:
  void unsafe_arena_set_allocated_transform(
      ::IronGames::Transform* transform);
  ::IronGames::Transform* unsafe_arena_release_transform();

  // int32 unit_id = 1;
  void clear_unit_id();
  ::PROTOBUF_NAMESPACE_ID::int32 unit_id() const;
  void set_unit_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_unit_id() const;
  void _internal_set_unit_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type_id = 2;
  void clear_type_id();
  ::PROTOBUF_NAMESPACE_ID::int32 type_id() const;
  void set_type_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type_id() const;
  void _internal_set_type_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 owner_id = 3;
  void clear_owner_id();
  ::PROTOBUF_NAMESPACE_ID::int32 owner_id() const;
  void set_owner_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_owner_id() const;
  void _internal_set_owner_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:IronGames.EventUnitCreation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::IronGames::Transform* transform_;
  ::PROTOBUF_NAMESPACE_ID::int32 unit_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 owner_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2eproto;
};
// -------------------------------------------------------------------

class EventActorCreationRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IronGames.EventActorCreationRequest) */ {
 public:
  inline EventActorCreationRequest() : EventActorCreationRequest(nullptr) {}
  virtual ~EventActorCreationRequest();
  explicit constexpr EventActorCreationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventActorCreationRequest(const EventActorCreationRequest& from);
  EventActorCreationRequest(EventActorCreationRequest&& from) noexcept
    : EventActorCreationRequest() {
    *this = ::std::move(from);
  }

  inline EventActorCreationRequest& operator=(const EventActorCreationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventActorCreationRequest& operator=(EventActorCreationRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EventActorCreationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventActorCreationRequest* internal_default_instance() {
    return reinterpret_cast<const EventActorCreationRequest*>(
               &_EventActorCreationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(EventActorCreationRequest& a, EventActorCreationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EventActorCreationRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventActorCreationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventActorCreationRequest* New() const final {
    return CreateMaybeMessage<EventActorCreationRequest>(nullptr);
  }

  EventActorCreationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventActorCreationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EventActorCreationRequest& from);
  void MergeFrom(const EventActorCreationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventActorCreationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IronGames.EventActorCreationRequest";
  }
  protected:
  explicit EventActorCreationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_core_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransformFieldNumber = 3,
    kTypeIdFieldNumber = 1,
    kOwnerIdFieldNumber = 2,
  };
  // .IronGames.Transform transform = 3;
  bool has_transform() const;
  private:
  bool _internal_has_transform() const;
  public:
  void clear_transform();
  const ::IronGames::Transform& transform() const;
  ::IronGames::Transform* release_transform();
  ::IronGames::Transform* mutable_transform();
  void set_allocated_transform(::IronGames::Transform* transform);
  private:
  const ::IronGames::Transform& _internal_transform() const;
  ::IronGames::Transform* _internal_mutable_transform();
  public:
  void unsafe_arena_set_allocated_transform(
      ::IronGames::Transform* transform);
  ::IronGames::Transform* unsafe_arena_release_transform();

  // int32 type_id = 1;
  void clear_type_id();
  ::PROTOBUF_NAMESPACE_ID::int32 type_id() const;
  void set_type_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type_id() const;
  void _internal_set_type_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 owner_id = 2;
  void clear_owner_id();
  ::PROTOBUF_NAMESPACE_ID::int32 owner_id() const;
  void set_owner_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_owner_id() const;
  void _internal_set_owner_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:IronGames.EventActorCreationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::IronGames::Transform* transform_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 owner_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2eproto;
};
// -------------------------------------------------------------------

class EventUnitDestruction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IronGames.EventUnitDestruction) */ {
 public:
  inline EventUnitDestruction() : EventUnitDestruction(nullptr) {}
  virtual ~EventUnitDestruction();
  explicit constexpr EventUnitDestruction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventUnitDestruction(const EventUnitDestruction& from);
  EventUnitDestruction(EventUnitDestruction&& from) noexcept
    : EventUnitDestruction() {
    *this = ::std::move(from);
  }

  inline EventUnitDestruction& operator=(const EventUnitDestruction& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventUnitDestruction& operator=(EventUnitDestruction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EventUnitDestruction& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventUnitDestruction* internal_default_instance() {
    return reinterpret_cast<const EventUnitDestruction*>(
               &_EventUnitDestruction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(EventUnitDestruction& a, EventUnitDestruction& b) {
    a.Swap(&b);
  }
  inline void Swap(EventUnitDestruction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventUnitDestruction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventUnitDestruction* New() const final {
    return CreateMaybeMessage<EventUnitDestruction>(nullptr);
  }

  EventUnitDestruction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventUnitDestruction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EventUnitDestruction& from);
  void MergeFrom(const EventUnitDestruction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventUnitDestruction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IronGames.EventUnitDestruction";
  }
  protected:
  explicit EventUnitDestruction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_core_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnitIdFieldNumber = 1,
  };
  // int32 unit_id = 1;
  void clear_unit_id();
  ::PROTOBUF_NAMESPACE_ID::int32 unit_id() const;
  void set_unit_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_unit_id() const;
  void _internal_set_unit_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:IronGames.EventUnitDestruction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 unit_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2eproto;
};
// -------------------------------------------------------------------

class EventBuildingCreation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IronGames.EventBuildingCreation) */ {
 public:
  inline EventBuildingCreation() : EventBuildingCreation(nullptr) {}
  virtual ~EventBuildingCreation();
  explicit constexpr EventBuildingCreation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventBuildingCreation(const EventBuildingCreation& from);
  EventBuildingCreation(EventBuildingCreation&& from) noexcept
    : EventBuildingCreation() {
    *this = ::std::move(from);
  }

  inline EventBuildingCreation& operator=(const EventBuildingCreation& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventBuildingCreation& operator=(EventBuildingCreation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EventBuildingCreation& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventBuildingCreation* internal_default_instance() {
    return reinterpret_cast<const EventBuildingCreation*>(
               &_EventBuildingCreation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(EventBuildingCreation& a, EventBuildingCreation& b) {
    a.Swap(&b);
  }
  inline void Swap(EventBuildingCreation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventBuildingCreation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventBuildingCreation* New() const final {
    return CreateMaybeMessage<EventBuildingCreation>(nullptr);
  }

  EventBuildingCreation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventBuildingCreation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EventBuildingCreation& from);
  void MergeFrom(const EventBuildingCreation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventBuildingCreation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IronGames.EventBuildingCreation";
  }
  protected:
  explicit EventBuildingCreation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_core_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransformFieldNumber = 3,
    kBuildingIdFieldNumber = 1,
    kTypeIdFieldNumber = 2,
  };
  // .IronGames.Transform transform = 3;
  bool has_transform() const;
  private:
  bool _internal_has_transform() const;
  public:
  void clear_transform();
  const ::IronGames::Transform& transform() const;
  ::IronGames::Transform* release_transform();
  ::IronGames::Transform* mutable_transform();
  void set_allocated_transform(::IronGames::Transform* transform);
  private:
  const ::IronGames::Transform& _internal_transform() const;
  ::IronGames::Transform* _internal_mutable_transform();
  public:
  void unsafe_arena_set_allocated_transform(
      ::IronGames::Transform* transform);
  ::IronGames::Transform* unsafe_arena_release_transform();

  // int32 building_id = 1;
  void clear_building_id();
  ::PROTOBUF_NAMESPACE_ID::int32 building_id() const;
  void set_building_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_building_id() const;
  void _internal_set_building_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type_id = 2;
  void clear_type_id();
  ::PROTOBUF_NAMESPACE_ID::int32 type_id() const;
  void set_type_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type_id() const;
  void _internal_set_type_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:IronGames.EventBuildingCreation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::IronGames::Transform* transform_;
  ::PROTOBUF_NAMESPACE_ID::int32 building_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2eproto;
};
// -------------------------------------------------------------------

class EventBuildingDestruction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IronGames.EventBuildingDestruction) */ {
 public:
  inline EventBuildingDestruction() : EventBuildingDestruction(nullptr) {}
  virtual ~EventBuildingDestruction();
  explicit constexpr EventBuildingDestruction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventBuildingDestruction(const EventBuildingDestruction& from);
  EventBuildingDestruction(EventBuildingDestruction&& from) noexcept
    : EventBuildingDestruction() {
    *this = ::std::move(from);
  }

  inline EventBuildingDestruction& operator=(const EventBuildingDestruction& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventBuildingDestruction& operator=(EventBuildingDestruction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EventBuildingDestruction& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventBuildingDestruction* internal_default_instance() {
    return reinterpret_cast<const EventBuildingDestruction*>(
               &_EventBuildingDestruction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(EventBuildingDestruction& a, EventBuildingDestruction& b) {
    a.Swap(&b);
  }
  inline void Swap(EventBuildingDestruction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventBuildingDestruction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventBuildingDestruction* New() const final {
    return CreateMaybeMessage<EventBuildingDestruction>(nullptr);
  }

  EventBuildingDestruction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventBuildingDestruction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EventBuildingDestruction& from);
  void MergeFrom(const EventBuildingDestruction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventBuildingDestruction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IronGames.EventBuildingDestruction";
  }
  protected:
  explicit EventBuildingDestruction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_core_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuildingIdFieldNumber = 1,
  };
  // int32 building_id = 1;
  void clear_building_id();
  ::PROTOBUF_NAMESPACE_ID::int32 building_id() const;
  void set_building_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_building_id() const;
  void _internal_set_building_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:IronGames.EventBuildingDestruction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 building_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2eproto;
};
// -------------------------------------------------------------------

class CommandMove PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IronGames.CommandMove) */ {
 public:
  inline CommandMove() : CommandMove(nullptr) {}
  virtual ~CommandMove();
  explicit constexpr CommandMove(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandMove(const CommandMove& from);
  CommandMove(CommandMove&& from) noexcept
    : CommandMove() {
    *this = ::std::move(from);
  }

  inline CommandMove& operator=(const CommandMove& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandMove& operator=(CommandMove&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommandMove& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandMove* internal_default_instance() {
    return reinterpret_cast<const CommandMove*>(
               &_CommandMove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CommandMove& a, CommandMove& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandMove* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandMove* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandMove* New() const final {
    return CreateMaybeMessage<CommandMove>(nullptr);
  }

  CommandMove* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandMove>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandMove& from);
  void MergeFrom(const CommandMove& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandMove* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IronGames.CommandMove";
  }
  protected:
  explicit CommandMove(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_core_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDestinationFieldNumber = 2,
    kUnitIdFieldNumber = 1,
  };
  // .IronGames.Vector3 destination = 2;
  bool has_destination() const;
  private:
  bool _internal_has_destination() const;
  public:
  void clear_destination();
  const ::IronGames::Vector3& destination() const;
  ::IronGames::Vector3* release_destination();
  ::IronGames::Vector3* mutable_destination();
  void set_allocated_destination(::IronGames::Vector3* destination);
  private:
  const ::IronGames::Vector3& _internal_destination() const;
  ::IronGames::Vector3* _internal_mutable_destination();
  public:
  void unsafe_arena_set_allocated_destination(
      ::IronGames::Vector3* destination);
  ::IronGames::Vector3* unsafe_arena_release_destination();

  // int32 unit_id = 1;
  void clear_unit_id();
  ::PROTOBUF_NAMESPACE_ID::int32 unit_id() const;
  void set_unit_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_unit_id() const;
  void _internal_set_unit_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:IronGames.CommandMove)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::IronGames::Vector3* destination_;
  ::PROTOBUF_NAMESPACE_ID::int32 unit_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2eproto;
};
// -------------------------------------------------------------------

class CommandAttack PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IronGames.CommandAttack) */ {
 public:
  inline CommandAttack() : CommandAttack(nullptr) {}
  virtual ~CommandAttack();
  explicit constexpr CommandAttack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandAttack(const CommandAttack& from);
  CommandAttack(CommandAttack&& from) noexcept
    : CommandAttack() {
    *this = ::std::move(from);
  }

  inline CommandAttack& operator=(const CommandAttack& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandAttack& operator=(CommandAttack&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommandAttack& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandAttack* internal_default_instance() {
    return reinterpret_cast<const CommandAttack*>(
               &_CommandAttack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(CommandAttack& a, CommandAttack& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandAttack* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandAttack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandAttack* New() const final {
    return CreateMaybeMessage<CommandAttack>(nullptr);
  }

  CommandAttack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandAttack>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandAttack& from);
  void MergeFrom(const CommandAttack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandAttack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IronGames.CommandAttack";
  }
  protected:
  explicit CommandAttack(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_core_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUnitIdFieldNumber = 1,
    kTargetIdFieldNumber = 2,
  };
  // int32 unit_id = 1;
  void clear_unit_id();
  ::PROTOBUF_NAMESPACE_ID::int32 unit_id() const;
  void set_unit_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_unit_id() const;
  void _internal_set_unit_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 target_id = 2;
  void clear_target_id();
  ::PROTOBUF_NAMESPACE_ID::int32 target_id() const;
  void set_target_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_target_id() const;
  void _internal_set_target_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:IronGames.CommandAttack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 unit_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 target_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2eproto;
};
// -------------------------------------------------------------------

class CommandAttackMove PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IronGames.CommandAttackMove) */ {
 public:
  inline CommandAttackMove() : CommandAttackMove(nullptr) {}
  virtual ~CommandAttackMove();
  explicit constexpr CommandAttackMove(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandAttackMove(const CommandAttackMove& from);
  CommandAttackMove(CommandAttackMove&& from) noexcept
    : CommandAttackMove() {
    *this = ::std::move(from);
  }

  inline CommandAttackMove& operator=(const CommandAttackMove& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandAttackMove& operator=(CommandAttackMove&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommandAttackMove& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandAttackMove* internal_default_instance() {
    return reinterpret_cast<const CommandAttackMove*>(
               &_CommandAttackMove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(CommandAttackMove& a, CommandAttackMove& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandAttackMove* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandAttackMove* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandAttackMove* New() const final {
    return CreateMaybeMessage<CommandAttackMove>(nullptr);
  }

  CommandAttackMove* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandAttackMove>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandAttackMove& from);
  void MergeFrom(const CommandAttackMove& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandAttackMove* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IronGames.CommandAttackMove";
  }
  protected:
  explicit CommandAttackMove(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_core_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDestinationFieldNumber = 2,
    kUnitIdFieldNumber = 1,
  };
  // .IronGames.Vector3 destination = 2;
  bool has_destination() const;
  private:
  bool _internal_has_destination() const;
  public:
  void clear_destination();
  const ::IronGames::Vector3& destination() const;
  ::IronGames::Vector3* release_destination();
  ::IronGames::Vector3* mutable_destination();
  void set_allocated_destination(::IronGames::Vector3* destination);
  private:
  const ::IronGames::Vector3& _internal_destination() const;
  ::IronGames::Vector3* _internal_mutable_destination();
  public:
  void unsafe_arena_set_allocated_destination(
      ::IronGames::Vector3* destination);
  ::IronGames::Vector3* unsafe_arena_release_destination();

  // int32 unit_id = 1;
  void clear_unit_id();
  ::PROTOBUF_NAMESPACE_ID::int32 unit_id() const;
  void set_unit_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_unit_id() const;
  void _internal_set_unit_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:IronGames.CommandAttackMove)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::IronGames::Vector3* destination_;
  ::PROTOBUF_NAMESPACE_ID::int32 unit_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2eproto;
};
// -------------------------------------------------------------------

class EventUnitCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IronGames.EventUnitCommand) */ {
 public:
  inline EventUnitCommand() : EventUnitCommand(nullptr) {}
  virtual ~EventUnitCommand();
  explicit constexpr EventUnitCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventUnitCommand(const EventUnitCommand& from);
  EventUnitCommand(EventUnitCommand&& from) noexcept
    : EventUnitCommand() {
    *this = ::std::move(from);
  }

  inline EventUnitCommand& operator=(const EventUnitCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventUnitCommand& operator=(EventUnitCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EventUnitCommand& default_instance() {
    return *internal_default_instance();
  }
  enum CommandCase {
    kMove = 1,
    kAttack = 2,
    kAttackMove = 3,
    COMMAND_NOT_SET = 0,
  };

  static inline const EventUnitCommand* internal_default_instance() {
    return reinterpret_cast<const EventUnitCommand*>(
               &_EventUnitCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(EventUnitCommand& a, EventUnitCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(EventUnitCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventUnitCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventUnitCommand* New() const final {
    return CreateMaybeMessage<EventUnitCommand>(nullptr);
  }

  EventUnitCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventUnitCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EventUnitCommand& from);
  void MergeFrom(const EventUnitCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventUnitCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IronGames.EventUnitCommand";
  }
  protected:
  explicit EventUnitCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_core_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMoveFieldNumber = 1,
    kAttackFieldNumber = 2,
    kAttackMoveFieldNumber = 3,
  };
  // .IronGames.CommandMove move = 1;
  bool has_move() const;
  private:
  bool _internal_has_move() const;
  public:
  void clear_move();
  const ::IronGames::CommandMove& move() const;
  ::IronGames::CommandMove* release_move();
  ::IronGames::CommandMove* mutable_move();
  void set_allocated_move(::IronGames::CommandMove* move);
  private:
  const ::IronGames::CommandMove& _internal_move() const;
  ::IronGames::CommandMove* _internal_mutable_move();
  public:
  void unsafe_arena_set_allocated_move(
      ::IronGames::CommandMove* move);
  ::IronGames::CommandMove* unsafe_arena_release_move();

  // .IronGames.CommandAttack attack = 2;
  bool has_attack() const;
  private:
  bool _internal_has_attack() const;
  public:
  void clear_attack();
  const ::IronGames::CommandAttack& attack() const;
  ::IronGames::CommandAttack* release_attack();
  ::IronGames::CommandAttack* mutable_attack();
  void set_allocated_attack(::IronGames::CommandAttack* attack);
  private:
  const ::IronGames::CommandAttack& _internal_attack() const;
  ::IronGames::CommandAttack* _internal_mutable_attack();
  public:
  void unsafe_arena_set_allocated_attack(
      ::IronGames::CommandAttack* attack);
  ::IronGames::CommandAttack* unsafe_arena_release_attack();

  // .IronGames.CommandAttackMove attack_move = 3;
  bool has_attack_move() const;
  private:
  bool _internal_has_attack_move() const;
  public:
  void clear_attack_move();
  const ::IronGames::CommandAttackMove& attack_move() const;
  ::IronGames::CommandAttackMove* release_attack_move();
  ::IronGames::CommandAttackMove* mutable_attack_move();
  void set_allocated_attack_move(::IronGames::CommandAttackMove* attack_move);
  private:
  const ::IronGames::CommandAttackMove& _internal_attack_move() const;
  ::IronGames::CommandAttackMove* _internal_mutable_attack_move();
  public:
  void unsafe_arena_set_allocated_attack_move(
      ::IronGames::CommandAttackMove* attack_move);
  ::IronGames::CommandAttackMove* unsafe_arena_release_attack_move();

  void clear_command();
  CommandCase command_case() const;
  // @@protoc_insertion_point(class_scope:IronGames.EventUnitCommand)
 private:
  class _Internal;
  void set_has_move();
  void set_has_attack();
  void set_has_attack_move();

  inline bool has_command() const;
  inline void clear_has_command();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union CommandUnion {
    constexpr CommandUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::IronGames::CommandMove* move_;
    ::IronGames::CommandAttack* attack_;
    ::IronGames::CommandAttackMove* attack_move_;
  } command_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_core_2eproto;
};
// -------------------------------------------------------------------

class EventPlayerReadyToStartGame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IronGames.EventPlayerReadyToStartGame) */ {
 public:
  inline EventPlayerReadyToStartGame() : EventPlayerReadyToStartGame(nullptr) {}
  virtual ~EventPlayerReadyToStartGame();
  explicit constexpr EventPlayerReadyToStartGame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventPlayerReadyToStartGame(const EventPlayerReadyToStartGame& from);
  EventPlayerReadyToStartGame(EventPlayerReadyToStartGame&& from) noexcept
    : EventPlayerReadyToStartGame() {
    *this = ::std::move(from);
  }

  inline EventPlayerReadyToStartGame& operator=(const EventPlayerReadyToStartGame& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventPlayerReadyToStartGame& operator=(EventPlayerReadyToStartGame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EventPlayerReadyToStartGame& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventPlayerReadyToStartGame* internal_default_instance() {
    return reinterpret_cast<const EventPlayerReadyToStartGame*>(
               &_EventPlayerReadyToStartGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(EventPlayerReadyToStartGame& a, EventPlayerReadyToStartGame& b) {
    a.Swap(&b);
  }
  inline void Swap(EventPlayerReadyToStartGame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventPlayerReadyToStartGame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventPlayerReadyToStartGame* New() const final {
    return CreateMaybeMessage<EventPlayerReadyToStartGame>(nullptr);
  }

  EventPlayerReadyToStartGame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventPlayerReadyToStartGame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EventPlayerReadyToStartGame& from);
  void MergeFrom(const EventPlayerReadyToStartGame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventPlayerReadyToStartGame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IronGames.EventPlayerReadyToStartGame";
  }
  protected:
  explicit EventPlayerReadyToStartGame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_core_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IronGames.EventPlayerReadyToStartGame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2eproto;
};
// -------------------------------------------------------------------

class EventGameStart PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IronGames.EventGameStart) */ {
 public:
  inline EventGameStart() : EventGameStart(nullptr) {}
  virtual ~EventGameStart();
  explicit constexpr EventGameStart(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventGameStart(const EventGameStart& from);
  EventGameStart(EventGameStart&& from) noexcept
    : EventGameStart() {
    *this = ::std::move(from);
  }

  inline EventGameStart& operator=(const EventGameStart& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventGameStart& operator=(EventGameStart&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EventGameStart& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventGameStart* internal_default_instance() {
    return reinterpret_cast<const EventGameStart*>(
               &_EventGameStart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(EventGameStart& a, EventGameStart& b) {
    a.Swap(&b);
  }
  inline void Swap(EventGameStart* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventGameStart* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventGameStart* New() const final {
    return CreateMaybeMessage<EventGameStart>(nullptr);
  }

  EventGameStart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventGameStart>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EventGameStart& from);
  void MergeFrom(const EventGameStart& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventGameStart* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IronGames.EventGameStart";
  }
  protected:
  explicit EventGameStart(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_core_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IronGames.EventGameStart)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2eproto;
};
// -------------------------------------------------------------------

class EventAllPlayersReadyForGameToStart PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IronGames.EventAllPlayersReadyForGameToStart) */ {
 public:
  inline EventAllPlayersReadyForGameToStart() : EventAllPlayersReadyForGameToStart(nullptr) {}
  virtual ~EventAllPlayersReadyForGameToStart();
  explicit constexpr EventAllPlayersReadyForGameToStart(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventAllPlayersReadyForGameToStart(const EventAllPlayersReadyForGameToStart& from);
  EventAllPlayersReadyForGameToStart(EventAllPlayersReadyForGameToStart&& from) noexcept
    : EventAllPlayersReadyForGameToStart() {
    *this = ::std::move(from);
  }

  inline EventAllPlayersReadyForGameToStart& operator=(const EventAllPlayersReadyForGameToStart& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventAllPlayersReadyForGameToStart& operator=(EventAllPlayersReadyForGameToStart&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EventAllPlayersReadyForGameToStart& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventAllPlayersReadyForGameToStart* internal_default_instance() {
    return reinterpret_cast<const EventAllPlayersReadyForGameToStart*>(
               &_EventAllPlayersReadyForGameToStart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(EventAllPlayersReadyForGameToStart& a, EventAllPlayersReadyForGameToStart& b) {
    a.Swap(&b);
  }
  inline void Swap(EventAllPlayersReadyForGameToStart* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventAllPlayersReadyForGameToStart* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventAllPlayersReadyForGameToStart* New() const final {
    return CreateMaybeMessage<EventAllPlayersReadyForGameToStart>(nullptr);
  }

  EventAllPlayersReadyForGameToStart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventAllPlayersReadyForGameToStart>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EventAllPlayersReadyForGameToStart& from);
  void MergeFrom(const EventAllPlayersReadyForGameToStart& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventAllPlayersReadyForGameToStart* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IronGames.EventAllPlayersReadyForGameToStart";
  }
  protected:
  explicit EventAllPlayersReadyForGameToStart(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_core_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IronGames.EventAllPlayersReadyForGameToStart)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2eproto;
};
// -------------------------------------------------------------------

class EventPlayerLoadedGame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IronGames.EventPlayerLoadedGame) */ {
 public:
  inline EventPlayerLoadedGame() : EventPlayerLoadedGame(nullptr) {}
  virtual ~EventPlayerLoadedGame();
  explicit constexpr EventPlayerLoadedGame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventPlayerLoadedGame(const EventPlayerLoadedGame& from);
  EventPlayerLoadedGame(EventPlayerLoadedGame&& from) noexcept
    : EventPlayerLoadedGame() {
    *this = ::std::move(from);
  }

  inline EventPlayerLoadedGame& operator=(const EventPlayerLoadedGame& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventPlayerLoadedGame& operator=(EventPlayerLoadedGame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EventPlayerLoadedGame& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventPlayerLoadedGame* internal_default_instance() {
    return reinterpret_cast<const EventPlayerLoadedGame*>(
               &_EventPlayerLoadedGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(EventPlayerLoadedGame& a, EventPlayerLoadedGame& b) {
    a.Swap(&b);
  }
  inline void Swap(EventPlayerLoadedGame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventPlayerLoadedGame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventPlayerLoadedGame* New() const final {
    return CreateMaybeMessage<EventPlayerLoadedGame>(nullptr);
  }

  EventPlayerLoadedGame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventPlayerLoadedGame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EventPlayerLoadedGame& from);
  void MergeFrom(const EventPlayerLoadedGame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventPlayerLoadedGame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IronGames.EventPlayerLoadedGame";
  }
  protected:
  explicit EventPlayerLoadedGame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_core_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IronGames.EventPlayerLoadedGame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2eproto;
};
// -------------------------------------------------------------------

class EventPlayerLoadedTile PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IronGames.EventPlayerLoadedTile) */ {
 public:
  inline EventPlayerLoadedTile() : EventPlayerLoadedTile(nullptr) {}
  virtual ~EventPlayerLoadedTile();
  explicit constexpr EventPlayerLoadedTile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventPlayerLoadedTile(const EventPlayerLoadedTile& from);
  EventPlayerLoadedTile(EventPlayerLoadedTile&& from) noexcept
    : EventPlayerLoadedTile() {
    *this = ::std::move(from);
  }

  inline EventPlayerLoadedTile& operator=(const EventPlayerLoadedTile& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventPlayerLoadedTile& operator=(EventPlayerLoadedTile&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EventPlayerLoadedTile& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventPlayerLoadedTile* internal_default_instance() {
    return reinterpret_cast<const EventPlayerLoadedTile*>(
               &_EventPlayerLoadedTile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(EventPlayerLoadedTile& a, EventPlayerLoadedTile& b) {
    a.Swap(&b);
  }
  inline void Swap(EventPlayerLoadedTile* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventPlayerLoadedTile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventPlayerLoadedTile* New() const final {
    return CreateMaybeMessage<EventPlayerLoadedTile>(nullptr);
  }

  EventPlayerLoadedTile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventPlayerLoadedTile>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EventPlayerLoadedTile& from);
  void MergeFrom(const EventPlayerLoadedTile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventPlayerLoadedTile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IronGames.EventPlayerLoadedTile";
  }
  protected:
  explicit EventPlayerLoadedTile(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_core_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTileFieldNumber = 1,
  };
  // .IronGames.Tile tile = 1;
  bool has_tile() const;
  private:
  bool _internal_has_tile() const;
  public:
  void clear_tile();
  const ::IronGames::Tile& tile() const;
  ::IronGames::Tile* release_tile();
  ::IronGames::Tile* mutable_tile();
  void set_allocated_tile(::IronGames::Tile* tile);
  private:
  const ::IronGames::Tile& _internal_tile() const;
  ::IronGames::Tile* _internal_mutable_tile();
  public:
  void unsafe_arena_set_allocated_tile(
      ::IronGames::Tile* tile);
  ::IronGames::Tile* unsafe_arena_release_tile();

  // @@protoc_insertion_point(class_scope:IronGames.EventPlayerLoadedTile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::IronGames::Tile* tile_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2eproto;
};
// -------------------------------------------------------------------

class Event PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IronGames.Event) */ {
 public:
  inline Event() : Event(nullptr) {}
  virtual ~Event();
  explicit constexpr Event(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Event(const Event& from);
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event& operator=(Event&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Event& default_instance() {
    return *internal_default_instance();
  }
  enum EventCase {
    kPlayerConnected = 3,
    kPlayerDisconnected = 4,
    kUnitCreation = 5,
    kActorCreationRequest = 6,
    kUnitDestruction = 7,
    kBuildingCreation = 8,
    kBuildingDestruction = 9,
    kUnitCommand = 10,
    kPlayerReadyToStartGame = 11,
    kGameStart = 12,
    kPlayerChanged = 13,
    kAllPlayersReadyForGameToStart = 14,
    kPlayerLoadedTile = 15,
    kPlayerLoadedGame = 16,
    EVENT_NOT_SET = 0,
  };

  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }
  inline void Swap(Event* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Event* New() const final {
    return CreateMaybeMessage<Event>(nullptr);
  }

  Event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IronGames.Event";
  }
  protected:
  explicit Event(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_core_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kSenderIdFieldNumber = 2,
    kPlayerConnectedFieldNumber = 3,
    kPlayerDisconnectedFieldNumber = 4,
    kUnitCreationFieldNumber = 5,
    kActorCreationRequestFieldNumber = 6,
    kUnitDestructionFieldNumber = 7,
    kBuildingCreationFieldNumber = 8,
    kBuildingDestructionFieldNumber = 9,
    kUnitCommandFieldNumber = 10,
    kPlayerReadyToStartGameFieldNumber = 11,
    kGameStartFieldNumber = 12,
    kPlayerChangedFieldNumber = 13,
    kAllPlayersReadyForGameToStartFieldNumber = 14,
    kPlayerLoadedTileFieldNumber = 15,
    kPlayerLoadedGameFieldNumber = 16,
  };
  // int64 time = 1;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 sender_id = 2;
  void clear_sender_id();
  ::PROTOBUF_NAMESPACE_ID::int32 sender_id() const;
  void set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sender_id() const;
  void _internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .IronGames.EventPlayerConnected player_connected = 3;
  bool has_player_connected() const;
  private:
  bool _internal_has_player_connected() const;
  public:
  void clear_player_connected();
  const ::IronGames::EventPlayerConnected& player_connected() const;
  ::IronGames::EventPlayerConnected* release_player_connected();
  ::IronGames::EventPlayerConnected* mutable_player_connected();
  void set_allocated_player_connected(::IronGames::EventPlayerConnected* player_connected);
  private:
  const ::IronGames::EventPlayerConnected& _internal_player_connected() const;
  ::IronGames::EventPlayerConnected* _internal_mutable_player_connected();
  public:
  void unsafe_arena_set_allocated_player_connected(
      ::IronGames::EventPlayerConnected* player_connected);
  ::IronGames::EventPlayerConnected* unsafe_arena_release_player_connected();

  // .IronGames.EventPlayerDisconnected player_disconnected = 4;
  bool has_player_disconnected() const;
  private:
  bool _internal_has_player_disconnected() const;
  public:
  void clear_player_disconnected();
  const ::IronGames::EventPlayerDisconnected& player_disconnected() const;
  ::IronGames::EventPlayerDisconnected* release_player_disconnected();
  ::IronGames::EventPlayerDisconnected* mutable_player_disconnected();
  void set_allocated_player_disconnected(::IronGames::EventPlayerDisconnected* player_disconnected);
  private:
  const ::IronGames::EventPlayerDisconnected& _internal_player_disconnected() const;
  ::IronGames::EventPlayerDisconnected* _internal_mutable_player_disconnected();
  public:
  void unsafe_arena_set_allocated_player_disconnected(
      ::IronGames::EventPlayerDisconnected* player_disconnected);
  ::IronGames::EventPlayerDisconnected* unsafe_arena_release_player_disconnected();

  // .IronGames.EventUnitCreation unit_creation = 5;
  bool has_unit_creation() const;
  private:
  bool _internal_has_unit_creation() const;
  public:
  void clear_unit_creation();
  const ::IronGames::EventUnitCreation& unit_creation() const;
  ::IronGames::EventUnitCreation* release_unit_creation();
  ::IronGames::EventUnitCreation* mutable_unit_creation();
  void set_allocated_unit_creation(::IronGames::EventUnitCreation* unit_creation);
  private:
  const ::IronGames::EventUnitCreation& _internal_unit_creation() const;
  ::IronGames::EventUnitCreation* _internal_mutable_unit_creation();
  public:
  void unsafe_arena_set_allocated_unit_creation(
      ::IronGames::EventUnitCreation* unit_creation);
  ::IronGames::EventUnitCreation* unsafe_arena_release_unit_creation();

  // .IronGames.EventActorCreationRequest actor_creation_request = 6;
  bool has_actor_creation_request() const;
  private:
  bool _internal_has_actor_creation_request() const;
  public:
  void clear_actor_creation_request();
  const ::IronGames::EventActorCreationRequest& actor_creation_request() const;
  ::IronGames::EventActorCreationRequest* release_actor_creation_request();
  ::IronGames::EventActorCreationRequest* mutable_actor_creation_request();
  void set_allocated_actor_creation_request(::IronGames::EventActorCreationRequest* actor_creation_request);
  private:
  const ::IronGames::EventActorCreationRequest& _internal_actor_creation_request() const;
  ::IronGames::EventActorCreationRequest* _internal_mutable_actor_creation_request();
  public:
  void unsafe_arena_set_allocated_actor_creation_request(
      ::IronGames::EventActorCreationRequest* actor_creation_request);
  ::IronGames::EventActorCreationRequest* unsafe_arena_release_actor_creation_request();

  // .IronGames.EventUnitDestruction unit_destruction = 7;
  bool has_unit_destruction() const;
  private:
  bool _internal_has_unit_destruction() const;
  public:
  void clear_unit_destruction();
  const ::IronGames::EventUnitDestruction& unit_destruction() const;
  ::IronGames::EventUnitDestruction* release_unit_destruction();
  ::IronGames::EventUnitDestruction* mutable_unit_destruction();
  void set_allocated_unit_destruction(::IronGames::EventUnitDestruction* unit_destruction);
  private:
  const ::IronGames::EventUnitDestruction& _internal_unit_destruction() const;
  ::IronGames::EventUnitDestruction* _internal_mutable_unit_destruction();
  public:
  void unsafe_arena_set_allocated_unit_destruction(
      ::IronGames::EventUnitDestruction* unit_destruction);
  ::IronGames::EventUnitDestruction* unsafe_arena_release_unit_destruction();

  // .IronGames.EventBuildingCreation building_creation = 8;
  bool has_building_creation() const;
  private:
  bool _internal_has_building_creation() const;
  public:
  void clear_building_creation();
  const ::IronGames::EventBuildingCreation& building_creation() const;
  ::IronGames::EventBuildingCreation* release_building_creation();
  ::IronGames::EventBuildingCreation* mutable_building_creation();
  void set_allocated_building_creation(::IronGames::EventBuildingCreation* building_creation);
  private:
  const ::IronGames::EventBuildingCreation& _internal_building_creation() const;
  ::IronGames::EventBuildingCreation* _internal_mutable_building_creation();
  public:
  void unsafe_arena_set_allocated_building_creation(
      ::IronGames::EventBuildingCreation* building_creation);
  ::IronGames::EventBuildingCreation* unsafe_arena_release_building_creation();

  // .IronGames.EventBuildingDestruction building_destruction = 9;
  bool has_building_destruction() const;
  private:
  bool _internal_has_building_destruction() const;
  public:
  void clear_building_destruction();
  const ::IronGames::EventBuildingDestruction& building_destruction() const;
  ::IronGames::EventBuildingDestruction* release_building_destruction();
  ::IronGames::EventBuildingDestruction* mutable_building_destruction();
  void set_allocated_building_destruction(::IronGames::EventBuildingDestruction* building_destruction);
  private:
  const ::IronGames::EventBuildingDestruction& _internal_building_destruction() const;
  ::IronGames::EventBuildingDestruction* _internal_mutable_building_destruction();
  public:
  void unsafe_arena_set_allocated_building_destruction(
      ::IronGames::EventBuildingDestruction* building_destruction);
  ::IronGames::EventBuildingDestruction* unsafe_arena_release_building_destruction();

  // .IronGames.EventUnitCommand unit_command = 10;
  bool has_unit_command() const;
  private:
  bool _internal_has_unit_command() const;
  public:
  void clear_unit_command();
  const ::IronGames::EventUnitCommand& unit_command() const;
  ::IronGames::EventUnitCommand* release_unit_command();
  ::IronGames::EventUnitCommand* mutable_unit_command();
  void set_allocated_unit_command(::IronGames::EventUnitCommand* unit_command);
  private:
  const ::IronGames::EventUnitCommand& _internal_unit_command() const;
  ::IronGames::EventUnitCommand* _internal_mutable_unit_command();
  public:
  void unsafe_arena_set_allocated_unit_command(
      ::IronGames::EventUnitCommand* unit_command);
  ::IronGames::EventUnitCommand* unsafe_arena_release_unit_command();

  // .IronGames.EventPlayerReadyToStartGame player_ready_to_start_Game = 11;
  bool has_player_ready_to_start_game() const;
  private:
  bool _internal_has_player_ready_to_start_game() const;
  public:
  void clear_player_ready_to_start_game();
  const ::IronGames::EventPlayerReadyToStartGame& player_ready_to_start_game() const;
  ::IronGames::EventPlayerReadyToStartGame* release_player_ready_to_start_game();
  ::IronGames::EventPlayerReadyToStartGame* mutable_player_ready_to_start_game();
  void set_allocated_player_ready_to_start_game(::IronGames::EventPlayerReadyToStartGame* player_ready_to_start_game);
  private:
  const ::IronGames::EventPlayerReadyToStartGame& _internal_player_ready_to_start_game() const;
  ::IronGames::EventPlayerReadyToStartGame* _internal_mutable_player_ready_to_start_game();
  public:
  void unsafe_arena_set_allocated_player_ready_to_start_game(
      ::IronGames::EventPlayerReadyToStartGame* player_ready_to_start_game);
  ::IronGames::EventPlayerReadyToStartGame* unsafe_arena_release_player_ready_to_start_game();

  // .IronGames.EventGameStart game_start = 12;
  bool has_game_start() const;
  private:
  bool _internal_has_game_start() const;
  public:
  void clear_game_start();
  const ::IronGames::EventGameStart& game_start() const;
  ::IronGames::EventGameStart* release_game_start();
  ::IronGames::EventGameStart* mutable_game_start();
  void set_allocated_game_start(::IronGames::EventGameStart* game_start);
  private:
  const ::IronGames::EventGameStart& _internal_game_start() const;
  ::IronGames::EventGameStart* _internal_mutable_game_start();
  public:
  void unsafe_arena_set_allocated_game_start(
      ::IronGames::EventGameStart* game_start);
  ::IronGames::EventGameStart* unsafe_arena_release_game_start();

  // .IronGames.EventPlayerChanged player_changed = 13;
  bool has_player_changed() const;
  private:
  bool _internal_has_player_changed() const;
  public:
  void clear_player_changed();
  const ::IronGames::EventPlayerChanged& player_changed() const;
  ::IronGames::EventPlayerChanged* release_player_changed();
  ::IronGames::EventPlayerChanged* mutable_player_changed();
  void set_allocated_player_changed(::IronGames::EventPlayerChanged* player_changed);
  private:
  const ::IronGames::EventPlayerChanged& _internal_player_changed() const;
  ::IronGames::EventPlayerChanged* _internal_mutable_player_changed();
  public:
  void unsafe_arena_set_allocated_player_changed(
      ::IronGames::EventPlayerChanged* player_changed);
  ::IronGames::EventPlayerChanged* unsafe_arena_release_player_changed();

  // .IronGames.EventAllPlayersReadyForGameToStart all_players_ready_for_game_to_start = 14;
  bool has_all_players_ready_for_game_to_start() const;
  private:
  bool _internal_has_all_players_ready_for_game_to_start() const;
  public:
  void clear_all_players_ready_for_game_to_start();
  const ::IronGames::EventAllPlayersReadyForGameToStart& all_players_ready_for_game_to_start() const;
  ::IronGames::EventAllPlayersReadyForGameToStart* release_all_players_ready_for_game_to_start();
  ::IronGames::EventAllPlayersReadyForGameToStart* mutable_all_players_ready_for_game_to_start();
  void set_allocated_all_players_ready_for_game_to_start(::IronGames::EventAllPlayersReadyForGameToStart* all_players_ready_for_game_to_start);
  private:
  const ::IronGames::EventAllPlayersReadyForGameToStart& _internal_all_players_ready_for_game_to_start() const;
  ::IronGames::EventAllPlayersReadyForGameToStart* _internal_mutable_all_players_ready_for_game_to_start();
  public:
  void unsafe_arena_set_allocated_all_players_ready_for_game_to_start(
      ::IronGames::EventAllPlayersReadyForGameToStart* all_players_ready_for_game_to_start);
  ::IronGames::EventAllPlayersReadyForGameToStart* unsafe_arena_release_all_players_ready_for_game_to_start();

  // .IronGames.EventPlayerLoadedTile player_loaded_tile = 15;
  bool has_player_loaded_tile() const;
  private:
  bool _internal_has_player_loaded_tile() const;
  public:
  void clear_player_loaded_tile();
  const ::IronGames::EventPlayerLoadedTile& player_loaded_tile() const;
  ::IronGames::EventPlayerLoadedTile* release_player_loaded_tile();
  ::IronGames::EventPlayerLoadedTile* mutable_player_loaded_tile();
  void set_allocated_player_loaded_tile(::IronGames::EventPlayerLoadedTile* player_loaded_tile);
  private:
  const ::IronGames::EventPlayerLoadedTile& _internal_player_loaded_tile() const;
  ::IronGames::EventPlayerLoadedTile* _internal_mutable_player_loaded_tile();
  public:
  void unsafe_arena_set_allocated_player_loaded_tile(
      ::IronGames::EventPlayerLoadedTile* player_loaded_tile);
  ::IronGames::EventPlayerLoadedTile* unsafe_arena_release_player_loaded_tile();

  // .IronGames.EventPlayerLoadedGame player_loaded_game = 16;
  bool has_player_loaded_game() const;
  private:
  bool _internal_has_player_loaded_game() const;
  public:
  void clear_player_loaded_game();
  const ::IronGames::EventPlayerLoadedGame& player_loaded_game() const;
  ::IronGames::EventPlayerLoadedGame* release_player_loaded_game();
  ::IronGames::EventPlayerLoadedGame* mutable_player_loaded_game();
  void set_allocated_player_loaded_game(::IronGames::EventPlayerLoadedGame* player_loaded_game);
  private:
  const ::IronGames::EventPlayerLoadedGame& _internal_player_loaded_game() const;
  ::IronGames::EventPlayerLoadedGame* _internal_mutable_player_loaded_game();
  public:
  void unsafe_arena_set_allocated_player_loaded_game(
      ::IronGames::EventPlayerLoadedGame* player_loaded_game);
  ::IronGames::EventPlayerLoadedGame* unsafe_arena_release_player_loaded_game();

  void clear_event();
  EventCase event_case() const;
  // @@protoc_insertion_point(class_scope:IronGames.Event)
 private:
  class _Internal;
  void set_has_player_connected();
  void set_has_player_disconnected();
  void set_has_unit_creation();
  void set_has_actor_creation_request();
  void set_has_unit_destruction();
  void set_has_building_creation();
  void set_has_building_destruction();
  void set_has_unit_command();
  void set_has_player_ready_to_start_game();
  void set_has_game_start();
  void set_has_player_changed();
  void set_has_all_players_ready_for_game_to_start();
  void set_has_player_loaded_tile();
  void set_has_player_loaded_game();

  inline bool has_event() const;
  inline void clear_has_event();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  ::PROTOBUF_NAMESPACE_ID::int32 sender_id_;
  union EventUnion {
    constexpr EventUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::IronGames::EventPlayerConnected* player_connected_;
    ::IronGames::EventPlayerDisconnected* player_disconnected_;
    ::IronGames::EventUnitCreation* unit_creation_;
    ::IronGames::EventActorCreationRequest* actor_creation_request_;
    ::IronGames::EventUnitDestruction* unit_destruction_;
    ::IronGames::EventBuildingCreation* building_creation_;
    ::IronGames::EventBuildingDestruction* building_destruction_;
    ::IronGames::EventUnitCommand* unit_command_;
    ::IronGames::EventPlayerReadyToStartGame* player_ready_to_start_game_;
    ::IronGames::EventGameStart* game_start_;
    ::IronGames::EventPlayerChanged* player_changed_;
    ::IronGames::EventAllPlayersReadyForGameToStart* all_players_ready_for_game_to_start_;
    ::IronGames::EventPlayerLoadedTile* player_loaded_tile_;
    ::IronGames::EventPlayerLoadedGame* player_loaded_game_;
  } event_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_core_2eproto;
};
// -------------------------------------------------------------------

class EventList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IronGames.EventList) */ {
 public:
  inline EventList() : EventList(nullptr) {}
  virtual ~EventList();
  explicit constexpr EventList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventList(const EventList& from);
  EventList(EventList&& from) noexcept
    : EventList() {
    *this = ::std::move(from);
  }

  inline EventList& operator=(const EventList& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventList& operator=(EventList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EventList& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventList* internal_default_instance() {
    return reinterpret_cast<const EventList*>(
               &_EventList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(EventList& a, EventList& b) {
    a.Swap(&b);
  }
  inline void Swap(EventList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventList* New() const final {
    return CreateMaybeMessage<EventList>(nullptr);
  }

  EventList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EventList& from);
  void MergeFrom(const EventList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IronGames.EventList";
  }
  protected:
  explicit EventList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_core_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 1,
  };
  // repeated .IronGames.Event events = 1;
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  ::IronGames::Event* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::Event >*
      mutable_events();
  private:
  const ::IronGames::Event& _internal_events(int index) const;
  ::IronGames::Event* _internal_add_events();
  public:
  const ::IronGames::Event& events(int index) const;
  ::IronGames::Event* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::Event >&
      events() const;

  // @@protoc_insertion_point(class_scope:IronGames.EventList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::Event > events_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2eproto;
};
// -------------------------------------------------------------------

class JoinGameRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IronGames.JoinGameRequest) */ {
 public:
  inline JoinGameRequest() : JoinGameRequest(nullptr) {}
  virtual ~JoinGameRequest();
  explicit constexpr JoinGameRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JoinGameRequest(const JoinGameRequest& from);
  JoinGameRequest(JoinGameRequest&& from) noexcept
    : JoinGameRequest() {
    *this = ::std::move(from);
  }

  inline JoinGameRequest& operator=(const JoinGameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinGameRequest& operator=(JoinGameRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JoinGameRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const JoinGameRequest* internal_default_instance() {
    return reinterpret_cast<const JoinGameRequest*>(
               &_JoinGameRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(JoinGameRequest& a, JoinGameRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinGameRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinGameRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JoinGameRequest* New() const final {
    return CreateMaybeMessage<JoinGameRequest>(nullptr);
  }

  JoinGameRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JoinGameRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JoinGameRequest& from);
  void MergeFrom(const JoinGameRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinGameRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IronGames.JoinGameRequest";
  }
  protected:
  explicit JoinGameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_core_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
    kGameIdFieldNumber = 2,
  };
  // .IronGames.Player player = 1;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::IronGames::Player& player() const;
  ::IronGames::Player* release_player();
  ::IronGames::Player* mutable_player();
  void set_allocated_player(::IronGames::Player* player);
  private:
  const ::IronGames::Player& _internal_player() const;
  ::IronGames::Player* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::IronGames::Player* player);
  ::IronGames::Player* unsafe_arena_release_player();

  // int32 game_id = 2;
  void clear_game_id();
  ::PROTOBUF_NAMESPACE_ID::int32 game_id() const;
  void set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_game_id() const;
  void _internal_set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:IronGames.JoinGameRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::IronGames::Player* player_;
  ::PROTOBUF_NAMESPACE_ID::int32 game_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2eproto;
};
// -------------------------------------------------------------------

class JoinGameResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IronGames.JoinGameResponse) */ {
 public:
  inline JoinGameResponse() : JoinGameResponse(nullptr) {}
  virtual ~JoinGameResponse();
  explicit constexpr JoinGameResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JoinGameResponse(const JoinGameResponse& from);
  JoinGameResponse(JoinGameResponse&& from) noexcept
    : JoinGameResponse() {
    *this = ::std::move(from);
  }

  inline JoinGameResponse& operator=(const JoinGameResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinGameResponse& operator=(JoinGameResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JoinGameResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const JoinGameResponse* internal_default_instance() {
    return reinterpret_cast<const JoinGameResponse*>(
               &_JoinGameResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(JoinGameResponse& a, JoinGameResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinGameResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinGameResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JoinGameResponse* New() const final {
    return CreateMaybeMessage<JoinGameResponse>(nullptr);
  }

  JoinGameResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JoinGameResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JoinGameResponse& from);
  void MergeFrom(const JoinGameResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinGameResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IronGames.JoinGameResponse";
  }
  protected:
  explicit JoinGameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_core_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // repeated .IronGames.Player players = 2;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::IronGames::Player* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::Player >*
      mutable_players();
  private:
  const ::IronGames::Player& _internal_players(int index) const;
  ::IronGames::Player* _internal_add_players();
  public:
  const ::IronGames::Player& players(int index) const;
  ::IronGames::Player* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::Player >&
      players() const;

  // int32 player_id = 1;
  void clear_player_id();
  ::PROTOBUF_NAMESPACE_ID::int32 player_id() const;
  void set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_player_id() const;
  void _internal_set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:IronGames.JoinGameResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::Player > players_;
  ::PROTOBUF_NAMESPACE_ID::int32 player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2eproto;
};
// -------------------------------------------------------------------

class ExitGameRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IronGames.ExitGameRequest) */ {
 public:
  inline ExitGameRequest() : ExitGameRequest(nullptr) {}
  virtual ~ExitGameRequest();
  explicit constexpr ExitGameRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExitGameRequest(const ExitGameRequest& from);
  ExitGameRequest(ExitGameRequest&& from) noexcept
    : ExitGameRequest() {
    *this = ::std::move(from);
  }

  inline ExitGameRequest& operator=(const ExitGameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExitGameRequest& operator=(ExitGameRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExitGameRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExitGameRequest* internal_default_instance() {
    return reinterpret_cast<const ExitGameRequest*>(
               &_ExitGameRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(ExitGameRequest& a, ExitGameRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ExitGameRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExitGameRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExitGameRequest* New() const final {
    return CreateMaybeMessage<ExitGameRequest>(nullptr);
  }

  ExitGameRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExitGameRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExitGameRequest& from);
  void MergeFrom(const ExitGameRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExitGameRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IronGames.ExitGameRequest";
  }
  protected:
  explicit ExitGameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_core_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // int32 player_id = 1;
  void clear_player_id();
  ::PROTOBUF_NAMESPACE_ID::int32 player_id() const;
  void set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_player_id() const;
  void _internal_set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:IronGames.ExitGameRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2eproto;
};
// -------------------------------------------------------------------

class ExitGameResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IronGames.ExitGameResponse) */ {
 public:
  inline ExitGameResponse() : ExitGameResponse(nullptr) {}
  virtual ~ExitGameResponse();
  explicit constexpr ExitGameResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExitGameResponse(const ExitGameResponse& from);
  ExitGameResponse(ExitGameResponse&& from) noexcept
    : ExitGameResponse() {
    *this = ::std::move(from);
  }

  inline ExitGameResponse& operator=(const ExitGameResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExitGameResponse& operator=(ExitGameResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExitGameResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExitGameResponse* internal_default_instance() {
    return reinterpret_cast<const ExitGameResponse*>(
               &_ExitGameResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(ExitGameResponse& a, ExitGameResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ExitGameResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExitGameResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExitGameResponse* New() const final {
    return CreateMaybeMessage<ExitGameResponse>(nullptr);
  }

  ExitGameResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExitGameResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExitGameResponse& from);
  void MergeFrom(const ExitGameResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExitGameResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IronGames.ExitGameResponse";
  }
  protected:
  explicit ExitGameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_core_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IronGames.ExitGameResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2eproto;
};
// -------------------------------------------------------------------

class SubscribeEventsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IronGames.SubscribeEventsRequest) */ {
 public:
  inline SubscribeEventsRequest() : SubscribeEventsRequest(nullptr) {}
  virtual ~SubscribeEventsRequest();
  explicit constexpr SubscribeEventsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeEventsRequest(const SubscribeEventsRequest& from);
  SubscribeEventsRequest(SubscribeEventsRequest&& from) noexcept
    : SubscribeEventsRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeEventsRequest& operator=(const SubscribeEventsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeEventsRequest& operator=(SubscribeEventsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeEventsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeEventsRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeEventsRequest*>(
               &_SubscribeEventsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(SubscribeEventsRequest& a, SubscribeEventsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeEventsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeEventsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeEventsRequest* New() const final {
    return CreateMaybeMessage<SubscribeEventsRequest>(nullptr);
  }

  SubscribeEventsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeEventsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeEventsRequest& from);
  void MergeFrom(const SubscribeEventsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeEventsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IronGames.SubscribeEventsRequest";
  }
  protected:
  explicit SubscribeEventsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_core_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
  };
  // .IronGames.Player player = 1;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::IronGames::Player& player() const;
  ::IronGames::Player* release_player();
  ::IronGames::Player* mutable_player();
  void set_allocated_player(::IronGames::Player* player);
  private:
  const ::IronGames::Player& _internal_player() const;
  ::IronGames::Player* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::IronGames::Player* player);
  ::IronGames::Player* unsafe_arena_release_player();

  // @@protoc_insertion_point(class_scope:IronGames.SubscribeEventsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::IronGames::Player* player_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2eproto;
};
// -------------------------------------------------------------------

class SendEventResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IronGames.SendEventResponse) */ {
 public:
  inline SendEventResponse() : SendEventResponse(nullptr) {}
  virtual ~SendEventResponse();
  explicit constexpr SendEventResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendEventResponse(const SendEventResponse& from);
  SendEventResponse(SendEventResponse&& from) noexcept
    : SendEventResponse() {
    *this = ::std::move(from);
  }

  inline SendEventResponse& operator=(const SendEventResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendEventResponse& operator=(SendEventResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendEventResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendEventResponse* internal_default_instance() {
    return reinterpret_cast<const SendEventResponse*>(
               &_SendEventResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(SendEventResponse& a, SendEventResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SendEventResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendEventResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendEventResponse* New() const final {
    return CreateMaybeMessage<SendEventResponse>(nullptr);
  }

  SendEventResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendEventResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendEventResponse& from);
  void MergeFrom(const SendEventResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendEventResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IronGames.SendEventResponse";
  }
  protected:
  explicit SendEventResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_core_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IronGames.SendEventResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2eproto;
};
// -------------------------------------------------------------------

class NewGameRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IronGames.NewGameRequest) */ {
 public:
  inline NewGameRequest() : NewGameRequest(nullptr) {}
  virtual ~NewGameRequest();
  explicit constexpr NewGameRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NewGameRequest(const NewGameRequest& from);
  NewGameRequest(NewGameRequest&& from) noexcept
    : NewGameRequest() {
    *this = ::std::move(from);
  }

  inline NewGameRequest& operator=(const NewGameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewGameRequest& operator=(NewGameRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NewGameRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewGameRequest* internal_default_instance() {
    return reinterpret_cast<const NewGameRequest*>(
               &_NewGameRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(NewGameRequest& a, NewGameRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NewGameRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewGameRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NewGameRequest* New() const final {
    return CreateMaybeMessage<NewGameRequest>(nullptr);
  }

  NewGameRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NewGameRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NewGameRequest& from);
  void MergeFrom(const NewGameRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewGameRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IronGames.NewGameRequest";
  }
  protected:
  explicit NewGameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_core_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IronGames.NewGameRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2eproto;
};
// -------------------------------------------------------------------

class NewGameResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IronGames.NewGameResponse) */ {
 public:
  inline NewGameResponse() : NewGameResponse(nullptr) {}
  virtual ~NewGameResponse();
  explicit constexpr NewGameResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NewGameResponse(const NewGameResponse& from);
  NewGameResponse(NewGameResponse&& from) noexcept
    : NewGameResponse() {
    *this = ::std::move(from);
  }

  inline NewGameResponse& operator=(const NewGameResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewGameResponse& operator=(NewGameResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NewGameResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewGameResponse* internal_default_instance() {
    return reinterpret_cast<const NewGameResponse*>(
               &_NewGameResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(NewGameResponse& a, NewGameResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NewGameResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewGameResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NewGameResponse* New() const final {
    return CreateMaybeMessage<NewGameResponse>(nullptr);
  }

  NewGameResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NewGameResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NewGameResponse& from);
  void MergeFrom(const NewGameResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewGameResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IronGames.NewGameResponse";
  }
  protected:
  explicit NewGameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_core_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameIdFieldNumber = 1,
  };
  // int32 game_id = 1;
  void clear_game_id();
  ::PROTOBUF_NAMESPACE_ID::int32 game_id() const;
  void set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_game_id() const;
  void _internal_set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:IronGames.NewGameResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 game_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2eproto;
};
// -------------------------------------------------------------------

class EndGameRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IronGames.EndGameRequest) */ {
 public:
  inline EndGameRequest() : EndGameRequest(nullptr) {}
  virtual ~EndGameRequest();
  explicit constexpr EndGameRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EndGameRequest(const EndGameRequest& from);
  EndGameRequest(EndGameRequest&& from) noexcept
    : EndGameRequest() {
    *this = ::std::move(from);
  }

  inline EndGameRequest& operator=(const EndGameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EndGameRequest& operator=(EndGameRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EndGameRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const EndGameRequest* internal_default_instance() {
    return reinterpret_cast<const EndGameRequest*>(
               &_EndGameRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(EndGameRequest& a, EndGameRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EndGameRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EndGameRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EndGameRequest* New() const final {
    return CreateMaybeMessage<EndGameRequest>(nullptr);
  }

  EndGameRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EndGameRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EndGameRequest& from);
  void MergeFrom(const EndGameRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EndGameRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IronGames.EndGameRequest";
  }
  protected:
  explicit EndGameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_core_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameIdFieldNumber = 1,
  };
  // int32 game_id = 1;
  void clear_game_id();
  ::PROTOBUF_NAMESPACE_ID::int32 game_id() const;
  void set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_game_id() const;
  void _internal_set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:IronGames.EndGameRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 game_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2eproto;
};
// -------------------------------------------------------------------

class EndGameResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:IronGames.EndGameResponse) */ {
 public:
  inline EndGameResponse() : EndGameResponse(nullptr) {}
  virtual ~EndGameResponse();
  explicit constexpr EndGameResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EndGameResponse(const EndGameResponse& from);
  EndGameResponse(EndGameResponse&& from) noexcept
    : EndGameResponse() {
    *this = ::std::move(from);
  }

  inline EndGameResponse& operator=(const EndGameResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EndGameResponse& operator=(EndGameResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EndGameResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const EndGameResponse* internal_default_instance() {
    return reinterpret_cast<const EndGameResponse*>(
               &_EndGameResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(EndGameResponse& a, EndGameResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(EndGameResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EndGameResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EndGameResponse* New() const final {
    return CreateMaybeMessage<EndGameResponse>(nullptr);
  }

  EndGameResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EndGameResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EndGameResponse& from);
  void MergeFrom(const EndGameResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EndGameResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "IronGames.EndGameResponse";
  }
  protected:
  explicit EndGameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_core_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:IronGames.EndGameResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_core_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Color

// float r = 1;
inline void Color::clear_r() {
  r_ = 0;
}
inline float Color::_internal_r() const {
  return r_;
}
inline float Color::r() const {
  // @@protoc_insertion_point(field_get:IronGames.Color.r)
  return _internal_r();
}
inline void Color::_internal_set_r(float value) {
  
  r_ = value;
}
inline void Color::set_r(float value) {
  _internal_set_r(value);
  // @@protoc_insertion_point(field_set:IronGames.Color.r)
}

// float g = 2;
inline void Color::clear_g() {
  g_ = 0;
}
inline float Color::_internal_g() const {
  return g_;
}
inline float Color::g() const {
  // @@protoc_insertion_point(field_get:IronGames.Color.g)
  return _internal_g();
}
inline void Color::_internal_set_g(float value) {
  
  g_ = value;
}
inline void Color::set_g(float value) {
  _internal_set_g(value);
  // @@protoc_insertion_point(field_set:IronGames.Color.g)
}

// float b = 3;
inline void Color::clear_b() {
  b_ = 0;
}
inline float Color::_internal_b() const {
  return b_;
}
inline float Color::b() const {
  // @@protoc_insertion_point(field_get:IronGames.Color.b)
  return _internal_b();
}
inline void Color::_internal_set_b(float value) {
  
  b_ = value;
}
inline void Color::set_b(float value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:IronGames.Color.b)
}

// float a = 4;
inline void Color::clear_a() {
  a_ = 0;
}
inline float Color::_internal_a() const {
  return a_;
}
inline float Color::a() const {
  // @@protoc_insertion_point(field_get:IronGames.Color.a)
  return _internal_a();
}
inline void Color::_internal_set_a(float value) {
  
  a_ = value;
}
inline void Color::set_a(float value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:IronGames.Color.a)
}

// -------------------------------------------------------------------

// Vector3

// float x = 1;
inline void Vector3::clear_x() {
  x_ = 0;
}
inline float Vector3::_internal_x() const {
  return x_;
}
inline float Vector3::x() const {
  // @@protoc_insertion_point(field_get:IronGames.Vector3.x)
  return _internal_x();
}
inline void Vector3::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Vector3::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:IronGames.Vector3.x)
}

// float y = 2;
inline void Vector3::clear_y() {
  y_ = 0;
}
inline float Vector3::_internal_y() const {
  return y_;
}
inline float Vector3::y() const {
  // @@protoc_insertion_point(field_get:IronGames.Vector3.y)
  return _internal_y();
}
inline void Vector3::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Vector3::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:IronGames.Vector3.y)
}

// float z = 3;
inline void Vector3::clear_z() {
  z_ = 0;
}
inline float Vector3::_internal_z() const {
  return z_;
}
inline float Vector3::z() const {
  // @@protoc_insertion_point(field_get:IronGames.Vector3.z)
  return _internal_z();
}
inline void Vector3::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Vector3::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:IronGames.Vector3.z)
}

// -------------------------------------------------------------------

// Matrix3

// .IronGames.Vector3 col0 = 1;
inline bool Matrix3::_internal_has_col0() const {
  return this != internal_default_instance() && col0_ != nullptr;
}
inline bool Matrix3::has_col0() const {
  return _internal_has_col0();
}
inline void Matrix3::clear_col0() {
  if (GetArena() == nullptr && col0_ != nullptr) {
    delete col0_;
  }
  col0_ = nullptr;
}
inline const ::IronGames::Vector3& Matrix3::_internal_col0() const {
  const ::IronGames::Vector3* p = col0_;
  return p != nullptr ? *p : reinterpret_cast<const ::IronGames::Vector3&>(
      ::IronGames::_Vector3_default_instance_);
}
inline const ::IronGames::Vector3& Matrix3::col0() const {
  // @@protoc_insertion_point(field_get:IronGames.Matrix3.col0)
  return _internal_col0();
}
inline void Matrix3::unsafe_arena_set_allocated_col0(
    ::IronGames::Vector3* col0) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(col0_);
  }
  col0_ = col0;
  if (col0) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IronGames.Matrix3.col0)
}
inline ::IronGames::Vector3* Matrix3::release_col0() {
  
  ::IronGames::Vector3* temp = col0_;
  col0_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::IronGames::Vector3* Matrix3::unsafe_arena_release_col0() {
  // @@protoc_insertion_point(field_release:IronGames.Matrix3.col0)
  
  ::IronGames::Vector3* temp = col0_;
  col0_ = nullptr;
  return temp;
}
inline ::IronGames::Vector3* Matrix3::_internal_mutable_col0() {
  
  if (col0_ == nullptr) {
    auto* p = CreateMaybeMessage<::IronGames::Vector3>(GetArena());
    col0_ = p;
  }
  return col0_;
}
inline ::IronGames::Vector3* Matrix3::mutable_col0() {
  // @@protoc_insertion_point(field_mutable:IronGames.Matrix3.col0)
  return _internal_mutable_col0();
}
inline void Matrix3::set_allocated_col0(::IronGames::Vector3* col0) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete col0_;
  }
  if (col0) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(col0);
    if (message_arena != submessage_arena) {
      col0 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, col0, submessage_arena);
    }
    
  } else {
    
  }
  col0_ = col0;
  // @@protoc_insertion_point(field_set_allocated:IronGames.Matrix3.col0)
}

// .IronGames.Vector3 col1 = 2;
inline bool Matrix3::_internal_has_col1() const {
  return this != internal_default_instance() && col1_ != nullptr;
}
inline bool Matrix3::has_col1() const {
  return _internal_has_col1();
}
inline void Matrix3::clear_col1() {
  if (GetArena() == nullptr && col1_ != nullptr) {
    delete col1_;
  }
  col1_ = nullptr;
}
inline const ::IronGames::Vector3& Matrix3::_internal_col1() const {
  const ::IronGames::Vector3* p = col1_;
  return p != nullptr ? *p : reinterpret_cast<const ::IronGames::Vector3&>(
      ::IronGames::_Vector3_default_instance_);
}
inline const ::IronGames::Vector3& Matrix3::col1() const {
  // @@protoc_insertion_point(field_get:IronGames.Matrix3.col1)
  return _internal_col1();
}
inline void Matrix3::unsafe_arena_set_allocated_col1(
    ::IronGames::Vector3* col1) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(col1_);
  }
  col1_ = col1;
  if (col1) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IronGames.Matrix3.col1)
}
inline ::IronGames::Vector3* Matrix3::release_col1() {
  
  ::IronGames::Vector3* temp = col1_;
  col1_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::IronGames::Vector3* Matrix3::unsafe_arena_release_col1() {
  // @@protoc_insertion_point(field_release:IronGames.Matrix3.col1)
  
  ::IronGames::Vector3* temp = col1_;
  col1_ = nullptr;
  return temp;
}
inline ::IronGames::Vector3* Matrix3::_internal_mutable_col1() {
  
  if (col1_ == nullptr) {
    auto* p = CreateMaybeMessage<::IronGames::Vector3>(GetArena());
    col1_ = p;
  }
  return col1_;
}
inline ::IronGames::Vector3* Matrix3::mutable_col1() {
  // @@protoc_insertion_point(field_mutable:IronGames.Matrix3.col1)
  return _internal_mutable_col1();
}
inline void Matrix3::set_allocated_col1(::IronGames::Vector3* col1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete col1_;
  }
  if (col1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(col1);
    if (message_arena != submessage_arena) {
      col1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, col1, submessage_arena);
    }
    
  } else {
    
  }
  col1_ = col1;
  // @@protoc_insertion_point(field_set_allocated:IronGames.Matrix3.col1)
}

// .IronGames.Vector3 col2 = 3;
inline bool Matrix3::_internal_has_col2() const {
  return this != internal_default_instance() && col2_ != nullptr;
}
inline bool Matrix3::has_col2() const {
  return _internal_has_col2();
}
inline void Matrix3::clear_col2() {
  if (GetArena() == nullptr && col2_ != nullptr) {
    delete col2_;
  }
  col2_ = nullptr;
}
inline const ::IronGames::Vector3& Matrix3::_internal_col2() const {
  const ::IronGames::Vector3* p = col2_;
  return p != nullptr ? *p : reinterpret_cast<const ::IronGames::Vector3&>(
      ::IronGames::_Vector3_default_instance_);
}
inline const ::IronGames::Vector3& Matrix3::col2() const {
  // @@protoc_insertion_point(field_get:IronGames.Matrix3.col2)
  return _internal_col2();
}
inline void Matrix3::unsafe_arena_set_allocated_col2(
    ::IronGames::Vector3* col2) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(col2_);
  }
  col2_ = col2;
  if (col2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IronGames.Matrix3.col2)
}
inline ::IronGames::Vector3* Matrix3::release_col2() {
  
  ::IronGames::Vector3* temp = col2_;
  col2_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::IronGames::Vector3* Matrix3::unsafe_arena_release_col2() {
  // @@protoc_insertion_point(field_release:IronGames.Matrix3.col2)
  
  ::IronGames::Vector3* temp = col2_;
  col2_ = nullptr;
  return temp;
}
inline ::IronGames::Vector3* Matrix3::_internal_mutable_col2() {
  
  if (col2_ == nullptr) {
    auto* p = CreateMaybeMessage<::IronGames::Vector3>(GetArena());
    col2_ = p;
  }
  return col2_;
}
inline ::IronGames::Vector3* Matrix3::mutable_col2() {
  // @@protoc_insertion_point(field_mutable:IronGames.Matrix3.col2)
  return _internal_mutable_col2();
}
inline void Matrix3::set_allocated_col2(::IronGames::Vector3* col2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete col2_;
  }
  if (col2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(col2);
    if (message_arena != submessage_arena) {
      col2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, col2, submessage_arena);
    }
    
  } else {
    
  }
  col2_ = col2;
  // @@protoc_insertion_point(field_set_allocated:IronGames.Matrix3.col2)
}

// -------------------------------------------------------------------

// Quaternion

// float w = 1;
inline void Quaternion::clear_w() {
  w_ = 0;
}
inline float Quaternion::_internal_w() const {
  return w_;
}
inline float Quaternion::w() const {
  // @@protoc_insertion_point(field_get:IronGames.Quaternion.w)
  return _internal_w();
}
inline void Quaternion::_internal_set_w(float value) {
  
  w_ = value;
}
inline void Quaternion::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:IronGames.Quaternion.w)
}

// float x = 2;
inline void Quaternion::clear_x() {
  x_ = 0;
}
inline float Quaternion::_internal_x() const {
  return x_;
}
inline float Quaternion::x() const {
  // @@protoc_insertion_point(field_get:IronGames.Quaternion.x)
  return _internal_x();
}
inline void Quaternion::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Quaternion::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:IronGames.Quaternion.x)
}

// float y = 3;
inline void Quaternion::clear_y() {
  y_ = 0;
}
inline float Quaternion::_internal_y() const {
  return y_;
}
inline float Quaternion::y() const {
  // @@protoc_insertion_point(field_get:IronGames.Quaternion.y)
  return _internal_y();
}
inline void Quaternion::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Quaternion::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:IronGames.Quaternion.y)
}

// float z = 4;
inline void Quaternion::clear_z() {
  z_ = 0;
}
inline float Quaternion::_internal_z() const {
  return z_;
}
inline float Quaternion::z() const {
  // @@protoc_insertion_point(field_get:IronGames.Quaternion.z)
  return _internal_z();
}
inline void Quaternion::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Quaternion::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:IronGames.Quaternion.z)
}

// -------------------------------------------------------------------

// Transform

// .IronGames.Vector3 position = 1;
inline bool Transform::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool Transform::has_position() const {
  return _internal_has_position();
}
inline void Transform::clear_position() {
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::IronGames::Vector3& Transform::_internal_position() const {
  const ::IronGames::Vector3* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::IronGames::Vector3&>(
      ::IronGames::_Vector3_default_instance_);
}
inline const ::IronGames::Vector3& Transform::position() const {
  // @@protoc_insertion_point(field_get:IronGames.Transform.position)
  return _internal_position();
}
inline void Transform::unsafe_arena_set_allocated_position(
    ::IronGames::Vector3* position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IronGames.Transform.position)
}
inline ::IronGames::Vector3* Transform::release_position() {
  
  ::IronGames::Vector3* temp = position_;
  position_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::IronGames::Vector3* Transform::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:IronGames.Transform.position)
  
  ::IronGames::Vector3* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::IronGames::Vector3* Transform::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::IronGames::Vector3>(GetArena());
    position_ = p;
  }
  return position_;
}
inline ::IronGames::Vector3* Transform::mutable_position() {
  // @@protoc_insertion_point(field_mutable:IronGames.Transform.position)
  return _internal_mutable_position();
}
inline void Transform::set_allocated_position(::IronGames::Vector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:IronGames.Transform.position)
}

// .IronGames.Quaternion rotation = 2;
inline bool Transform::_internal_has_rotation() const {
  return this != internal_default_instance() && rotation_ != nullptr;
}
inline bool Transform::has_rotation() const {
  return _internal_has_rotation();
}
inline void Transform::clear_rotation() {
  if (GetArena() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
}
inline const ::IronGames::Quaternion& Transform::_internal_rotation() const {
  const ::IronGames::Quaternion* p = rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::IronGames::Quaternion&>(
      ::IronGames::_Quaternion_default_instance_);
}
inline const ::IronGames::Quaternion& Transform::rotation() const {
  // @@protoc_insertion_point(field_get:IronGames.Transform.rotation)
  return _internal_rotation();
}
inline void Transform::unsafe_arena_set_allocated_rotation(
    ::IronGames::Quaternion* rotation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation_);
  }
  rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IronGames.Transform.rotation)
}
inline ::IronGames::Quaternion* Transform::release_rotation() {
  
  ::IronGames::Quaternion* temp = rotation_;
  rotation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::IronGames::Quaternion* Transform::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:IronGames.Transform.rotation)
  
  ::IronGames::Quaternion* temp = rotation_;
  rotation_ = nullptr;
  return temp;
}
inline ::IronGames::Quaternion* Transform::_internal_mutable_rotation() {
  
  if (rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::IronGames::Quaternion>(GetArena());
    rotation_ = p;
  }
  return rotation_;
}
inline ::IronGames::Quaternion* Transform::mutable_rotation() {
  // @@protoc_insertion_point(field_mutable:IronGames.Transform.rotation)
  return _internal_mutable_rotation();
}
inline void Transform::set_allocated_rotation(::IronGames::Quaternion* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rotation);
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:IronGames.Transform.rotation)
}

// -------------------------------------------------------------------

// Parameter

// int32 name = 1;
inline void Parameter::clear_name() {
  name_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Parameter::_internal_name() const {
  return name_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Parameter::name() const {
  // @@protoc_insertion_point(field_get:IronGames.Parameter.name)
  return _internal_name();
}
inline void Parameter::_internal_set_name(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  name_ = value;
}
inline void Parameter::set_name(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:IronGames.Parameter.name)
}

// float val_float = 2;
inline bool Parameter::_internal_has_val_float() const {
  return value_case() == kValFloat;
}
inline bool Parameter::has_val_float() const {
  return _internal_has_val_float();
}
inline void Parameter::set_has_val_float() {
  _oneof_case_[0] = kValFloat;
}
inline void Parameter::clear_val_float() {
  if (_internal_has_val_float()) {
    value_.val_float_ = 0;
    clear_has_value();
  }
}
inline float Parameter::_internal_val_float() const {
  if (_internal_has_val_float()) {
    return value_.val_float_;
  }
  return 0;
}
inline void Parameter::_internal_set_val_float(float value) {
  if (!_internal_has_val_float()) {
    clear_value();
    set_has_val_float();
  }
  value_.val_float_ = value;
}
inline float Parameter::val_float() const {
  // @@protoc_insertion_point(field_get:IronGames.Parameter.val_float)
  return _internal_val_float();
}
inline void Parameter::set_val_float(float value) {
  _internal_set_val_float(value);
  // @@protoc_insertion_point(field_set:IronGames.Parameter.val_float)
}

// int32 val_int = 3;
inline bool Parameter::_internal_has_val_int() const {
  return value_case() == kValInt;
}
inline bool Parameter::has_val_int() const {
  return _internal_has_val_int();
}
inline void Parameter::set_has_val_int() {
  _oneof_case_[0] = kValInt;
}
inline void Parameter::clear_val_int() {
  if (_internal_has_val_int()) {
    value_.val_int_ = 0;
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Parameter::_internal_val_int() const {
  if (_internal_has_val_int()) {
    return value_.val_int_;
  }
  return 0;
}
inline void Parameter::_internal_set_val_int(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_val_int()) {
    clear_value();
    set_has_val_int();
  }
  value_.val_int_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Parameter::val_int() const {
  // @@protoc_insertion_point(field_get:IronGames.Parameter.val_int)
  return _internal_val_int();
}
inline void Parameter::set_val_int(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_val_int(value);
  // @@protoc_insertion_point(field_set:IronGames.Parameter.val_int)
}

// string val_string = 4;
inline bool Parameter::_internal_has_val_string() const {
  return value_case() == kValString;
}
inline bool Parameter::has_val_string() const {
  return _internal_has_val_string();
}
inline void Parameter::set_has_val_string() {
  _oneof_case_[0] = kValString;
}
inline void Parameter::clear_val_string() {
  if (_internal_has_val_string()) {
    value_.val_string_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_value();
  }
}
inline const std::string& Parameter::val_string() const {
  // @@protoc_insertion_point(field_get:IronGames.Parameter.val_string)
  return _internal_val_string();
}
inline void Parameter::set_val_string(const std::string& value) {
  _internal_set_val_string(value);
  // @@protoc_insertion_point(field_set:IronGames.Parameter.val_string)
}
inline std::string* Parameter::mutable_val_string() {
  // @@protoc_insertion_point(field_mutable:IronGames.Parameter.val_string)
  return _internal_mutable_val_string();
}
inline const std::string& Parameter::_internal_val_string() const {
  if (_internal_has_val_string()) {
    return value_.val_string_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Parameter::_internal_set_val_string(const std::string& value) {
  if (!_internal_has_val_string()) {
    clear_value();
    set_has_val_string();
    value_.val_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.val_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Parameter::set_val_string(std::string&& value) {
  // @@protoc_insertion_point(field_set:IronGames.Parameter.val_string)
  if (!_internal_has_val_string()) {
    clear_value();
    set_has_val_string();
    value_.val_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.val_string_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IronGames.Parameter.val_string)
}
inline void Parameter::set_val_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_val_string()) {
    clear_value();
    set_has_val_string();
    value_.val_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.val_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:IronGames.Parameter.val_string)
}
inline void Parameter::set_val_string(const char* value,
                             size_t size) {
  if (!_internal_has_val_string()) {
    clear_value();
    set_has_val_string();
    value_.val_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.val_string_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:IronGames.Parameter.val_string)
}
inline std::string* Parameter::_internal_mutable_val_string() {
  if (!_internal_has_val_string()) {
    clear_value();
    set_has_val_string();
    value_.val_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_.val_string_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Parameter::release_val_string() {
  // @@protoc_insertion_point(field_release:IronGames.Parameter.val_string)
  if (_internal_has_val_string()) {
    clear_has_value();
    return value_.val_string_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Parameter::set_allocated_val_string(std::string* val_string) {
  if (has_value()) {
    clear_value();
  }
  if (val_string != nullptr) {
    set_has_val_string();
    value_.val_string_.UnsafeSetDefault(val_string);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(val_string);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:IronGames.Parameter.val_string)
}

// .IronGames.Vector3 val_vector3 = 5;
inline bool Parameter::_internal_has_val_vector3() const {
  return value_case() == kValVector3;
}
inline bool Parameter::has_val_vector3() const {
  return _internal_has_val_vector3();
}
inline void Parameter::set_has_val_vector3() {
  _oneof_case_[0] = kValVector3;
}
inline void Parameter::clear_val_vector3() {
  if (_internal_has_val_vector3()) {
    if (GetArena() == nullptr) {
      delete value_.val_vector3_;
    }
    clear_has_value();
  }
}
inline ::IronGames::Vector3* Parameter::release_val_vector3() {
  // @@protoc_insertion_point(field_release:IronGames.Parameter.val_vector3)
  if (_internal_has_val_vector3()) {
    clear_has_value();
      ::IronGames::Vector3* temp = value_.val_vector3_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.val_vector3_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::IronGames::Vector3& Parameter::_internal_val_vector3() const {
  return _internal_has_val_vector3()
      ? *value_.val_vector3_
      : reinterpret_cast< ::IronGames::Vector3&>(::IronGames::_Vector3_default_instance_);
}
inline const ::IronGames::Vector3& Parameter::val_vector3() const {
  // @@protoc_insertion_point(field_get:IronGames.Parameter.val_vector3)
  return _internal_val_vector3();
}
inline ::IronGames::Vector3* Parameter::unsafe_arena_release_val_vector3() {
  // @@protoc_insertion_point(field_unsafe_arena_release:IronGames.Parameter.val_vector3)
  if (_internal_has_val_vector3()) {
    clear_has_value();
    ::IronGames::Vector3* temp = value_.val_vector3_;
    value_.val_vector3_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Parameter::unsafe_arena_set_allocated_val_vector3(::IronGames::Vector3* val_vector3) {
  clear_value();
  if (val_vector3) {
    set_has_val_vector3();
    value_.val_vector3_ = val_vector3;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IronGames.Parameter.val_vector3)
}
inline ::IronGames::Vector3* Parameter::_internal_mutable_val_vector3() {
  if (!_internal_has_val_vector3()) {
    clear_value();
    set_has_val_vector3();
    value_.val_vector3_ = CreateMaybeMessage< ::IronGames::Vector3 >(GetArena());
  }
  return value_.val_vector3_;
}
inline ::IronGames::Vector3* Parameter::mutable_val_vector3() {
  // @@protoc_insertion_point(field_mutable:IronGames.Parameter.val_vector3)
  return _internal_mutable_val_vector3();
}

// .IronGames.Color color = 6;
inline bool Parameter::_internal_has_color() const {
  return value_case() == kColor;
}
inline bool Parameter::has_color() const {
  return _internal_has_color();
}
inline void Parameter::set_has_color() {
  _oneof_case_[0] = kColor;
}
inline void Parameter::clear_color() {
  if (_internal_has_color()) {
    if (GetArena() == nullptr) {
      delete value_.color_;
    }
    clear_has_value();
  }
}
inline ::IronGames::Color* Parameter::release_color() {
  // @@protoc_insertion_point(field_release:IronGames.Parameter.color)
  if (_internal_has_color()) {
    clear_has_value();
      ::IronGames::Color* temp = value_.color_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.color_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::IronGames::Color& Parameter::_internal_color() const {
  return _internal_has_color()
      ? *value_.color_
      : reinterpret_cast< ::IronGames::Color&>(::IronGames::_Color_default_instance_);
}
inline const ::IronGames::Color& Parameter::color() const {
  // @@protoc_insertion_point(field_get:IronGames.Parameter.color)
  return _internal_color();
}
inline ::IronGames::Color* Parameter::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_unsafe_arena_release:IronGames.Parameter.color)
  if (_internal_has_color()) {
    clear_has_value();
    ::IronGames::Color* temp = value_.color_;
    value_.color_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Parameter::unsafe_arena_set_allocated_color(::IronGames::Color* color) {
  clear_value();
  if (color) {
    set_has_color();
    value_.color_ = color;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IronGames.Parameter.color)
}
inline ::IronGames::Color* Parameter::_internal_mutable_color() {
  if (!_internal_has_color()) {
    clear_value();
    set_has_color();
    value_.color_ = CreateMaybeMessage< ::IronGames::Color >(GetArena());
  }
  return value_.color_;
}
inline ::IronGames::Color* Parameter::mutable_color() {
  // @@protoc_insertion_point(field_mutable:IronGames.Parameter.color)
  return _internal_mutable_color();
}

inline bool Parameter::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Parameter::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline Parameter::ValueCase Parameter::value_case() const {
  return Parameter::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Player

// string name = 1;
inline void Player::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Player::name() const {
  // @@protoc_insertion_point(field_get:IronGames.Player.name)
  return _internal_name();
}
inline void Player::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:IronGames.Player.name)
}
inline std::string* Player::mutable_name() {
  // @@protoc_insertion_point(field_mutable:IronGames.Player.name)
  return _internal_mutable_name();
}
inline const std::string& Player::_internal_name() const {
  return name_.Get();
}
inline void Player::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Player::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IronGames.Player.name)
}
inline void Player::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:IronGames.Player.name)
}
inline void Player::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IronGames.Player.name)
}
inline std::string* Player::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Player::release_name() {
  // @@protoc_insertion_point(field_release:IronGames.Player.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Player::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IronGames.Player.name)
}

// .IronGames.Color color = 2;
inline bool Player::_internal_has_color() const {
  return this != internal_default_instance() && color_ != nullptr;
}
inline bool Player::has_color() const {
  return _internal_has_color();
}
inline void Player::clear_color() {
  if (GetArena() == nullptr && color_ != nullptr) {
    delete color_;
  }
  color_ = nullptr;
}
inline const ::IronGames::Color& Player::_internal_color() const {
  const ::IronGames::Color* p = color_;
  return p != nullptr ? *p : reinterpret_cast<const ::IronGames::Color&>(
      ::IronGames::_Color_default_instance_);
}
inline const ::IronGames::Color& Player::color() const {
  // @@protoc_insertion_point(field_get:IronGames.Player.color)
  return _internal_color();
}
inline void Player::unsafe_arena_set_allocated_color(
    ::IronGames::Color* color) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_);
  }
  color_ = color;
  if (color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IronGames.Player.color)
}
inline ::IronGames::Color* Player::release_color() {
  
  ::IronGames::Color* temp = color_;
  color_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::IronGames::Color* Player::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_release:IronGames.Player.color)
  
  ::IronGames::Color* temp = color_;
  color_ = nullptr;
  return temp;
}
inline ::IronGames::Color* Player::_internal_mutable_color() {
  
  if (color_ == nullptr) {
    auto* p = CreateMaybeMessage<::IronGames::Color>(GetArena());
    color_ = p;
  }
  return color_;
}
inline ::IronGames::Color* Player::mutable_color() {
  // @@protoc_insertion_point(field_mutable:IronGames.Player.color)
  return _internal_mutable_color();
}
inline void Player::set_allocated_color(::IronGames::Color* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete color_;
  }
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(color);
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    
  } else {
    
  }
  color_ = color;
  // @@protoc_insertion_point(field_set_allocated:IronGames.Player.color)
}

// int32 id = 3;
inline void Player::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::id() const {
  // @@protoc_insertion_point(field_get:IronGames.Player.id)
  return _internal_id();
}
inline void Player::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Player::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:IronGames.Player.id)
}

// int32 row = 4;
inline void Player::clear_row() {
  row_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::_internal_row() const {
  return row_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::row() const {
  // @@protoc_insertion_point(field_get:IronGames.Player.row)
  return _internal_row();
}
inline void Player::_internal_set_row(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  row_ = value;
}
inline void Player::set_row(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_row(value);
  // @@protoc_insertion_point(field_set:IronGames.Player.row)
}

// int32 col = 5;
inline void Player::clear_col() {
  col_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::_internal_col() const {
  return col_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::col() const {
  // @@protoc_insertion_point(field_get:IronGames.Player.col)
  return _internal_col();
}
inline void Player::_internal_set_col(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  col_ = value;
}
inline void Player::set_col(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_col(value);
  // @@protoc_insertion_point(field_set:IronGames.Player.col)
}

// float rotation = 6;
inline void Player::clear_rotation() {
  rotation_ = 0;
}
inline float Player::_internal_rotation() const {
  return rotation_;
}
inline float Player::rotation() const {
  // @@protoc_insertion_point(field_get:IronGames.Player.rotation)
  return _internal_rotation();
}
inline void Player::_internal_set_rotation(float value) {
  
  rotation_ = value;
}
inline void Player::set_rotation(float value) {
  _internal_set_rotation(value);
  // @@protoc_insertion_point(field_set:IronGames.Player.rotation)
}

// int32 team_id = 7;
inline void Player::clear_team_id() {
  team_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::_internal_team_id() const {
  return team_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Player::team_id() const {
  // @@protoc_insertion_point(field_get:IronGames.Player.team_id)
  return _internal_team_id();
}
inline void Player::_internal_set_team_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  team_id_ = value;
}
inline void Player::set_team_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_team_id(value);
  // @@protoc_insertion_point(field_set:IronGames.Player.team_id)
}

// bool is_host = 8;
inline void Player::clear_is_host() {
  is_host_ = false;
}
inline bool Player::_internal_is_host() const {
  return is_host_;
}
inline bool Player::is_host() const {
  // @@protoc_insertion_point(field_get:IronGames.Player.is_host)
  return _internal_is_host();
}
inline void Player::_internal_set_is_host(bool value) {
  
  is_host_ = value;
}
inline void Player::set_is_host(bool value) {
  _internal_set_is_host(value);
  // @@protoc_insertion_point(field_set:IronGames.Player.is_host)
}

// -------------------------------------------------------------------

// Actor

// int32 unit_id = 1;
inline void Actor::clear_unit_id() {
  unit_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Actor::_internal_unit_id() const {
  return unit_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Actor::unit_id() const {
  // @@protoc_insertion_point(field_get:IronGames.Actor.unit_id)
  return _internal_unit_id();
}
inline void Actor::_internal_set_unit_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  unit_id_ = value;
}
inline void Actor::set_unit_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_unit_id(value);
  // @@protoc_insertion_point(field_set:IronGames.Actor.unit_id)
}

// int32 type_id = 2;
inline void Actor::clear_type_id() {
  type_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Actor::_internal_type_id() const {
  return type_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Actor::type_id() const {
  // @@protoc_insertion_point(field_get:IronGames.Actor.type_id)
  return _internal_type_id();
}
inline void Actor::_internal_set_type_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_id_ = value;
}
inline void Actor::set_type_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type_id(value);
  // @@protoc_insertion_point(field_set:IronGames.Actor.type_id)
}

// int32 owner_id = 3;
inline void Actor::clear_owner_id() {
  owner_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Actor::_internal_owner_id() const {
  return owner_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Actor::owner_id() const {
  // @@protoc_insertion_point(field_get:IronGames.Actor.owner_id)
  return _internal_owner_id();
}
inline void Actor::_internal_set_owner_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  owner_id_ = value;
}
inline void Actor::set_owner_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_owner_id(value);
  // @@protoc_insertion_point(field_set:IronGames.Actor.owner_id)
}

// .IronGames.Transform transform = 4;
inline bool Actor::_internal_has_transform() const {
  return this != internal_default_instance() && transform_ != nullptr;
}
inline bool Actor::has_transform() const {
  return _internal_has_transform();
}
inline void Actor::clear_transform() {
  if (GetArena() == nullptr && transform_ != nullptr) {
    delete transform_;
  }
  transform_ = nullptr;
}
inline const ::IronGames::Transform& Actor::_internal_transform() const {
  const ::IronGames::Transform* p = transform_;
  return p != nullptr ? *p : reinterpret_cast<const ::IronGames::Transform&>(
      ::IronGames::_Transform_default_instance_);
}
inline const ::IronGames::Transform& Actor::transform() const {
  // @@protoc_insertion_point(field_get:IronGames.Actor.transform)
  return _internal_transform();
}
inline void Actor::unsafe_arena_set_allocated_transform(
    ::IronGames::Transform* transform) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform_);
  }
  transform_ = transform;
  if (transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IronGames.Actor.transform)
}
inline ::IronGames::Transform* Actor::release_transform() {
  
  ::IronGames::Transform* temp = transform_;
  transform_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::IronGames::Transform* Actor::unsafe_arena_release_transform() {
  // @@protoc_insertion_point(field_release:IronGames.Actor.transform)
  
  ::IronGames::Transform* temp = transform_;
  transform_ = nullptr;
  return temp;
}
inline ::IronGames::Transform* Actor::_internal_mutable_transform() {
  
  if (transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::IronGames::Transform>(GetArena());
    transform_ = p;
  }
  return transform_;
}
inline ::IronGames::Transform* Actor::mutable_transform() {
  // @@protoc_insertion_point(field_mutable:IronGames.Actor.transform)
  return _internal_mutable_transform();
}
inline void Actor::set_allocated_transform(::IronGames::Transform* transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete transform_;
  }
  if (transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(transform);
    if (message_arena != submessage_arena) {
      transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform, submessage_arena);
    }
    
  } else {
    
  }
  transform_ = transform;
  // @@protoc_insertion_point(field_set_allocated:IronGames.Actor.transform)
}

// repeated .IronGames.Parameter parameters = 5;
inline int Actor::_internal_parameters_size() const {
  return parameters_.size();
}
inline int Actor::parameters_size() const {
  return _internal_parameters_size();
}
inline void Actor::clear_parameters() {
  parameters_.Clear();
}
inline ::IronGames::Parameter* Actor::mutable_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:IronGames.Actor.parameters)
  return parameters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::Parameter >*
Actor::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_list:IronGames.Actor.parameters)
  return &parameters_;
}
inline const ::IronGames::Parameter& Actor::_internal_parameters(int index) const {
  return parameters_.Get(index);
}
inline const ::IronGames::Parameter& Actor::parameters(int index) const {
  // @@protoc_insertion_point(field_get:IronGames.Actor.parameters)
  return _internal_parameters(index);
}
inline ::IronGames::Parameter* Actor::_internal_add_parameters() {
  return parameters_.Add();
}
inline ::IronGames::Parameter* Actor::add_parameters() {
  // @@protoc_insertion_point(field_add:IronGames.Actor.parameters)
  return _internal_add_parameters();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::Parameter >&
Actor::parameters() const {
  // @@protoc_insertion_point(field_list:IronGames.Actor.parameters)
  return parameters_;
}

// -------------------------------------------------------------------

// Tile

// int32 terrain_id = 1;
inline void Tile::clear_terrain_id() {
  terrain_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Tile::_internal_terrain_id() const {
  return terrain_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Tile::terrain_id() const {
  // @@protoc_insertion_point(field_get:IronGames.Tile.terrain_id)
  return _internal_terrain_id();
}
inline void Tile::_internal_set_terrain_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  terrain_id_ = value;
}
inline void Tile::set_terrain_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_terrain_id(value);
  // @@protoc_insertion_point(field_set:IronGames.Tile.terrain_id)
}

// repeated .IronGames.Actor actors = 2;
inline int Tile::_internal_actors_size() const {
  return actors_.size();
}
inline int Tile::actors_size() const {
  return _internal_actors_size();
}
inline void Tile::clear_actors() {
  actors_.Clear();
}
inline ::IronGames::Actor* Tile::mutable_actors(int index) {
  // @@protoc_insertion_point(field_mutable:IronGames.Tile.actors)
  return actors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::Actor >*
Tile::mutable_actors() {
  // @@protoc_insertion_point(field_mutable_list:IronGames.Tile.actors)
  return &actors_;
}
inline const ::IronGames::Actor& Tile::_internal_actors(int index) const {
  return actors_.Get(index);
}
inline const ::IronGames::Actor& Tile::actors(int index) const {
  // @@protoc_insertion_point(field_get:IronGames.Tile.actors)
  return _internal_actors(index);
}
inline ::IronGames::Actor* Tile::_internal_add_actors() {
  return actors_.Add();
}
inline ::IronGames::Actor* Tile::add_actors() {
  // @@protoc_insertion_point(field_add:IronGames.Tile.actors)
  return _internal_add_actors();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::Actor >&
Tile::actors() const {
  // @@protoc_insertion_point(field_list:IronGames.Tile.actors)
  return actors_;
}

// .IronGames.PlayerAssets player_assets = 3;
inline bool Tile::_internal_has_player_assets() const {
  return this != internal_default_instance() && player_assets_ != nullptr;
}
inline bool Tile::has_player_assets() const {
  return _internal_has_player_assets();
}
inline void Tile::clear_player_assets() {
  if (GetArena() == nullptr && player_assets_ != nullptr) {
    delete player_assets_;
  }
  player_assets_ = nullptr;
}
inline const ::IronGames::PlayerAssets& Tile::_internal_player_assets() const {
  const ::IronGames::PlayerAssets* p = player_assets_;
  return p != nullptr ? *p : reinterpret_cast<const ::IronGames::PlayerAssets&>(
      ::IronGames::_PlayerAssets_default_instance_);
}
inline const ::IronGames::PlayerAssets& Tile::player_assets() const {
  // @@protoc_insertion_point(field_get:IronGames.Tile.player_assets)
  return _internal_player_assets();
}
inline void Tile::unsafe_arena_set_allocated_player_assets(
    ::IronGames::PlayerAssets* player_assets) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_assets_);
  }
  player_assets_ = player_assets;
  if (player_assets) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IronGames.Tile.player_assets)
}
inline ::IronGames::PlayerAssets* Tile::release_player_assets() {
  
  ::IronGames::PlayerAssets* temp = player_assets_;
  player_assets_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::IronGames::PlayerAssets* Tile::unsafe_arena_release_player_assets() {
  // @@protoc_insertion_point(field_release:IronGames.Tile.player_assets)
  
  ::IronGames::PlayerAssets* temp = player_assets_;
  player_assets_ = nullptr;
  return temp;
}
inline ::IronGames::PlayerAssets* Tile::_internal_mutable_player_assets() {
  
  if (player_assets_ == nullptr) {
    auto* p = CreateMaybeMessage<::IronGames::PlayerAssets>(GetArena());
    player_assets_ = p;
  }
  return player_assets_;
}
inline ::IronGames::PlayerAssets* Tile::mutable_player_assets() {
  // @@protoc_insertion_point(field_mutable:IronGames.Tile.player_assets)
  return _internal_mutable_player_assets();
}
inline void Tile::set_allocated_player_assets(::IronGames::PlayerAssets* player_assets) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete player_assets_;
  }
  if (player_assets) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(player_assets);
    if (message_arena != submessage_arena) {
      player_assets = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_assets, submessage_arena);
    }
    
  } else {
    
  }
  player_assets_ = player_assets;
  // @@protoc_insertion_point(field_set_allocated:IronGames.Tile.player_assets)
}

// -------------------------------------------------------------------

// SimulationVertex

// .IronGames.Vector3 position = 1;
inline bool SimulationVertex::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool SimulationVertex::has_position() const {
  return _internal_has_position();
}
inline void SimulationVertex::clear_position() {
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::IronGames::Vector3& SimulationVertex::_internal_position() const {
  const ::IronGames::Vector3* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::IronGames::Vector3&>(
      ::IronGames::_Vector3_default_instance_);
}
inline const ::IronGames::Vector3& SimulationVertex::position() const {
  // @@protoc_insertion_point(field_get:IronGames.SimulationVertex.position)
  return _internal_position();
}
inline void SimulationVertex::unsafe_arena_set_allocated_position(
    ::IronGames::Vector3* position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IronGames.SimulationVertex.position)
}
inline ::IronGames::Vector3* SimulationVertex::release_position() {
  
  ::IronGames::Vector3* temp = position_;
  position_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::IronGames::Vector3* SimulationVertex::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:IronGames.SimulationVertex.position)
  
  ::IronGames::Vector3* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::IronGames::Vector3* SimulationVertex::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::IronGames::Vector3>(GetArena());
    position_ = p;
  }
  return position_;
}
inline ::IronGames::Vector3* SimulationVertex::mutable_position() {
  // @@protoc_insertion_point(field_mutable:IronGames.SimulationVertex.position)
  return _internal_mutable_position();
}
inline void SimulationVertex::set_allocated_position(::IronGames::Vector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:IronGames.SimulationVertex.position)
}

// .IronGames.Vector3 material_coordinates = 2;
inline bool SimulationVertex::_internal_has_material_coordinates() const {
  return this != internal_default_instance() && material_coordinates_ != nullptr;
}
inline bool SimulationVertex::has_material_coordinates() const {
  return _internal_has_material_coordinates();
}
inline void SimulationVertex::clear_material_coordinates() {
  if (GetArena() == nullptr && material_coordinates_ != nullptr) {
    delete material_coordinates_;
  }
  material_coordinates_ = nullptr;
}
inline const ::IronGames::Vector3& SimulationVertex::_internal_material_coordinates() const {
  const ::IronGames::Vector3* p = material_coordinates_;
  return p != nullptr ? *p : reinterpret_cast<const ::IronGames::Vector3&>(
      ::IronGames::_Vector3_default_instance_);
}
inline const ::IronGames::Vector3& SimulationVertex::material_coordinates() const {
  // @@protoc_insertion_point(field_get:IronGames.SimulationVertex.material_coordinates)
  return _internal_material_coordinates();
}
inline void SimulationVertex::unsafe_arena_set_allocated_material_coordinates(
    ::IronGames::Vector3* material_coordinates) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(material_coordinates_);
  }
  material_coordinates_ = material_coordinates;
  if (material_coordinates) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IronGames.SimulationVertex.material_coordinates)
}
inline ::IronGames::Vector3* SimulationVertex::release_material_coordinates() {
  
  ::IronGames::Vector3* temp = material_coordinates_;
  material_coordinates_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::IronGames::Vector3* SimulationVertex::unsafe_arena_release_material_coordinates() {
  // @@protoc_insertion_point(field_release:IronGames.SimulationVertex.material_coordinates)
  
  ::IronGames::Vector3* temp = material_coordinates_;
  material_coordinates_ = nullptr;
  return temp;
}
inline ::IronGames::Vector3* SimulationVertex::_internal_mutable_material_coordinates() {
  
  if (material_coordinates_ == nullptr) {
    auto* p = CreateMaybeMessage<::IronGames::Vector3>(GetArena());
    material_coordinates_ = p;
  }
  return material_coordinates_;
}
inline ::IronGames::Vector3* SimulationVertex::mutable_material_coordinates() {
  // @@protoc_insertion_point(field_mutable:IronGames.SimulationVertex.material_coordinates)
  return _internal_mutable_material_coordinates();
}
inline void SimulationVertex::set_allocated_material_coordinates(::IronGames::Vector3* material_coordinates) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete material_coordinates_;
  }
  if (material_coordinates) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(material_coordinates);
    if (message_arena != submessage_arena) {
      material_coordinates = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, material_coordinates, submessage_arena);
    }
    
  } else {
    
  }
  material_coordinates_ = material_coordinates;
  // @@protoc_insertion_point(field_set_allocated:IronGames.SimulationVertex.material_coordinates)
}

// .IronGames.Vector3 velocity = 3;
inline bool SimulationVertex::_internal_has_velocity() const {
  return this != internal_default_instance() && velocity_ != nullptr;
}
inline bool SimulationVertex::has_velocity() const {
  return _internal_has_velocity();
}
inline void SimulationVertex::clear_velocity() {
  if (GetArena() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
}
inline const ::IronGames::Vector3& SimulationVertex::_internal_velocity() const {
  const ::IronGames::Vector3* p = velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::IronGames::Vector3&>(
      ::IronGames::_Vector3_default_instance_);
}
inline const ::IronGames::Vector3& SimulationVertex::velocity() const {
  // @@protoc_insertion_point(field_get:IronGames.SimulationVertex.velocity)
  return _internal_velocity();
}
inline void SimulationVertex::unsafe_arena_set_allocated_velocity(
    ::IronGames::Vector3* velocity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_);
  }
  velocity_ = velocity;
  if (velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IronGames.SimulationVertex.velocity)
}
inline ::IronGames::Vector3* SimulationVertex::release_velocity() {
  
  ::IronGames::Vector3* temp = velocity_;
  velocity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::IronGames::Vector3* SimulationVertex::unsafe_arena_release_velocity() {
  // @@protoc_insertion_point(field_release:IronGames.SimulationVertex.velocity)
  
  ::IronGames::Vector3* temp = velocity_;
  velocity_ = nullptr;
  return temp;
}
inline ::IronGames::Vector3* SimulationVertex::_internal_mutable_velocity() {
  
  if (velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::IronGames::Vector3>(GetArena());
    velocity_ = p;
  }
  return velocity_;
}
inline ::IronGames::Vector3* SimulationVertex::mutable_velocity() {
  // @@protoc_insertion_point(field_mutable:IronGames.SimulationVertex.velocity)
  return _internal_mutable_velocity();
}
inline void SimulationVertex::set_allocated_velocity(::IronGames::Vector3* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete velocity_;
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(velocity);
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:IronGames.SimulationVertex.velocity)
}

// float mass = 4;
inline void SimulationVertex::clear_mass() {
  mass_ = 0;
}
inline float SimulationVertex::_internal_mass() const {
  return mass_;
}
inline float SimulationVertex::mass() const {
  // @@protoc_insertion_point(field_get:IronGames.SimulationVertex.mass)
  return _internal_mass();
}
inline void SimulationVertex::_internal_set_mass(float value) {
  
  mass_ = value;
}
inline void SimulationVertex::set_mass(float value) {
  _internal_set_mass(value);
  // @@protoc_insertion_point(field_set:IronGames.SimulationVertex.mass)
}

// .IronGames.Vector3 force = 5;
inline bool SimulationVertex::_internal_has_force() const {
  return this != internal_default_instance() && force_ != nullptr;
}
inline bool SimulationVertex::has_force() const {
  return _internal_has_force();
}
inline void SimulationVertex::clear_force() {
  if (GetArena() == nullptr && force_ != nullptr) {
    delete force_;
  }
  force_ = nullptr;
}
inline const ::IronGames::Vector3& SimulationVertex::_internal_force() const {
  const ::IronGames::Vector3* p = force_;
  return p != nullptr ? *p : reinterpret_cast<const ::IronGames::Vector3&>(
      ::IronGames::_Vector3_default_instance_);
}
inline const ::IronGames::Vector3& SimulationVertex::force() const {
  // @@protoc_insertion_point(field_get:IronGames.SimulationVertex.force)
  return _internal_force();
}
inline void SimulationVertex::unsafe_arena_set_allocated_force(
    ::IronGames::Vector3* force) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(force_);
  }
  force_ = force;
  if (force) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IronGames.SimulationVertex.force)
}
inline ::IronGames::Vector3* SimulationVertex::release_force() {
  
  ::IronGames::Vector3* temp = force_;
  force_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::IronGames::Vector3* SimulationVertex::unsafe_arena_release_force() {
  // @@protoc_insertion_point(field_release:IronGames.SimulationVertex.force)
  
  ::IronGames::Vector3* temp = force_;
  force_ = nullptr;
  return temp;
}
inline ::IronGames::Vector3* SimulationVertex::_internal_mutable_force() {
  
  if (force_ == nullptr) {
    auto* p = CreateMaybeMessage<::IronGames::Vector3>(GetArena());
    force_ = p;
  }
  return force_;
}
inline ::IronGames::Vector3* SimulationVertex::mutable_force() {
  // @@protoc_insertion_point(field_mutable:IronGames.SimulationVertex.force)
  return _internal_mutable_force();
}
inline void SimulationVertex::set_allocated_force(::IronGames::Vector3* force) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete force_;
  }
  if (force) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(force);
    if (message_arena != submessage_arena) {
      force = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, force, submessage_arena);
    }
    
  } else {
    
  }
  force_ = force;
  // @@protoc_insertion_point(field_set_allocated:IronGames.SimulationVertex.force)
}

// float largest_eigenvalue = 6;
inline void SimulationVertex::clear_largest_eigenvalue() {
  largest_eigenvalue_ = 0;
}
inline float SimulationVertex::_internal_largest_eigenvalue() const {
  return largest_eigenvalue_;
}
inline float SimulationVertex::largest_eigenvalue() const {
  // @@protoc_insertion_point(field_get:IronGames.SimulationVertex.largest_eigenvalue)
  return _internal_largest_eigenvalue();
}
inline void SimulationVertex::_internal_set_largest_eigenvalue(float value) {
  
  largest_eigenvalue_ = value;
}
inline void SimulationVertex::set_largest_eigenvalue(float value) {
  _internal_set_largest_eigenvalue(value);
  // @@protoc_insertion_point(field_set:IronGames.SimulationVertex.largest_eigenvalue)
}

// .IronGames.Vector3 principal_eigenvector = 7;
inline bool SimulationVertex::_internal_has_principal_eigenvector() const {
  return this != internal_default_instance() && principal_eigenvector_ != nullptr;
}
inline bool SimulationVertex::has_principal_eigenvector() const {
  return _internal_has_principal_eigenvector();
}
inline void SimulationVertex::clear_principal_eigenvector() {
  if (GetArena() == nullptr && principal_eigenvector_ != nullptr) {
    delete principal_eigenvector_;
  }
  principal_eigenvector_ = nullptr;
}
inline const ::IronGames::Vector3& SimulationVertex::_internal_principal_eigenvector() const {
  const ::IronGames::Vector3* p = principal_eigenvector_;
  return p != nullptr ? *p : reinterpret_cast<const ::IronGames::Vector3&>(
      ::IronGames::_Vector3_default_instance_);
}
inline const ::IronGames::Vector3& SimulationVertex::principal_eigenvector() const {
  // @@protoc_insertion_point(field_get:IronGames.SimulationVertex.principal_eigenvector)
  return _internal_principal_eigenvector();
}
inline void SimulationVertex::unsafe_arena_set_allocated_principal_eigenvector(
    ::IronGames::Vector3* principal_eigenvector) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(principal_eigenvector_);
  }
  principal_eigenvector_ = principal_eigenvector;
  if (principal_eigenvector) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IronGames.SimulationVertex.principal_eigenvector)
}
inline ::IronGames::Vector3* SimulationVertex::release_principal_eigenvector() {
  
  ::IronGames::Vector3* temp = principal_eigenvector_;
  principal_eigenvector_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::IronGames::Vector3* SimulationVertex::unsafe_arena_release_principal_eigenvector() {
  // @@protoc_insertion_point(field_release:IronGames.SimulationVertex.principal_eigenvector)
  
  ::IronGames::Vector3* temp = principal_eigenvector_;
  principal_eigenvector_ = nullptr;
  return temp;
}
inline ::IronGames::Vector3* SimulationVertex::_internal_mutable_principal_eigenvector() {
  
  if (principal_eigenvector_ == nullptr) {
    auto* p = CreateMaybeMessage<::IronGames::Vector3>(GetArena());
    principal_eigenvector_ = p;
  }
  return principal_eigenvector_;
}
inline ::IronGames::Vector3* SimulationVertex::mutable_principal_eigenvector() {
  // @@protoc_insertion_point(field_mutable:IronGames.SimulationVertex.principal_eigenvector)
  return _internal_mutable_principal_eigenvector();
}
inline void SimulationVertex::set_allocated_principal_eigenvector(::IronGames::Vector3* principal_eigenvector) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete principal_eigenvector_;
  }
  if (principal_eigenvector) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(principal_eigenvector);
    if (message_arena != submessage_arena) {
      principal_eigenvector = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, principal_eigenvector, submessage_arena);
    }
    
  } else {
    
  }
  principal_eigenvector_ = principal_eigenvector;
  // @@protoc_insertion_point(field_set_allocated:IronGames.SimulationVertex.principal_eigenvector)
}

// repeated .IronGames.Vector3 compressive_forces = 8;
inline int SimulationVertex::_internal_compressive_forces_size() const {
  return compressive_forces_.size();
}
inline int SimulationVertex::compressive_forces_size() const {
  return _internal_compressive_forces_size();
}
inline void SimulationVertex::clear_compressive_forces() {
  compressive_forces_.Clear();
}
inline ::IronGames::Vector3* SimulationVertex::mutable_compressive_forces(int index) {
  // @@protoc_insertion_point(field_mutable:IronGames.SimulationVertex.compressive_forces)
  return compressive_forces_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::Vector3 >*
SimulationVertex::mutable_compressive_forces() {
  // @@protoc_insertion_point(field_mutable_list:IronGames.SimulationVertex.compressive_forces)
  return &compressive_forces_;
}
inline const ::IronGames::Vector3& SimulationVertex::_internal_compressive_forces(int index) const {
  return compressive_forces_.Get(index);
}
inline const ::IronGames::Vector3& SimulationVertex::compressive_forces(int index) const {
  // @@protoc_insertion_point(field_get:IronGames.SimulationVertex.compressive_forces)
  return _internal_compressive_forces(index);
}
inline ::IronGames::Vector3* SimulationVertex::_internal_add_compressive_forces() {
  return compressive_forces_.Add();
}
inline ::IronGames::Vector3* SimulationVertex::add_compressive_forces() {
  // @@protoc_insertion_point(field_add:IronGames.SimulationVertex.compressive_forces)
  return _internal_add_compressive_forces();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::Vector3 >&
SimulationVertex::compressive_forces() const {
  // @@protoc_insertion_point(field_list:IronGames.SimulationVertex.compressive_forces)
  return compressive_forces_;
}

// repeated .IronGames.Vector3 tensile_forces = 9;
inline int SimulationVertex::_internal_tensile_forces_size() const {
  return tensile_forces_.size();
}
inline int SimulationVertex::tensile_forces_size() const {
  return _internal_tensile_forces_size();
}
inline void SimulationVertex::clear_tensile_forces() {
  tensile_forces_.Clear();
}
inline ::IronGames::Vector3* SimulationVertex::mutable_tensile_forces(int index) {
  // @@protoc_insertion_point(field_mutable:IronGames.SimulationVertex.tensile_forces)
  return tensile_forces_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::Vector3 >*
SimulationVertex::mutable_tensile_forces() {
  // @@protoc_insertion_point(field_mutable_list:IronGames.SimulationVertex.tensile_forces)
  return &tensile_forces_;
}
inline const ::IronGames::Vector3& SimulationVertex::_internal_tensile_forces(int index) const {
  return tensile_forces_.Get(index);
}
inline const ::IronGames::Vector3& SimulationVertex::tensile_forces(int index) const {
  // @@protoc_insertion_point(field_get:IronGames.SimulationVertex.tensile_forces)
  return _internal_tensile_forces(index);
}
inline ::IronGames::Vector3* SimulationVertex::_internal_add_tensile_forces() {
  return tensile_forces_.Add();
}
inline ::IronGames::Vector3* SimulationVertex::add_tensile_forces() {
  // @@protoc_insertion_point(field_add:IronGames.SimulationVertex.tensile_forces)
  return _internal_add_tensile_forces();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::Vector3 >&
SimulationVertex::tensile_forces() const {
  // @@protoc_insertion_point(field_list:IronGames.SimulationVertex.tensile_forces)
  return tensile_forces_;
}

// repeated .IronGames.Vector3 collision_forces = 10;
inline int SimulationVertex::_internal_collision_forces_size() const {
  return collision_forces_.size();
}
inline int SimulationVertex::collision_forces_size() const {
  return _internal_collision_forces_size();
}
inline void SimulationVertex::clear_collision_forces() {
  collision_forces_.Clear();
}
inline ::IronGames::Vector3* SimulationVertex::mutable_collision_forces(int index) {
  // @@protoc_insertion_point(field_mutable:IronGames.SimulationVertex.collision_forces)
  return collision_forces_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::Vector3 >*
SimulationVertex::mutable_collision_forces() {
  // @@protoc_insertion_point(field_mutable_list:IronGames.SimulationVertex.collision_forces)
  return &collision_forces_;
}
inline const ::IronGames::Vector3& SimulationVertex::_internal_collision_forces(int index) const {
  return collision_forces_.Get(index);
}
inline const ::IronGames::Vector3& SimulationVertex::collision_forces(int index) const {
  // @@protoc_insertion_point(field_get:IronGames.SimulationVertex.collision_forces)
  return _internal_collision_forces(index);
}
inline ::IronGames::Vector3* SimulationVertex::_internal_add_collision_forces() {
  return collision_forces_.Add();
}
inline ::IronGames::Vector3* SimulationVertex::add_collision_forces() {
  // @@protoc_insertion_point(field_add:IronGames.SimulationVertex.collision_forces)
  return _internal_add_collision_forces();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::Vector3 >&
SimulationVertex::collision_forces() const {
  // @@protoc_insertion_point(field_list:IronGames.SimulationVertex.collision_forces)
  return collision_forces_;
}

// .IronGames.Matrix3 separation_tensor = 11;
inline bool SimulationVertex::_internal_has_separation_tensor() const {
  return this != internal_default_instance() && separation_tensor_ != nullptr;
}
inline bool SimulationVertex::has_separation_tensor() const {
  return _internal_has_separation_tensor();
}
inline void SimulationVertex::clear_separation_tensor() {
  if (GetArena() == nullptr && separation_tensor_ != nullptr) {
    delete separation_tensor_;
  }
  separation_tensor_ = nullptr;
}
inline const ::IronGames::Matrix3& SimulationVertex::_internal_separation_tensor() const {
  const ::IronGames::Matrix3* p = separation_tensor_;
  return p != nullptr ? *p : reinterpret_cast<const ::IronGames::Matrix3&>(
      ::IronGames::_Matrix3_default_instance_);
}
inline const ::IronGames::Matrix3& SimulationVertex::separation_tensor() const {
  // @@protoc_insertion_point(field_get:IronGames.SimulationVertex.separation_tensor)
  return _internal_separation_tensor();
}
inline void SimulationVertex::unsafe_arena_set_allocated_separation_tensor(
    ::IronGames::Matrix3* separation_tensor) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(separation_tensor_);
  }
  separation_tensor_ = separation_tensor;
  if (separation_tensor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IronGames.SimulationVertex.separation_tensor)
}
inline ::IronGames::Matrix3* SimulationVertex::release_separation_tensor() {
  
  ::IronGames::Matrix3* temp = separation_tensor_;
  separation_tensor_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::IronGames::Matrix3* SimulationVertex::unsafe_arena_release_separation_tensor() {
  // @@protoc_insertion_point(field_release:IronGames.SimulationVertex.separation_tensor)
  
  ::IronGames::Matrix3* temp = separation_tensor_;
  separation_tensor_ = nullptr;
  return temp;
}
inline ::IronGames::Matrix3* SimulationVertex::_internal_mutable_separation_tensor() {
  
  if (separation_tensor_ == nullptr) {
    auto* p = CreateMaybeMessage<::IronGames::Matrix3>(GetArena());
    separation_tensor_ = p;
  }
  return separation_tensor_;
}
inline ::IronGames::Matrix3* SimulationVertex::mutable_separation_tensor() {
  // @@protoc_insertion_point(field_mutable:IronGames.SimulationVertex.separation_tensor)
  return _internal_mutable_separation_tensor();
}
inline void SimulationVertex::set_allocated_separation_tensor(::IronGames::Matrix3* separation_tensor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete separation_tensor_;
  }
  if (separation_tensor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(separation_tensor);
    if (message_arena != submessage_arena) {
      separation_tensor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, separation_tensor, submessage_arena);
    }
    
  } else {
    
  }
  separation_tensor_ = separation_tensor;
  // @@protoc_insertion_point(field_set_allocated:IronGames.SimulationVertex.separation_tensor)
}

// -------------------------------------------------------------------

// SimulationTetrahedra

// float mass = 1;
inline void SimulationTetrahedra::clear_mass() {
  mass_ = 0;
}
inline float SimulationTetrahedra::_internal_mass() const {
  return mass_;
}
inline float SimulationTetrahedra::mass() const {
  // @@protoc_insertion_point(field_get:IronGames.SimulationTetrahedra.mass)
  return _internal_mass();
}
inline void SimulationTetrahedra::_internal_set_mass(float value) {
  
  mass_ = value;
}
inline void SimulationTetrahedra::set_mass(float value) {
  _internal_set_mass(value);
  // @@protoc_insertion_point(field_set:IronGames.SimulationTetrahedra.mass)
}

// float volume = 2;
inline void SimulationTetrahedra::clear_volume() {
  volume_ = 0;
}
inline float SimulationTetrahedra::_internal_volume() const {
  return volume_;
}
inline float SimulationTetrahedra::volume() const {
  // @@protoc_insertion_point(field_get:IronGames.SimulationTetrahedra.volume)
  return _internal_volume();
}
inline void SimulationTetrahedra::_internal_set_volume(float value) {
  
  volume_ = value;
}
inline void SimulationTetrahedra::set_volume(float value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:IronGames.SimulationTetrahedra.volume)
}

// repeated int32 indices = 3;
inline int SimulationTetrahedra::_internal_indices_size() const {
  return indices_.size();
}
inline int SimulationTetrahedra::indices_size() const {
  return _internal_indices_size();
}
inline void SimulationTetrahedra::clear_indices() {
  indices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SimulationTetrahedra::_internal_indices(int index) const {
  return indices_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SimulationTetrahedra::indices(int index) const {
  // @@protoc_insertion_point(field_get:IronGames.SimulationTetrahedra.indices)
  return _internal_indices(index);
}
inline void SimulationTetrahedra::set_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:IronGames.SimulationTetrahedra.indices)
}
inline void SimulationTetrahedra::_internal_add_indices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  indices_.Add(value);
}
inline void SimulationTetrahedra::add_indices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_indices(value);
  // @@protoc_insertion_point(field_add:IronGames.SimulationTetrahedra.indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SimulationTetrahedra::_internal_indices() const {
  return indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
SimulationTetrahedra::indices() const {
  // @@protoc_insertion_point(field_list:IronGames.SimulationTetrahedra.indices)
  return _internal_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SimulationTetrahedra::_internal_mutable_indices() {
  return &indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
SimulationTetrahedra::mutable_indices() {
  // @@protoc_insertion_point(field_mutable_list:IronGames.SimulationTetrahedra.indices)
  return _internal_mutable_indices();
}

// .IronGames.Matrix3 strain_tensor = 4;
inline bool SimulationTetrahedra::_internal_has_strain_tensor() const {
  return this != internal_default_instance() && strain_tensor_ != nullptr;
}
inline bool SimulationTetrahedra::has_strain_tensor() const {
  return _internal_has_strain_tensor();
}
inline void SimulationTetrahedra::clear_strain_tensor() {
  if (GetArena() == nullptr && strain_tensor_ != nullptr) {
    delete strain_tensor_;
  }
  strain_tensor_ = nullptr;
}
inline const ::IronGames::Matrix3& SimulationTetrahedra::_internal_strain_tensor() const {
  const ::IronGames::Matrix3* p = strain_tensor_;
  return p != nullptr ? *p : reinterpret_cast<const ::IronGames::Matrix3&>(
      ::IronGames::_Matrix3_default_instance_);
}
inline const ::IronGames::Matrix3& SimulationTetrahedra::strain_tensor() const {
  // @@protoc_insertion_point(field_get:IronGames.SimulationTetrahedra.strain_tensor)
  return _internal_strain_tensor();
}
inline void SimulationTetrahedra::unsafe_arena_set_allocated_strain_tensor(
    ::IronGames::Matrix3* strain_tensor) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(strain_tensor_);
  }
  strain_tensor_ = strain_tensor;
  if (strain_tensor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IronGames.SimulationTetrahedra.strain_tensor)
}
inline ::IronGames::Matrix3* SimulationTetrahedra::release_strain_tensor() {
  
  ::IronGames::Matrix3* temp = strain_tensor_;
  strain_tensor_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::IronGames::Matrix3* SimulationTetrahedra::unsafe_arena_release_strain_tensor() {
  // @@protoc_insertion_point(field_release:IronGames.SimulationTetrahedra.strain_tensor)
  
  ::IronGames::Matrix3* temp = strain_tensor_;
  strain_tensor_ = nullptr;
  return temp;
}
inline ::IronGames::Matrix3* SimulationTetrahedra::_internal_mutable_strain_tensor() {
  
  if (strain_tensor_ == nullptr) {
    auto* p = CreateMaybeMessage<::IronGames::Matrix3>(GetArena());
    strain_tensor_ = p;
  }
  return strain_tensor_;
}
inline ::IronGames::Matrix3* SimulationTetrahedra::mutable_strain_tensor() {
  // @@protoc_insertion_point(field_mutable:IronGames.SimulationTetrahedra.strain_tensor)
  return _internal_mutable_strain_tensor();
}
inline void SimulationTetrahedra::set_allocated_strain_tensor(::IronGames::Matrix3* strain_tensor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete strain_tensor_;
  }
  if (strain_tensor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(strain_tensor);
    if (message_arena != submessage_arena) {
      strain_tensor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, strain_tensor, submessage_arena);
    }
    
  } else {
    
  }
  strain_tensor_ = strain_tensor;
  // @@protoc_insertion_point(field_set_allocated:IronGames.SimulationTetrahedra.strain_tensor)
}

// .IronGames.Matrix3 stress_tensor = 5;
inline bool SimulationTetrahedra::_internal_has_stress_tensor() const {
  return this != internal_default_instance() && stress_tensor_ != nullptr;
}
inline bool SimulationTetrahedra::has_stress_tensor() const {
  return _internal_has_stress_tensor();
}
inline void SimulationTetrahedra::clear_stress_tensor() {
  if (GetArena() == nullptr && stress_tensor_ != nullptr) {
    delete stress_tensor_;
  }
  stress_tensor_ = nullptr;
}
inline const ::IronGames::Matrix3& SimulationTetrahedra::_internal_stress_tensor() const {
  const ::IronGames::Matrix3* p = stress_tensor_;
  return p != nullptr ? *p : reinterpret_cast<const ::IronGames::Matrix3&>(
      ::IronGames::_Matrix3_default_instance_);
}
inline const ::IronGames::Matrix3& SimulationTetrahedra::stress_tensor() const {
  // @@protoc_insertion_point(field_get:IronGames.SimulationTetrahedra.stress_tensor)
  return _internal_stress_tensor();
}
inline void SimulationTetrahedra::unsafe_arena_set_allocated_stress_tensor(
    ::IronGames::Matrix3* stress_tensor) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stress_tensor_);
  }
  stress_tensor_ = stress_tensor;
  if (stress_tensor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IronGames.SimulationTetrahedra.stress_tensor)
}
inline ::IronGames::Matrix3* SimulationTetrahedra::release_stress_tensor() {
  
  ::IronGames::Matrix3* temp = stress_tensor_;
  stress_tensor_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::IronGames::Matrix3* SimulationTetrahedra::unsafe_arena_release_stress_tensor() {
  // @@protoc_insertion_point(field_release:IronGames.SimulationTetrahedra.stress_tensor)
  
  ::IronGames::Matrix3* temp = stress_tensor_;
  stress_tensor_ = nullptr;
  return temp;
}
inline ::IronGames::Matrix3* SimulationTetrahedra::_internal_mutable_stress_tensor() {
  
  if (stress_tensor_ == nullptr) {
    auto* p = CreateMaybeMessage<::IronGames::Matrix3>(GetArena());
    stress_tensor_ = p;
  }
  return stress_tensor_;
}
inline ::IronGames::Matrix3* SimulationTetrahedra::mutable_stress_tensor() {
  // @@protoc_insertion_point(field_mutable:IronGames.SimulationTetrahedra.stress_tensor)
  return _internal_mutable_stress_tensor();
}
inline void SimulationTetrahedra::set_allocated_stress_tensor(::IronGames::Matrix3* stress_tensor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete stress_tensor_;
  }
  if (stress_tensor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stress_tensor);
    if (message_arena != submessage_arena) {
      stress_tensor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stress_tensor, submessage_arena);
    }
    
  } else {
    
  }
  stress_tensor_ = stress_tensor;
  // @@protoc_insertion_point(field_set_allocated:IronGames.SimulationTetrahedra.stress_tensor)
}

// -------------------------------------------------------------------

// SimulationFrame

// float time = 1;
inline void SimulationFrame::clear_time() {
  time_ = 0;
}
inline float SimulationFrame::_internal_time() const {
  return time_;
}
inline float SimulationFrame::time() const {
  // @@protoc_insertion_point(field_get:IronGames.SimulationFrame.time)
  return _internal_time();
}
inline void SimulationFrame::_internal_set_time(float value) {
  
  time_ = value;
}
inline void SimulationFrame::set_time(float value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:IronGames.SimulationFrame.time)
}

// repeated .IronGames.SimulationVertex vertices = 2;
inline int SimulationFrame::_internal_vertices_size() const {
  return vertices_.size();
}
inline int SimulationFrame::vertices_size() const {
  return _internal_vertices_size();
}
inline void SimulationFrame::clear_vertices() {
  vertices_.Clear();
}
inline ::IronGames::SimulationVertex* SimulationFrame::mutable_vertices(int index) {
  // @@protoc_insertion_point(field_mutable:IronGames.SimulationFrame.vertices)
  return vertices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::SimulationVertex >*
SimulationFrame::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:IronGames.SimulationFrame.vertices)
  return &vertices_;
}
inline const ::IronGames::SimulationVertex& SimulationFrame::_internal_vertices(int index) const {
  return vertices_.Get(index);
}
inline const ::IronGames::SimulationVertex& SimulationFrame::vertices(int index) const {
  // @@protoc_insertion_point(field_get:IronGames.SimulationFrame.vertices)
  return _internal_vertices(index);
}
inline ::IronGames::SimulationVertex* SimulationFrame::_internal_add_vertices() {
  return vertices_.Add();
}
inline ::IronGames::SimulationVertex* SimulationFrame::add_vertices() {
  // @@protoc_insertion_point(field_add:IronGames.SimulationFrame.vertices)
  return _internal_add_vertices();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::SimulationVertex >&
SimulationFrame::vertices() const {
  // @@protoc_insertion_point(field_list:IronGames.SimulationFrame.vertices)
  return vertices_;
}

// repeated .IronGames.SimulationTetrahedra tetrahedra = 3;
inline int SimulationFrame::_internal_tetrahedra_size() const {
  return tetrahedra_.size();
}
inline int SimulationFrame::tetrahedra_size() const {
  return _internal_tetrahedra_size();
}
inline void SimulationFrame::clear_tetrahedra() {
  tetrahedra_.Clear();
}
inline ::IronGames::SimulationTetrahedra* SimulationFrame::mutable_tetrahedra(int index) {
  // @@protoc_insertion_point(field_mutable:IronGames.SimulationFrame.tetrahedra)
  return tetrahedra_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::SimulationTetrahedra >*
SimulationFrame::mutable_tetrahedra() {
  // @@protoc_insertion_point(field_mutable_list:IronGames.SimulationFrame.tetrahedra)
  return &tetrahedra_;
}
inline const ::IronGames::SimulationTetrahedra& SimulationFrame::_internal_tetrahedra(int index) const {
  return tetrahedra_.Get(index);
}
inline const ::IronGames::SimulationTetrahedra& SimulationFrame::tetrahedra(int index) const {
  // @@protoc_insertion_point(field_get:IronGames.SimulationFrame.tetrahedra)
  return _internal_tetrahedra(index);
}
inline ::IronGames::SimulationTetrahedra* SimulationFrame::_internal_add_tetrahedra() {
  return tetrahedra_.Add();
}
inline ::IronGames::SimulationTetrahedra* SimulationFrame::add_tetrahedra() {
  // @@protoc_insertion_point(field_add:IronGames.SimulationFrame.tetrahedra)
  return _internal_add_tetrahedra();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::SimulationTetrahedra >&
SimulationFrame::tetrahedra() const {
  // @@protoc_insertion_point(field_list:IronGames.SimulationFrame.tetrahedra)
  return tetrahedra_;
}

// -------------------------------------------------------------------

// SimulationSummary

// float lambda = 1;
inline void SimulationSummary::clear_lambda() {
  lambda_ = 0;
}
inline float SimulationSummary::_internal_lambda() const {
  return lambda_;
}
inline float SimulationSummary::lambda() const {
  // @@protoc_insertion_point(field_get:IronGames.SimulationSummary.lambda)
  return _internal_lambda();
}
inline void SimulationSummary::_internal_set_lambda(float value) {
  
  lambda_ = value;
}
inline void SimulationSummary::set_lambda(float value) {
  _internal_set_lambda(value);
  // @@protoc_insertion_point(field_set:IronGames.SimulationSummary.lambda)
}

// float psi = 2;
inline void SimulationSummary::clear_psi() {
  psi_ = 0;
}
inline float SimulationSummary::_internal_psi() const {
  return psi_;
}
inline float SimulationSummary::psi() const {
  // @@protoc_insertion_point(field_get:IronGames.SimulationSummary.psi)
  return _internal_psi();
}
inline void SimulationSummary::_internal_set_psi(float value) {
  
  psi_ = value;
}
inline void SimulationSummary::set_psi(float value) {
  _internal_set_psi(value);
  // @@protoc_insertion_point(field_set:IronGames.SimulationSummary.psi)
}

// float mu = 3;
inline void SimulationSummary::clear_mu() {
  mu_ = 0;
}
inline float SimulationSummary::_internal_mu() const {
  return mu_;
}
inline float SimulationSummary::mu() const {
  // @@protoc_insertion_point(field_get:IronGames.SimulationSummary.mu)
  return _internal_mu();
}
inline void SimulationSummary::_internal_set_mu(float value) {
  
  mu_ = value;
}
inline void SimulationSummary::set_mu(float value) {
  _internal_set_mu(value);
  // @@protoc_insertion_point(field_set:IronGames.SimulationSummary.mu)
}

// float phi = 4;
inline void SimulationSummary::clear_phi() {
  phi_ = 0;
}
inline float SimulationSummary::_internal_phi() const {
  return phi_;
}
inline float SimulationSummary::phi() const {
  // @@protoc_insertion_point(field_get:IronGames.SimulationSummary.phi)
  return _internal_phi();
}
inline void SimulationSummary::_internal_set_phi(float value) {
  
  phi_ = value;
}
inline void SimulationSummary::set_phi(float value) {
  _internal_set_phi(value);
  // @@protoc_insertion_point(field_set:IronGames.SimulationSummary.phi)
}

// float density = 5;
inline void SimulationSummary::clear_density() {
  density_ = 0;
}
inline float SimulationSummary::_internal_density() const {
  return density_;
}
inline float SimulationSummary::density() const {
  // @@protoc_insertion_point(field_get:IronGames.SimulationSummary.density)
  return _internal_density();
}
inline void SimulationSummary::_internal_set_density(float value) {
  
  density_ = value;
}
inline void SimulationSummary::set_density(float value) {
  _internal_set_density(value);
  // @@protoc_insertion_point(field_set:IronGames.SimulationSummary.density)
}

// float toughness = 6;
inline void SimulationSummary::clear_toughness() {
  toughness_ = 0;
}
inline float SimulationSummary::_internal_toughness() const {
  return toughness_;
}
inline float SimulationSummary::toughness() const {
  // @@protoc_insertion_point(field_get:IronGames.SimulationSummary.toughness)
  return _internal_toughness();
}
inline void SimulationSummary::_internal_set_toughness(float value) {
  
  toughness_ = value;
}
inline void SimulationSummary::set_toughness(float value) {
  _internal_set_toughness(value);
  // @@protoc_insertion_point(field_set:IronGames.SimulationSummary.toughness)
}

// int32 max_num_vertices = 7;
inline void SimulationSummary::clear_max_num_vertices() {
  max_num_vertices_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SimulationSummary::_internal_max_num_vertices() const {
  return max_num_vertices_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SimulationSummary::max_num_vertices() const {
  // @@protoc_insertion_point(field_get:IronGames.SimulationSummary.max_num_vertices)
  return _internal_max_num_vertices();
}
inline void SimulationSummary::_internal_set_max_num_vertices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_num_vertices_ = value;
}
inline void SimulationSummary::set_max_num_vertices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_num_vertices(value);
  // @@protoc_insertion_point(field_set:IronGames.SimulationSummary.max_num_vertices)
}

// int32 max_num_tetrahedra = 8;
inline void SimulationSummary::clear_max_num_tetrahedra() {
  max_num_tetrahedra_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SimulationSummary::_internal_max_num_tetrahedra() const {
  return max_num_tetrahedra_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SimulationSummary::max_num_tetrahedra() const {
  // @@protoc_insertion_point(field_get:IronGames.SimulationSummary.max_num_tetrahedra)
  return _internal_max_num_tetrahedra();
}
inline void SimulationSummary::_internal_set_max_num_tetrahedra(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_num_tetrahedra_ = value;
}
inline void SimulationSummary::set_max_num_tetrahedra(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_num_tetrahedra(value);
  // @@protoc_insertion_point(field_set:IronGames.SimulationSummary.max_num_tetrahedra)
}

// repeated .IronGames.SimulationFrame frames = 9;
inline int SimulationSummary::_internal_frames_size() const {
  return frames_.size();
}
inline int SimulationSummary::frames_size() const {
  return _internal_frames_size();
}
inline void SimulationSummary::clear_frames() {
  frames_.Clear();
}
inline ::IronGames::SimulationFrame* SimulationSummary::mutable_frames(int index) {
  // @@protoc_insertion_point(field_mutable:IronGames.SimulationSummary.frames)
  return frames_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::SimulationFrame >*
SimulationSummary::mutable_frames() {
  // @@protoc_insertion_point(field_mutable_list:IronGames.SimulationSummary.frames)
  return &frames_;
}
inline const ::IronGames::SimulationFrame& SimulationSummary::_internal_frames(int index) const {
  return frames_.Get(index);
}
inline const ::IronGames::SimulationFrame& SimulationSummary::frames(int index) const {
  // @@protoc_insertion_point(field_get:IronGames.SimulationSummary.frames)
  return _internal_frames(index);
}
inline ::IronGames::SimulationFrame* SimulationSummary::_internal_add_frames() {
  return frames_.Add();
}
inline ::IronGames::SimulationFrame* SimulationSummary::add_frames() {
  // @@protoc_insertion_point(field_add:IronGames.SimulationSummary.frames)
  return _internal_add_frames();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::SimulationFrame >&
SimulationSummary::frames() const {
  // @@protoc_insertion_point(field_list:IronGames.SimulationSummary.frames)
  return frames_;
}

// -------------------------------------------------------------------

// SimulationSummaries

// repeated .IronGames.SimulationSummary summaries = 1;
inline int SimulationSummaries::_internal_summaries_size() const {
  return summaries_.size();
}
inline int SimulationSummaries::summaries_size() const {
  return _internal_summaries_size();
}
inline void SimulationSummaries::clear_summaries() {
  summaries_.Clear();
}
inline ::IronGames::SimulationSummary* SimulationSummaries::mutable_summaries(int index) {
  // @@protoc_insertion_point(field_mutable:IronGames.SimulationSummaries.summaries)
  return summaries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::SimulationSummary >*
SimulationSummaries::mutable_summaries() {
  // @@protoc_insertion_point(field_mutable_list:IronGames.SimulationSummaries.summaries)
  return &summaries_;
}
inline const ::IronGames::SimulationSummary& SimulationSummaries::_internal_summaries(int index) const {
  return summaries_.Get(index);
}
inline const ::IronGames::SimulationSummary& SimulationSummaries::summaries(int index) const {
  // @@protoc_insertion_point(field_get:IronGames.SimulationSummaries.summaries)
  return _internal_summaries(index);
}
inline ::IronGames::SimulationSummary* SimulationSummaries::_internal_add_summaries() {
  return summaries_.Add();
}
inline ::IronGames::SimulationSummary* SimulationSummaries::add_summaries() {
  // @@protoc_insertion_point(field_add:IronGames.SimulationSummaries.summaries)
  return _internal_add_summaries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::SimulationSummary >&
SimulationSummaries::summaries() const {
  // @@protoc_insertion_point(field_list:IronGames.SimulationSummaries.summaries)
  return summaries_;
}

// -------------------------------------------------------------------

// Box

// .IronGames.Vector3 min = 1;
inline bool Box::_internal_has_min() const {
  return this != internal_default_instance() && min_ != nullptr;
}
inline bool Box::has_min() const {
  return _internal_has_min();
}
inline void Box::clear_min() {
  if (GetArena() == nullptr && min_ != nullptr) {
    delete min_;
  }
  min_ = nullptr;
}
inline const ::IronGames::Vector3& Box::_internal_min() const {
  const ::IronGames::Vector3* p = min_;
  return p != nullptr ? *p : reinterpret_cast<const ::IronGames::Vector3&>(
      ::IronGames::_Vector3_default_instance_);
}
inline const ::IronGames::Vector3& Box::min() const {
  // @@protoc_insertion_point(field_get:IronGames.Box.min)
  return _internal_min();
}
inline void Box::unsafe_arena_set_allocated_min(
    ::IronGames::Vector3* min) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_);
  }
  min_ = min;
  if (min) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IronGames.Box.min)
}
inline ::IronGames::Vector3* Box::release_min() {
  
  ::IronGames::Vector3* temp = min_;
  min_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::IronGames::Vector3* Box::unsafe_arena_release_min() {
  // @@protoc_insertion_point(field_release:IronGames.Box.min)
  
  ::IronGames::Vector3* temp = min_;
  min_ = nullptr;
  return temp;
}
inline ::IronGames::Vector3* Box::_internal_mutable_min() {
  
  if (min_ == nullptr) {
    auto* p = CreateMaybeMessage<::IronGames::Vector3>(GetArena());
    min_ = p;
  }
  return min_;
}
inline ::IronGames::Vector3* Box::mutable_min() {
  // @@protoc_insertion_point(field_mutable:IronGames.Box.min)
  return _internal_mutable_min();
}
inline void Box::set_allocated_min(::IronGames::Vector3* min) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete min_;
  }
  if (min) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(min);
    if (message_arena != submessage_arena) {
      min = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min, submessage_arena);
    }
    
  } else {
    
  }
  min_ = min;
  // @@protoc_insertion_point(field_set_allocated:IronGames.Box.min)
}

// .IronGames.Vector3 max = 2;
inline bool Box::_internal_has_max() const {
  return this != internal_default_instance() && max_ != nullptr;
}
inline bool Box::has_max() const {
  return _internal_has_max();
}
inline void Box::clear_max() {
  if (GetArena() == nullptr && max_ != nullptr) {
    delete max_;
  }
  max_ = nullptr;
}
inline const ::IronGames::Vector3& Box::_internal_max() const {
  const ::IronGames::Vector3* p = max_;
  return p != nullptr ? *p : reinterpret_cast<const ::IronGames::Vector3&>(
      ::IronGames::_Vector3_default_instance_);
}
inline const ::IronGames::Vector3& Box::max() const {
  // @@protoc_insertion_point(field_get:IronGames.Box.max)
  return _internal_max();
}
inline void Box::unsafe_arena_set_allocated_max(
    ::IronGames::Vector3* max) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_);
  }
  max_ = max;
  if (max) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IronGames.Box.max)
}
inline ::IronGames::Vector3* Box::release_max() {
  
  ::IronGames::Vector3* temp = max_;
  max_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::IronGames::Vector3* Box::unsafe_arena_release_max() {
  // @@protoc_insertion_point(field_release:IronGames.Box.max)
  
  ::IronGames::Vector3* temp = max_;
  max_ = nullptr;
  return temp;
}
inline ::IronGames::Vector3* Box::_internal_mutable_max() {
  
  if (max_ == nullptr) {
    auto* p = CreateMaybeMessage<::IronGames::Vector3>(GetArena());
    max_ = p;
  }
  return max_;
}
inline ::IronGames::Vector3* Box::mutable_max() {
  // @@protoc_insertion_point(field_mutable:IronGames.Box.max)
  return _internal_mutable_max();
}
inline void Box::set_allocated_max(::IronGames::Vector3* max) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete max_;
  }
  if (max) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(max);
    if (message_arena != submessage_arena) {
      max = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max, submessage_arena);
    }
    
  } else {
    
  }
  max_ = max;
  // @@protoc_insertion_point(field_set_allocated:IronGames.Box.max)
}

// -------------------------------------------------------------------

// EditCube

// .IronGames.Vector3 center = 1;
inline bool EditCube::_internal_has_center() const {
  return this != internal_default_instance() && center_ != nullptr;
}
inline bool EditCube::has_center() const {
  return _internal_has_center();
}
inline void EditCube::clear_center() {
  if (GetArena() == nullptr && center_ != nullptr) {
    delete center_;
  }
  center_ = nullptr;
}
inline const ::IronGames::Vector3& EditCube::_internal_center() const {
  const ::IronGames::Vector3* p = center_;
  return p != nullptr ? *p : reinterpret_cast<const ::IronGames::Vector3&>(
      ::IronGames::_Vector3_default_instance_);
}
inline const ::IronGames::Vector3& EditCube::center() const {
  // @@protoc_insertion_point(field_get:IronGames.EditCube.center)
  return _internal_center();
}
inline void EditCube::unsafe_arena_set_allocated_center(
    ::IronGames::Vector3* center) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(center_);
  }
  center_ = center;
  if (center) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IronGames.EditCube.center)
}
inline ::IronGames::Vector3* EditCube::release_center() {
  
  ::IronGames::Vector3* temp = center_;
  center_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::IronGames::Vector3* EditCube::unsafe_arena_release_center() {
  // @@protoc_insertion_point(field_release:IronGames.EditCube.center)
  
  ::IronGames::Vector3* temp = center_;
  center_ = nullptr;
  return temp;
}
inline ::IronGames::Vector3* EditCube::_internal_mutable_center() {
  
  if (center_ == nullptr) {
    auto* p = CreateMaybeMessage<::IronGames::Vector3>(GetArena());
    center_ = p;
  }
  return center_;
}
inline ::IronGames::Vector3* EditCube::mutable_center() {
  // @@protoc_insertion_point(field_mutable:IronGames.EditCube.center)
  return _internal_mutable_center();
}
inline void EditCube::set_allocated_center(::IronGames::Vector3* center) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete center_;
  }
  if (center) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(center);
    if (message_arena != submessage_arena) {
      center = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center, submessage_arena);
    }
    
  } else {
    
  }
  center_ = center;
  // @@protoc_insertion_point(field_set_allocated:IronGames.EditCube.center)
}

// -------------------------------------------------------------------

// TetrahedraMesh

// repeated .IronGames.Vector3 positions = 1;
inline int TetrahedraMesh::_internal_positions_size() const {
  return positions_.size();
}
inline int TetrahedraMesh::positions_size() const {
  return _internal_positions_size();
}
inline void TetrahedraMesh::clear_positions() {
  positions_.Clear();
}
inline ::IronGames::Vector3* TetrahedraMesh::mutable_positions(int index) {
  // @@protoc_insertion_point(field_mutable:IronGames.TetrahedraMesh.positions)
  return positions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::Vector3 >*
TetrahedraMesh::mutable_positions() {
  // @@protoc_insertion_point(field_mutable_list:IronGames.TetrahedraMesh.positions)
  return &positions_;
}
inline const ::IronGames::Vector3& TetrahedraMesh::_internal_positions(int index) const {
  return positions_.Get(index);
}
inline const ::IronGames::Vector3& TetrahedraMesh::positions(int index) const {
  // @@protoc_insertion_point(field_get:IronGames.TetrahedraMesh.positions)
  return _internal_positions(index);
}
inline ::IronGames::Vector3* TetrahedraMesh::_internal_add_positions() {
  return positions_.Add();
}
inline ::IronGames::Vector3* TetrahedraMesh::add_positions() {
  // @@protoc_insertion_point(field_add:IronGames.TetrahedraMesh.positions)
  return _internal_add_positions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::Vector3 >&
TetrahedraMesh::positions() const {
  // @@protoc_insertion_point(field_list:IronGames.TetrahedraMesh.positions)
  return positions_;
}

// -------------------------------------------------------------------

// Asset

// repeated .IronGames.EditCube cubes = 1;
inline int Asset::_internal_cubes_size() const {
  return cubes_.size();
}
inline int Asset::cubes_size() const {
  return _internal_cubes_size();
}
inline void Asset::clear_cubes() {
  cubes_.Clear();
}
inline ::IronGames::EditCube* Asset::mutable_cubes(int index) {
  // @@protoc_insertion_point(field_mutable:IronGames.Asset.cubes)
  return cubes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::EditCube >*
Asset::mutable_cubes() {
  // @@protoc_insertion_point(field_mutable_list:IronGames.Asset.cubes)
  return &cubes_;
}
inline const ::IronGames::EditCube& Asset::_internal_cubes(int index) const {
  return cubes_.Get(index);
}
inline const ::IronGames::EditCube& Asset::cubes(int index) const {
  // @@protoc_insertion_point(field_get:IronGames.Asset.cubes)
  return _internal_cubes(index);
}
inline ::IronGames::EditCube* Asset::_internal_add_cubes() {
  return cubes_.Add();
}
inline ::IronGames::EditCube* Asset::add_cubes() {
  // @@protoc_insertion_point(field_add:IronGames.Asset.cubes)
  return _internal_add_cubes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::EditCube >&
Asset::cubes() const {
  // @@protoc_insertion_point(field_list:IronGames.Asset.cubes)
  return cubes_;
}

// repeated .IronGames.TetrahedraMesh tetrahedra_Meshes = 2;
inline int Asset::_internal_tetrahedra_meshes_size() const {
  return tetrahedra_meshes_.size();
}
inline int Asset::tetrahedra_meshes_size() const {
  return _internal_tetrahedra_meshes_size();
}
inline void Asset::clear_tetrahedra_meshes() {
  tetrahedra_meshes_.Clear();
}
inline ::IronGames::TetrahedraMesh* Asset::mutable_tetrahedra_meshes(int index) {
  // @@protoc_insertion_point(field_mutable:IronGames.Asset.tetrahedra_Meshes)
  return tetrahedra_meshes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::TetrahedraMesh >*
Asset::mutable_tetrahedra_meshes() {
  // @@protoc_insertion_point(field_mutable_list:IronGames.Asset.tetrahedra_Meshes)
  return &tetrahedra_meshes_;
}
inline const ::IronGames::TetrahedraMesh& Asset::_internal_tetrahedra_meshes(int index) const {
  return tetrahedra_meshes_.Get(index);
}
inline const ::IronGames::TetrahedraMesh& Asset::tetrahedra_meshes(int index) const {
  // @@protoc_insertion_point(field_get:IronGames.Asset.tetrahedra_Meshes)
  return _internal_tetrahedra_meshes(index);
}
inline ::IronGames::TetrahedraMesh* Asset::_internal_add_tetrahedra_meshes() {
  return tetrahedra_meshes_.Add();
}
inline ::IronGames::TetrahedraMesh* Asset::add_tetrahedra_meshes() {
  // @@protoc_insertion_point(field_add:IronGames.Asset.tetrahedra_Meshes)
  return _internal_add_tetrahedra_meshes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::TetrahedraMesh >&
Asset::tetrahedra_meshes() const {
  // @@protoc_insertion_point(field_list:IronGames.Asset.tetrahedra_Meshes)
  return tetrahedra_meshes_;
}

// .IronGames.Box bounds = 3;
inline bool Asset::_internal_has_bounds() const {
  return this != internal_default_instance() && bounds_ != nullptr;
}
inline bool Asset::has_bounds() const {
  return _internal_has_bounds();
}
inline void Asset::clear_bounds() {
  if (GetArena() == nullptr && bounds_ != nullptr) {
    delete bounds_;
  }
  bounds_ = nullptr;
}
inline const ::IronGames::Box& Asset::_internal_bounds() const {
  const ::IronGames::Box* p = bounds_;
  return p != nullptr ? *p : reinterpret_cast<const ::IronGames::Box&>(
      ::IronGames::_Box_default_instance_);
}
inline const ::IronGames::Box& Asset::bounds() const {
  // @@protoc_insertion_point(field_get:IronGames.Asset.bounds)
  return _internal_bounds();
}
inline void Asset::unsafe_arena_set_allocated_bounds(
    ::IronGames::Box* bounds) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bounds_);
  }
  bounds_ = bounds;
  if (bounds) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IronGames.Asset.bounds)
}
inline ::IronGames::Box* Asset::release_bounds() {
  
  ::IronGames::Box* temp = bounds_;
  bounds_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::IronGames::Box* Asset::unsafe_arena_release_bounds() {
  // @@protoc_insertion_point(field_release:IronGames.Asset.bounds)
  
  ::IronGames::Box* temp = bounds_;
  bounds_ = nullptr;
  return temp;
}
inline ::IronGames::Box* Asset::_internal_mutable_bounds() {
  
  if (bounds_ == nullptr) {
    auto* p = CreateMaybeMessage<::IronGames::Box>(GetArena());
    bounds_ = p;
  }
  return bounds_;
}
inline ::IronGames::Box* Asset::mutable_bounds() {
  // @@protoc_insertion_point(field_mutable:IronGames.Asset.bounds)
  return _internal_mutable_bounds();
}
inline void Asset::set_allocated_bounds(::IronGames::Box* bounds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bounds_;
  }
  if (bounds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bounds);
    if (message_arena != submessage_arena) {
      bounds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bounds, submessage_arena);
    }
    
  } else {
    
  }
  bounds_ = bounds;
  // @@protoc_insertion_point(field_set_allocated:IronGames.Asset.bounds)
}

// string last_saved = 4;
inline void Asset::clear_last_saved() {
  last_saved_.ClearToEmpty();
}
inline const std::string& Asset::last_saved() const {
  // @@protoc_insertion_point(field_get:IronGames.Asset.last_saved)
  return _internal_last_saved();
}
inline void Asset::set_last_saved(const std::string& value) {
  _internal_set_last_saved(value);
  // @@protoc_insertion_point(field_set:IronGames.Asset.last_saved)
}
inline std::string* Asset::mutable_last_saved() {
  // @@protoc_insertion_point(field_mutable:IronGames.Asset.last_saved)
  return _internal_mutable_last_saved();
}
inline const std::string& Asset::_internal_last_saved() const {
  return last_saved_.Get();
}
inline void Asset::_internal_set_last_saved(const std::string& value) {
  
  last_saved_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Asset::set_last_saved(std::string&& value) {
  
  last_saved_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IronGames.Asset.last_saved)
}
inline void Asset::set_last_saved(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  last_saved_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:IronGames.Asset.last_saved)
}
inline void Asset::set_last_saved(const char* value,
    size_t size) {
  
  last_saved_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IronGames.Asset.last_saved)
}
inline std::string* Asset::_internal_mutable_last_saved() {
  
  return last_saved_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Asset::release_last_saved() {
  // @@protoc_insertion_point(field_release:IronGames.Asset.last_saved)
  return last_saved_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Asset::set_allocated_last_saved(std::string* last_saved) {
  if (last_saved != nullptr) {
    
  } else {
    
  }
  last_saved_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_saved,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IronGames.Asset.last_saved)
}

// string author = 5;
inline void Asset::clear_author() {
  author_.ClearToEmpty();
}
inline const std::string& Asset::author() const {
  // @@protoc_insertion_point(field_get:IronGames.Asset.author)
  return _internal_author();
}
inline void Asset::set_author(const std::string& value) {
  _internal_set_author(value);
  // @@protoc_insertion_point(field_set:IronGames.Asset.author)
}
inline std::string* Asset::mutable_author() {
  // @@protoc_insertion_point(field_mutable:IronGames.Asset.author)
  return _internal_mutable_author();
}
inline const std::string& Asset::_internal_author() const {
  return author_.Get();
}
inline void Asset::_internal_set_author(const std::string& value) {
  
  author_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Asset::set_author(std::string&& value) {
  
  author_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IronGames.Asset.author)
}
inline void Asset::set_author(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  author_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:IronGames.Asset.author)
}
inline void Asset::set_author(const char* value,
    size_t size) {
  
  author_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IronGames.Asset.author)
}
inline std::string* Asset::_internal_mutable_author() {
  
  return author_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Asset::release_author() {
  // @@protoc_insertion_point(field_release:IronGames.Asset.author)
  return author_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Asset::set_allocated_author(std::string* author) {
  if (author != nullptr) {
    
  } else {
    
  }
  author_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), author,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IronGames.Asset.author)
}

// string asset_id = 6;
inline void Asset::clear_asset_id() {
  asset_id_.ClearToEmpty();
}
inline const std::string& Asset::asset_id() const {
  // @@protoc_insertion_point(field_get:IronGames.Asset.asset_id)
  return _internal_asset_id();
}
inline void Asset::set_asset_id(const std::string& value) {
  _internal_set_asset_id(value);
  // @@protoc_insertion_point(field_set:IronGames.Asset.asset_id)
}
inline std::string* Asset::mutable_asset_id() {
  // @@protoc_insertion_point(field_mutable:IronGames.Asset.asset_id)
  return _internal_mutable_asset_id();
}
inline const std::string& Asset::_internal_asset_id() const {
  return asset_id_.Get();
}
inline void Asset::_internal_set_asset_id(const std::string& value) {
  
  asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Asset::set_asset_id(std::string&& value) {
  
  asset_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IronGames.Asset.asset_id)
}
inline void Asset::set_asset_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:IronGames.Asset.asset_id)
}
inline void Asset::set_asset_id(const char* value,
    size_t size) {
  
  asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IronGames.Asset.asset_id)
}
inline std::string* Asset::_internal_mutable_asset_id() {
  
  return asset_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Asset::release_asset_id() {
  // @@protoc_insertion_point(field_release:IronGames.Asset.asset_id)
  return asset_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Asset::set_allocated_asset_id(std::string* asset_id) {
  if (asset_id != nullptr) {
    
  } else {
    
  }
  asset_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IronGames.Asset.asset_id)
}

// -------------------------------------------------------------------

// PalaceAsset

// string asset_id = 1;
inline void PalaceAsset::clear_asset_id() {
  asset_id_.ClearToEmpty();
}
inline const std::string& PalaceAsset::asset_id() const {
  // @@protoc_insertion_point(field_get:IronGames.PalaceAsset.asset_id)
  return _internal_asset_id();
}
inline void PalaceAsset::set_asset_id(const std::string& value) {
  _internal_set_asset_id(value);
  // @@protoc_insertion_point(field_set:IronGames.PalaceAsset.asset_id)
}
inline std::string* PalaceAsset::mutable_asset_id() {
  // @@protoc_insertion_point(field_mutable:IronGames.PalaceAsset.asset_id)
  return _internal_mutable_asset_id();
}
inline const std::string& PalaceAsset::_internal_asset_id() const {
  return asset_id_.Get();
}
inline void PalaceAsset::_internal_set_asset_id(const std::string& value) {
  
  asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PalaceAsset::set_asset_id(std::string&& value) {
  
  asset_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:IronGames.PalaceAsset.asset_id)
}
inline void PalaceAsset::set_asset_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:IronGames.PalaceAsset.asset_id)
}
inline void PalaceAsset::set_asset_id(const char* value,
    size_t size) {
  
  asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:IronGames.PalaceAsset.asset_id)
}
inline std::string* PalaceAsset::_internal_mutable_asset_id() {
  
  return asset_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PalaceAsset::release_asset_id() {
  // @@protoc_insertion_point(field_release:IronGames.PalaceAsset.asset_id)
  return asset_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PalaceAsset::set_allocated_asset_id(std::string* asset_id) {
  if (asset_id != nullptr) {
    
  } else {
    
  }
  asset_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:IronGames.PalaceAsset.asset_id)
}

// .IronGames.Transform transform = 2;
inline bool PalaceAsset::_internal_has_transform() const {
  return this != internal_default_instance() && transform_ != nullptr;
}
inline bool PalaceAsset::has_transform() const {
  return _internal_has_transform();
}
inline void PalaceAsset::clear_transform() {
  if (GetArena() == nullptr && transform_ != nullptr) {
    delete transform_;
  }
  transform_ = nullptr;
}
inline const ::IronGames::Transform& PalaceAsset::_internal_transform() const {
  const ::IronGames::Transform* p = transform_;
  return p != nullptr ? *p : reinterpret_cast<const ::IronGames::Transform&>(
      ::IronGames::_Transform_default_instance_);
}
inline const ::IronGames::Transform& PalaceAsset::transform() const {
  // @@protoc_insertion_point(field_get:IronGames.PalaceAsset.transform)
  return _internal_transform();
}
inline void PalaceAsset::unsafe_arena_set_allocated_transform(
    ::IronGames::Transform* transform) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform_);
  }
  transform_ = transform;
  if (transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IronGames.PalaceAsset.transform)
}
inline ::IronGames::Transform* PalaceAsset::release_transform() {
  
  ::IronGames::Transform* temp = transform_;
  transform_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::IronGames::Transform* PalaceAsset::unsafe_arena_release_transform() {
  // @@protoc_insertion_point(field_release:IronGames.PalaceAsset.transform)
  
  ::IronGames::Transform* temp = transform_;
  transform_ = nullptr;
  return temp;
}
inline ::IronGames::Transform* PalaceAsset::_internal_mutable_transform() {
  
  if (transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::IronGames::Transform>(GetArena());
    transform_ = p;
  }
  return transform_;
}
inline ::IronGames::Transform* PalaceAsset::mutable_transform() {
  // @@protoc_insertion_point(field_mutable:IronGames.PalaceAsset.transform)
  return _internal_mutable_transform();
}
inline void PalaceAsset::set_allocated_transform(::IronGames::Transform* transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete transform_;
  }
  if (transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(transform);
    if (message_arena != submessage_arena) {
      transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform, submessage_arena);
    }
    
  } else {
    
  }
  transform_ = transform;
  // @@protoc_insertion_point(field_set_allocated:IronGames.PalaceAsset.transform)
}

// .IronGames.Color color = 3;
inline bool PalaceAsset::_internal_has_color() const {
  return this != internal_default_instance() && color_ != nullptr;
}
inline bool PalaceAsset::has_color() const {
  return _internal_has_color();
}
inline void PalaceAsset::clear_color() {
  if (GetArena() == nullptr && color_ != nullptr) {
    delete color_;
  }
  color_ = nullptr;
}
inline const ::IronGames::Color& PalaceAsset::_internal_color() const {
  const ::IronGames::Color* p = color_;
  return p != nullptr ? *p : reinterpret_cast<const ::IronGames::Color&>(
      ::IronGames::_Color_default_instance_);
}
inline const ::IronGames::Color& PalaceAsset::color() const {
  // @@protoc_insertion_point(field_get:IronGames.PalaceAsset.color)
  return _internal_color();
}
inline void PalaceAsset::unsafe_arena_set_allocated_color(
    ::IronGames::Color* color) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_);
  }
  color_ = color;
  if (color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IronGames.PalaceAsset.color)
}
inline ::IronGames::Color* PalaceAsset::release_color() {
  
  ::IronGames::Color* temp = color_;
  color_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::IronGames::Color* PalaceAsset::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_release:IronGames.PalaceAsset.color)
  
  ::IronGames::Color* temp = color_;
  color_ = nullptr;
  return temp;
}
inline ::IronGames::Color* PalaceAsset::_internal_mutable_color() {
  
  if (color_ == nullptr) {
    auto* p = CreateMaybeMessage<::IronGames::Color>(GetArena());
    color_ = p;
  }
  return color_;
}
inline ::IronGames::Color* PalaceAsset::mutable_color() {
  // @@protoc_insertion_point(field_mutable:IronGames.PalaceAsset.color)
  return _internal_mutable_color();
}
inline void PalaceAsset::set_allocated_color(::IronGames::Color* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete color_;
  }
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(color);
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    
  } else {
    
  }
  color_ = color;
  // @@protoc_insertion_point(field_set_allocated:IronGames.PalaceAsset.color)
}

// .IronGames.Vector3 scale = 4;
inline bool PalaceAsset::_internal_has_scale() const {
  return this != internal_default_instance() && scale_ != nullptr;
}
inline bool PalaceAsset::has_scale() const {
  return _internal_has_scale();
}
inline void PalaceAsset::clear_scale() {
  if (GetArena() == nullptr && scale_ != nullptr) {
    delete scale_;
  }
  scale_ = nullptr;
}
inline const ::IronGames::Vector3& PalaceAsset::_internal_scale() const {
  const ::IronGames::Vector3* p = scale_;
  return p != nullptr ? *p : reinterpret_cast<const ::IronGames::Vector3&>(
      ::IronGames::_Vector3_default_instance_);
}
inline const ::IronGames::Vector3& PalaceAsset::scale() const {
  // @@protoc_insertion_point(field_get:IronGames.PalaceAsset.scale)
  return _internal_scale();
}
inline void PalaceAsset::unsafe_arena_set_allocated_scale(
    ::IronGames::Vector3* scale) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scale_);
  }
  scale_ = scale;
  if (scale) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IronGames.PalaceAsset.scale)
}
inline ::IronGames::Vector3* PalaceAsset::release_scale() {
  
  ::IronGames::Vector3* temp = scale_;
  scale_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::IronGames::Vector3* PalaceAsset::unsafe_arena_release_scale() {
  // @@protoc_insertion_point(field_release:IronGames.PalaceAsset.scale)
  
  ::IronGames::Vector3* temp = scale_;
  scale_ = nullptr;
  return temp;
}
inline ::IronGames::Vector3* PalaceAsset::_internal_mutable_scale() {
  
  if (scale_ == nullptr) {
    auto* p = CreateMaybeMessage<::IronGames::Vector3>(GetArena());
    scale_ = p;
  }
  return scale_;
}
inline ::IronGames::Vector3* PalaceAsset::mutable_scale() {
  // @@protoc_insertion_point(field_mutable:IronGames.PalaceAsset.scale)
  return _internal_mutable_scale();
}
inline void PalaceAsset::set_allocated_scale(::IronGames::Vector3* scale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete scale_;
  }
  if (scale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(scale);
    if (message_arena != submessage_arena) {
      scale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scale, submessage_arena);
    }
    
  } else {
    
  }
  scale_ = scale;
  // @@protoc_insertion_point(field_set_allocated:IronGames.PalaceAsset.scale)
}

// -------------------------------------------------------------------

// PlayerAssets

// repeated .IronGames.Asset assets = 1;
inline int PlayerAssets::_internal_assets_size() const {
  return assets_.size();
}
inline int PlayerAssets::assets_size() const {
  return _internal_assets_size();
}
inline void PlayerAssets::clear_assets() {
  assets_.Clear();
}
inline ::IronGames::Asset* PlayerAssets::mutable_assets(int index) {
  // @@protoc_insertion_point(field_mutable:IronGames.PlayerAssets.assets)
  return assets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::Asset >*
PlayerAssets::mutable_assets() {
  // @@protoc_insertion_point(field_mutable_list:IronGames.PlayerAssets.assets)
  return &assets_;
}
inline const ::IronGames::Asset& PlayerAssets::_internal_assets(int index) const {
  return assets_.Get(index);
}
inline const ::IronGames::Asset& PlayerAssets::assets(int index) const {
  // @@protoc_insertion_point(field_get:IronGames.PlayerAssets.assets)
  return _internal_assets(index);
}
inline ::IronGames::Asset* PlayerAssets::_internal_add_assets() {
  return assets_.Add();
}
inline ::IronGames::Asset* PlayerAssets::add_assets() {
  // @@protoc_insertion_point(field_add:IronGames.PlayerAssets.assets)
  return _internal_add_assets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::Asset >&
PlayerAssets::assets() const {
  // @@protoc_insertion_point(field_list:IronGames.PlayerAssets.assets)
  return assets_;
}

// repeated .IronGames.PalaceAsset palace_assets = 2;
inline int PlayerAssets::_internal_palace_assets_size() const {
  return palace_assets_.size();
}
inline int PlayerAssets::palace_assets_size() const {
  return _internal_palace_assets_size();
}
inline void PlayerAssets::clear_palace_assets() {
  palace_assets_.Clear();
}
inline ::IronGames::PalaceAsset* PlayerAssets::mutable_palace_assets(int index) {
  // @@protoc_insertion_point(field_mutable:IronGames.PlayerAssets.palace_assets)
  return palace_assets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::PalaceAsset >*
PlayerAssets::mutable_palace_assets() {
  // @@protoc_insertion_point(field_mutable_list:IronGames.PlayerAssets.palace_assets)
  return &palace_assets_;
}
inline const ::IronGames::PalaceAsset& PlayerAssets::_internal_palace_assets(int index) const {
  return palace_assets_.Get(index);
}
inline const ::IronGames::PalaceAsset& PlayerAssets::palace_assets(int index) const {
  // @@protoc_insertion_point(field_get:IronGames.PlayerAssets.palace_assets)
  return _internal_palace_assets(index);
}
inline ::IronGames::PalaceAsset* PlayerAssets::_internal_add_palace_assets() {
  return palace_assets_.Add();
}
inline ::IronGames::PalaceAsset* PlayerAssets::add_palace_assets() {
  // @@protoc_insertion_point(field_add:IronGames.PlayerAssets.palace_assets)
  return _internal_add_palace_assets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::PalaceAsset >&
PlayerAssets::palace_assets() const {
  // @@protoc_insertion_point(field_list:IronGames.PlayerAssets.palace_assets)
  return palace_assets_;
}

// -------------------------------------------------------------------

// EventPlayerConnected

// .IronGames.Player player = 1;
inline bool EventPlayerConnected::_internal_has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline bool EventPlayerConnected::has_player() const {
  return _internal_has_player();
}
inline void EventPlayerConnected::clear_player() {
  if (GetArena() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
}
inline const ::IronGames::Player& EventPlayerConnected::_internal_player() const {
  const ::IronGames::Player* p = player_;
  return p != nullptr ? *p : reinterpret_cast<const ::IronGames::Player&>(
      ::IronGames::_Player_default_instance_);
}
inline const ::IronGames::Player& EventPlayerConnected::player() const {
  // @@protoc_insertion_point(field_get:IronGames.EventPlayerConnected.player)
  return _internal_player();
}
inline void EventPlayerConnected::unsafe_arena_set_allocated_player(
    ::IronGames::Player* player) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IronGames.EventPlayerConnected.player)
}
inline ::IronGames::Player* EventPlayerConnected::release_player() {
  
  ::IronGames::Player* temp = player_;
  player_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::IronGames::Player* EventPlayerConnected::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:IronGames.EventPlayerConnected.player)
  
  ::IronGames::Player* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::IronGames::Player* EventPlayerConnected::_internal_mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::IronGames::Player>(GetArena());
    player_ = p;
  }
  return player_;
}
inline ::IronGames::Player* EventPlayerConnected::mutable_player() {
  // @@protoc_insertion_point(field_mutable:IronGames.EventPlayerConnected.player)
  return _internal_mutable_player();
}
inline void EventPlayerConnected::set_allocated_player(::IronGames::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete player_;
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(player);
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:IronGames.EventPlayerConnected.player)
}

// -------------------------------------------------------------------

// EventPlayerChanged

// .IronGames.Player player = 1;
inline bool EventPlayerChanged::_internal_has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline bool EventPlayerChanged::has_player() const {
  return _internal_has_player();
}
inline void EventPlayerChanged::clear_player() {
  if (GetArena() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
}
inline const ::IronGames::Player& EventPlayerChanged::_internal_player() const {
  const ::IronGames::Player* p = player_;
  return p != nullptr ? *p : reinterpret_cast<const ::IronGames::Player&>(
      ::IronGames::_Player_default_instance_);
}
inline const ::IronGames::Player& EventPlayerChanged::player() const {
  // @@protoc_insertion_point(field_get:IronGames.EventPlayerChanged.player)
  return _internal_player();
}
inline void EventPlayerChanged::unsafe_arena_set_allocated_player(
    ::IronGames::Player* player) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IronGames.EventPlayerChanged.player)
}
inline ::IronGames::Player* EventPlayerChanged::release_player() {
  
  ::IronGames::Player* temp = player_;
  player_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::IronGames::Player* EventPlayerChanged::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:IronGames.EventPlayerChanged.player)
  
  ::IronGames::Player* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::IronGames::Player* EventPlayerChanged::_internal_mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::IronGames::Player>(GetArena());
    player_ = p;
  }
  return player_;
}
inline ::IronGames::Player* EventPlayerChanged::mutable_player() {
  // @@protoc_insertion_point(field_mutable:IronGames.EventPlayerChanged.player)
  return _internal_mutable_player();
}
inline void EventPlayerChanged::set_allocated_player(::IronGames::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete player_;
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(player);
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:IronGames.EventPlayerChanged.player)
}

// -------------------------------------------------------------------

// EventPlayerDisconnected

// .IronGames.Player player = 1;
inline bool EventPlayerDisconnected::_internal_has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline bool EventPlayerDisconnected::has_player() const {
  return _internal_has_player();
}
inline void EventPlayerDisconnected::clear_player() {
  if (GetArena() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
}
inline const ::IronGames::Player& EventPlayerDisconnected::_internal_player() const {
  const ::IronGames::Player* p = player_;
  return p != nullptr ? *p : reinterpret_cast<const ::IronGames::Player&>(
      ::IronGames::_Player_default_instance_);
}
inline const ::IronGames::Player& EventPlayerDisconnected::player() const {
  // @@protoc_insertion_point(field_get:IronGames.EventPlayerDisconnected.player)
  return _internal_player();
}
inline void EventPlayerDisconnected::unsafe_arena_set_allocated_player(
    ::IronGames::Player* player) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IronGames.EventPlayerDisconnected.player)
}
inline ::IronGames::Player* EventPlayerDisconnected::release_player() {
  
  ::IronGames::Player* temp = player_;
  player_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::IronGames::Player* EventPlayerDisconnected::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:IronGames.EventPlayerDisconnected.player)
  
  ::IronGames::Player* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::IronGames::Player* EventPlayerDisconnected::_internal_mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::IronGames::Player>(GetArena());
    player_ = p;
  }
  return player_;
}
inline ::IronGames::Player* EventPlayerDisconnected::mutable_player() {
  // @@protoc_insertion_point(field_mutable:IronGames.EventPlayerDisconnected.player)
  return _internal_mutable_player();
}
inline void EventPlayerDisconnected::set_allocated_player(::IronGames::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete player_;
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(player);
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:IronGames.EventPlayerDisconnected.player)
}

// -------------------------------------------------------------------

// EventUnitCreation

// int32 unit_id = 1;
inline void EventUnitCreation::clear_unit_id() {
  unit_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EventUnitCreation::_internal_unit_id() const {
  return unit_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EventUnitCreation::unit_id() const {
  // @@protoc_insertion_point(field_get:IronGames.EventUnitCreation.unit_id)
  return _internal_unit_id();
}
inline void EventUnitCreation::_internal_set_unit_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  unit_id_ = value;
}
inline void EventUnitCreation::set_unit_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_unit_id(value);
  // @@protoc_insertion_point(field_set:IronGames.EventUnitCreation.unit_id)
}

// int32 type_id = 2;
inline void EventUnitCreation::clear_type_id() {
  type_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EventUnitCreation::_internal_type_id() const {
  return type_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EventUnitCreation::type_id() const {
  // @@protoc_insertion_point(field_get:IronGames.EventUnitCreation.type_id)
  return _internal_type_id();
}
inline void EventUnitCreation::_internal_set_type_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_id_ = value;
}
inline void EventUnitCreation::set_type_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type_id(value);
  // @@protoc_insertion_point(field_set:IronGames.EventUnitCreation.type_id)
}

// int32 owner_id = 3;
inline void EventUnitCreation::clear_owner_id() {
  owner_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EventUnitCreation::_internal_owner_id() const {
  return owner_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EventUnitCreation::owner_id() const {
  // @@protoc_insertion_point(field_get:IronGames.EventUnitCreation.owner_id)
  return _internal_owner_id();
}
inline void EventUnitCreation::_internal_set_owner_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  owner_id_ = value;
}
inline void EventUnitCreation::set_owner_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_owner_id(value);
  // @@protoc_insertion_point(field_set:IronGames.EventUnitCreation.owner_id)
}

// .IronGames.Transform transform = 4;
inline bool EventUnitCreation::_internal_has_transform() const {
  return this != internal_default_instance() && transform_ != nullptr;
}
inline bool EventUnitCreation::has_transform() const {
  return _internal_has_transform();
}
inline void EventUnitCreation::clear_transform() {
  if (GetArena() == nullptr && transform_ != nullptr) {
    delete transform_;
  }
  transform_ = nullptr;
}
inline const ::IronGames::Transform& EventUnitCreation::_internal_transform() const {
  const ::IronGames::Transform* p = transform_;
  return p != nullptr ? *p : reinterpret_cast<const ::IronGames::Transform&>(
      ::IronGames::_Transform_default_instance_);
}
inline const ::IronGames::Transform& EventUnitCreation::transform() const {
  // @@protoc_insertion_point(field_get:IronGames.EventUnitCreation.transform)
  return _internal_transform();
}
inline void EventUnitCreation::unsafe_arena_set_allocated_transform(
    ::IronGames::Transform* transform) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform_);
  }
  transform_ = transform;
  if (transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IronGames.EventUnitCreation.transform)
}
inline ::IronGames::Transform* EventUnitCreation::release_transform() {
  
  ::IronGames::Transform* temp = transform_;
  transform_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::IronGames::Transform* EventUnitCreation::unsafe_arena_release_transform() {
  // @@protoc_insertion_point(field_release:IronGames.EventUnitCreation.transform)
  
  ::IronGames::Transform* temp = transform_;
  transform_ = nullptr;
  return temp;
}
inline ::IronGames::Transform* EventUnitCreation::_internal_mutable_transform() {
  
  if (transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::IronGames::Transform>(GetArena());
    transform_ = p;
  }
  return transform_;
}
inline ::IronGames::Transform* EventUnitCreation::mutable_transform() {
  // @@protoc_insertion_point(field_mutable:IronGames.EventUnitCreation.transform)
  return _internal_mutable_transform();
}
inline void EventUnitCreation::set_allocated_transform(::IronGames::Transform* transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete transform_;
  }
  if (transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(transform);
    if (message_arena != submessage_arena) {
      transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform, submessage_arena);
    }
    
  } else {
    
  }
  transform_ = transform;
  // @@protoc_insertion_point(field_set_allocated:IronGames.EventUnitCreation.transform)
}

// -------------------------------------------------------------------

// EventActorCreationRequest

// int32 type_id = 1;
inline void EventActorCreationRequest::clear_type_id() {
  type_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EventActorCreationRequest::_internal_type_id() const {
  return type_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EventActorCreationRequest::type_id() const {
  // @@protoc_insertion_point(field_get:IronGames.EventActorCreationRequest.type_id)
  return _internal_type_id();
}
inline void EventActorCreationRequest::_internal_set_type_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_id_ = value;
}
inline void EventActorCreationRequest::set_type_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type_id(value);
  // @@protoc_insertion_point(field_set:IronGames.EventActorCreationRequest.type_id)
}

// int32 owner_id = 2;
inline void EventActorCreationRequest::clear_owner_id() {
  owner_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EventActorCreationRequest::_internal_owner_id() const {
  return owner_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EventActorCreationRequest::owner_id() const {
  // @@protoc_insertion_point(field_get:IronGames.EventActorCreationRequest.owner_id)
  return _internal_owner_id();
}
inline void EventActorCreationRequest::_internal_set_owner_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  owner_id_ = value;
}
inline void EventActorCreationRequest::set_owner_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_owner_id(value);
  // @@protoc_insertion_point(field_set:IronGames.EventActorCreationRequest.owner_id)
}

// .IronGames.Transform transform = 3;
inline bool EventActorCreationRequest::_internal_has_transform() const {
  return this != internal_default_instance() && transform_ != nullptr;
}
inline bool EventActorCreationRequest::has_transform() const {
  return _internal_has_transform();
}
inline void EventActorCreationRequest::clear_transform() {
  if (GetArena() == nullptr && transform_ != nullptr) {
    delete transform_;
  }
  transform_ = nullptr;
}
inline const ::IronGames::Transform& EventActorCreationRequest::_internal_transform() const {
  const ::IronGames::Transform* p = transform_;
  return p != nullptr ? *p : reinterpret_cast<const ::IronGames::Transform&>(
      ::IronGames::_Transform_default_instance_);
}
inline const ::IronGames::Transform& EventActorCreationRequest::transform() const {
  // @@protoc_insertion_point(field_get:IronGames.EventActorCreationRequest.transform)
  return _internal_transform();
}
inline void EventActorCreationRequest::unsafe_arena_set_allocated_transform(
    ::IronGames::Transform* transform) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform_);
  }
  transform_ = transform;
  if (transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IronGames.EventActorCreationRequest.transform)
}
inline ::IronGames::Transform* EventActorCreationRequest::release_transform() {
  
  ::IronGames::Transform* temp = transform_;
  transform_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::IronGames::Transform* EventActorCreationRequest::unsafe_arena_release_transform() {
  // @@protoc_insertion_point(field_release:IronGames.EventActorCreationRequest.transform)
  
  ::IronGames::Transform* temp = transform_;
  transform_ = nullptr;
  return temp;
}
inline ::IronGames::Transform* EventActorCreationRequest::_internal_mutable_transform() {
  
  if (transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::IronGames::Transform>(GetArena());
    transform_ = p;
  }
  return transform_;
}
inline ::IronGames::Transform* EventActorCreationRequest::mutable_transform() {
  // @@protoc_insertion_point(field_mutable:IronGames.EventActorCreationRequest.transform)
  return _internal_mutable_transform();
}
inline void EventActorCreationRequest::set_allocated_transform(::IronGames::Transform* transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete transform_;
  }
  if (transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(transform);
    if (message_arena != submessage_arena) {
      transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform, submessage_arena);
    }
    
  } else {
    
  }
  transform_ = transform;
  // @@protoc_insertion_point(field_set_allocated:IronGames.EventActorCreationRequest.transform)
}

// -------------------------------------------------------------------

// EventUnitDestruction

// int32 unit_id = 1;
inline void EventUnitDestruction::clear_unit_id() {
  unit_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EventUnitDestruction::_internal_unit_id() const {
  return unit_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EventUnitDestruction::unit_id() const {
  // @@protoc_insertion_point(field_get:IronGames.EventUnitDestruction.unit_id)
  return _internal_unit_id();
}
inline void EventUnitDestruction::_internal_set_unit_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  unit_id_ = value;
}
inline void EventUnitDestruction::set_unit_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_unit_id(value);
  // @@protoc_insertion_point(field_set:IronGames.EventUnitDestruction.unit_id)
}

// -------------------------------------------------------------------

// EventBuildingCreation

// int32 building_id = 1;
inline void EventBuildingCreation::clear_building_id() {
  building_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EventBuildingCreation::_internal_building_id() const {
  return building_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EventBuildingCreation::building_id() const {
  // @@protoc_insertion_point(field_get:IronGames.EventBuildingCreation.building_id)
  return _internal_building_id();
}
inline void EventBuildingCreation::_internal_set_building_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  building_id_ = value;
}
inline void EventBuildingCreation::set_building_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_building_id(value);
  // @@protoc_insertion_point(field_set:IronGames.EventBuildingCreation.building_id)
}

// int32 type_id = 2;
inline void EventBuildingCreation::clear_type_id() {
  type_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EventBuildingCreation::_internal_type_id() const {
  return type_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EventBuildingCreation::type_id() const {
  // @@protoc_insertion_point(field_get:IronGames.EventBuildingCreation.type_id)
  return _internal_type_id();
}
inline void EventBuildingCreation::_internal_set_type_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_id_ = value;
}
inline void EventBuildingCreation::set_type_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type_id(value);
  // @@protoc_insertion_point(field_set:IronGames.EventBuildingCreation.type_id)
}

// .IronGames.Transform transform = 3;
inline bool EventBuildingCreation::_internal_has_transform() const {
  return this != internal_default_instance() && transform_ != nullptr;
}
inline bool EventBuildingCreation::has_transform() const {
  return _internal_has_transform();
}
inline void EventBuildingCreation::clear_transform() {
  if (GetArena() == nullptr && transform_ != nullptr) {
    delete transform_;
  }
  transform_ = nullptr;
}
inline const ::IronGames::Transform& EventBuildingCreation::_internal_transform() const {
  const ::IronGames::Transform* p = transform_;
  return p != nullptr ? *p : reinterpret_cast<const ::IronGames::Transform&>(
      ::IronGames::_Transform_default_instance_);
}
inline const ::IronGames::Transform& EventBuildingCreation::transform() const {
  // @@protoc_insertion_point(field_get:IronGames.EventBuildingCreation.transform)
  return _internal_transform();
}
inline void EventBuildingCreation::unsafe_arena_set_allocated_transform(
    ::IronGames::Transform* transform) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform_);
  }
  transform_ = transform;
  if (transform) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IronGames.EventBuildingCreation.transform)
}
inline ::IronGames::Transform* EventBuildingCreation::release_transform() {
  
  ::IronGames::Transform* temp = transform_;
  transform_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::IronGames::Transform* EventBuildingCreation::unsafe_arena_release_transform() {
  // @@protoc_insertion_point(field_release:IronGames.EventBuildingCreation.transform)
  
  ::IronGames::Transform* temp = transform_;
  transform_ = nullptr;
  return temp;
}
inline ::IronGames::Transform* EventBuildingCreation::_internal_mutable_transform() {
  
  if (transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::IronGames::Transform>(GetArena());
    transform_ = p;
  }
  return transform_;
}
inline ::IronGames::Transform* EventBuildingCreation::mutable_transform() {
  // @@protoc_insertion_point(field_mutable:IronGames.EventBuildingCreation.transform)
  return _internal_mutable_transform();
}
inline void EventBuildingCreation::set_allocated_transform(::IronGames::Transform* transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete transform_;
  }
  if (transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(transform);
    if (message_arena != submessage_arena) {
      transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform, submessage_arena);
    }
    
  } else {
    
  }
  transform_ = transform;
  // @@protoc_insertion_point(field_set_allocated:IronGames.EventBuildingCreation.transform)
}

// -------------------------------------------------------------------

// EventBuildingDestruction

// int32 building_id = 1;
inline void EventBuildingDestruction::clear_building_id() {
  building_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EventBuildingDestruction::_internal_building_id() const {
  return building_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EventBuildingDestruction::building_id() const {
  // @@protoc_insertion_point(field_get:IronGames.EventBuildingDestruction.building_id)
  return _internal_building_id();
}
inline void EventBuildingDestruction::_internal_set_building_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  building_id_ = value;
}
inline void EventBuildingDestruction::set_building_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_building_id(value);
  // @@protoc_insertion_point(field_set:IronGames.EventBuildingDestruction.building_id)
}

// -------------------------------------------------------------------

// CommandMove

// int32 unit_id = 1;
inline void CommandMove::clear_unit_id() {
  unit_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommandMove::_internal_unit_id() const {
  return unit_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommandMove::unit_id() const {
  // @@protoc_insertion_point(field_get:IronGames.CommandMove.unit_id)
  return _internal_unit_id();
}
inline void CommandMove::_internal_set_unit_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  unit_id_ = value;
}
inline void CommandMove::set_unit_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_unit_id(value);
  // @@protoc_insertion_point(field_set:IronGames.CommandMove.unit_id)
}

// .IronGames.Vector3 destination = 2;
inline bool CommandMove::_internal_has_destination() const {
  return this != internal_default_instance() && destination_ != nullptr;
}
inline bool CommandMove::has_destination() const {
  return _internal_has_destination();
}
inline void CommandMove::clear_destination() {
  if (GetArena() == nullptr && destination_ != nullptr) {
    delete destination_;
  }
  destination_ = nullptr;
}
inline const ::IronGames::Vector3& CommandMove::_internal_destination() const {
  const ::IronGames::Vector3* p = destination_;
  return p != nullptr ? *p : reinterpret_cast<const ::IronGames::Vector3&>(
      ::IronGames::_Vector3_default_instance_);
}
inline const ::IronGames::Vector3& CommandMove::destination() const {
  // @@protoc_insertion_point(field_get:IronGames.CommandMove.destination)
  return _internal_destination();
}
inline void CommandMove::unsafe_arena_set_allocated_destination(
    ::IronGames::Vector3* destination) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(destination_);
  }
  destination_ = destination;
  if (destination) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IronGames.CommandMove.destination)
}
inline ::IronGames::Vector3* CommandMove::release_destination() {
  
  ::IronGames::Vector3* temp = destination_;
  destination_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::IronGames::Vector3* CommandMove::unsafe_arena_release_destination() {
  // @@protoc_insertion_point(field_release:IronGames.CommandMove.destination)
  
  ::IronGames::Vector3* temp = destination_;
  destination_ = nullptr;
  return temp;
}
inline ::IronGames::Vector3* CommandMove::_internal_mutable_destination() {
  
  if (destination_ == nullptr) {
    auto* p = CreateMaybeMessage<::IronGames::Vector3>(GetArena());
    destination_ = p;
  }
  return destination_;
}
inline ::IronGames::Vector3* CommandMove::mutable_destination() {
  // @@protoc_insertion_point(field_mutable:IronGames.CommandMove.destination)
  return _internal_mutable_destination();
}
inline void CommandMove::set_allocated_destination(::IronGames::Vector3* destination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete destination_;
  }
  if (destination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(destination);
    if (message_arena != submessage_arena) {
      destination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, destination, submessage_arena);
    }
    
  } else {
    
  }
  destination_ = destination;
  // @@protoc_insertion_point(field_set_allocated:IronGames.CommandMove.destination)
}

// -------------------------------------------------------------------

// CommandAttack

// int32 unit_id = 1;
inline void CommandAttack::clear_unit_id() {
  unit_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommandAttack::_internal_unit_id() const {
  return unit_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommandAttack::unit_id() const {
  // @@protoc_insertion_point(field_get:IronGames.CommandAttack.unit_id)
  return _internal_unit_id();
}
inline void CommandAttack::_internal_set_unit_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  unit_id_ = value;
}
inline void CommandAttack::set_unit_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_unit_id(value);
  // @@protoc_insertion_point(field_set:IronGames.CommandAttack.unit_id)
}

// int32 target_id = 2;
inline void CommandAttack::clear_target_id() {
  target_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommandAttack::_internal_target_id() const {
  return target_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommandAttack::target_id() const {
  // @@protoc_insertion_point(field_get:IronGames.CommandAttack.target_id)
  return _internal_target_id();
}
inline void CommandAttack::_internal_set_target_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  target_id_ = value;
}
inline void CommandAttack::set_target_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_target_id(value);
  // @@protoc_insertion_point(field_set:IronGames.CommandAttack.target_id)
}

// -------------------------------------------------------------------

// CommandAttackMove

// int32 unit_id = 1;
inline void CommandAttackMove::clear_unit_id() {
  unit_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommandAttackMove::_internal_unit_id() const {
  return unit_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommandAttackMove::unit_id() const {
  // @@protoc_insertion_point(field_get:IronGames.CommandAttackMove.unit_id)
  return _internal_unit_id();
}
inline void CommandAttackMove::_internal_set_unit_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  unit_id_ = value;
}
inline void CommandAttackMove::set_unit_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_unit_id(value);
  // @@protoc_insertion_point(field_set:IronGames.CommandAttackMove.unit_id)
}

// .IronGames.Vector3 destination = 2;
inline bool CommandAttackMove::_internal_has_destination() const {
  return this != internal_default_instance() && destination_ != nullptr;
}
inline bool CommandAttackMove::has_destination() const {
  return _internal_has_destination();
}
inline void CommandAttackMove::clear_destination() {
  if (GetArena() == nullptr && destination_ != nullptr) {
    delete destination_;
  }
  destination_ = nullptr;
}
inline const ::IronGames::Vector3& CommandAttackMove::_internal_destination() const {
  const ::IronGames::Vector3* p = destination_;
  return p != nullptr ? *p : reinterpret_cast<const ::IronGames::Vector3&>(
      ::IronGames::_Vector3_default_instance_);
}
inline const ::IronGames::Vector3& CommandAttackMove::destination() const {
  // @@protoc_insertion_point(field_get:IronGames.CommandAttackMove.destination)
  return _internal_destination();
}
inline void CommandAttackMove::unsafe_arena_set_allocated_destination(
    ::IronGames::Vector3* destination) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(destination_);
  }
  destination_ = destination;
  if (destination) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IronGames.CommandAttackMove.destination)
}
inline ::IronGames::Vector3* CommandAttackMove::release_destination() {
  
  ::IronGames::Vector3* temp = destination_;
  destination_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::IronGames::Vector3* CommandAttackMove::unsafe_arena_release_destination() {
  // @@protoc_insertion_point(field_release:IronGames.CommandAttackMove.destination)
  
  ::IronGames::Vector3* temp = destination_;
  destination_ = nullptr;
  return temp;
}
inline ::IronGames::Vector3* CommandAttackMove::_internal_mutable_destination() {
  
  if (destination_ == nullptr) {
    auto* p = CreateMaybeMessage<::IronGames::Vector3>(GetArena());
    destination_ = p;
  }
  return destination_;
}
inline ::IronGames::Vector3* CommandAttackMove::mutable_destination() {
  // @@protoc_insertion_point(field_mutable:IronGames.CommandAttackMove.destination)
  return _internal_mutable_destination();
}
inline void CommandAttackMove::set_allocated_destination(::IronGames::Vector3* destination) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete destination_;
  }
  if (destination) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(destination);
    if (message_arena != submessage_arena) {
      destination = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, destination, submessage_arena);
    }
    
  } else {
    
  }
  destination_ = destination;
  // @@protoc_insertion_point(field_set_allocated:IronGames.CommandAttackMove.destination)
}

// -------------------------------------------------------------------

// EventUnitCommand

// .IronGames.CommandMove move = 1;
inline bool EventUnitCommand::_internal_has_move() const {
  return command_case() == kMove;
}
inline bool EventUnitCommand::has_move() const {
  return _internal_has_move();
}
inline void EventUnitCommand::set_has_move() {
  _oneof_case_[0] = kMove;
}
inline void EventUnitCommand::clear_move() {
  if (_internal_has_move()) {
    if (GetArena() == nullptr) {
      delete command_.move_;
    }
    clear_has_command();
  }
}
inline ::IronGames::CommandMove* EventUnitCommand::release_move() {
  // @@protoc_insertion_point(field_release:IronGames.EventUnitCommand.move)
  if (_internal_has_move()) {
    clear_has_command();
      ::IronGames::CommandMove* temp = command_.move_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.move_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::IronGames::CommandMove& EventUnitCommand::_internal_move() const {
  return _internal_has_move()
      ? *command_.move_
      : reinterpret_cast< ::IronGames::CommandMove&>(::IronGames::_CommandMove_default_instance_);
}
inline const ::IronGames::CommandMove& EventUnitCommand::move() const {
  // @@protoc_insertion_point(field_get:IronGames.EventUnitCommand.move)
  return _internal_move();
}
inline ::IronGames::CommandMove* EventUnitCommand::unsafe_arena_release_move() {
  // @@protoc_insertion_point(field_unsafe_arena_release:IronGames.EventUnitCommand.move)
  if (_internal_has_move()) {
    clear_has_command();
    ::IronGames::CommandMove* temp = command_.move_;
    command_.move_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EventUnitCommand::unsafe_arena_set_allocated_move(::IronGames::CommandMove* move) {
  clear_command();
  if (move) {
    set_has_move();
    command_.move_ = move;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IronGames.EventUnitCommand.move)
}
inline ::IronGames::CommandMove* EventUnitCommand::_internal_mutable_move() {
  if (!_internal_has_move()) {
    clear_command();
    set_has_move();
    command_.move_ = CreateMaybeMessage< ::IronGames::CommandMove >(GetArena());
  }
  return command_.move_;
}
inline ::IronGames::CommandMove* EventUnitCommand::mutable_move() {
  // @@protoc_insertion_point(field_mutable:IronGames.EventUnitCommand.move)
  return _internal_mutable_move();
}

// .IronGames.CommandAttack attack = 2;
inline bool EventUnitCommand::_internal_has_attack() const {
  return command_case() == kAttack;
}
inline bool EventUnitCommand::has_attack() const {
  return _internal_has_attack();
}
inline void EventUnitCommand::set_has_attack() {
  _oneof_case_[0] = kAttack;
}
inline void EventUnitCommand::clear_attack() {
  if (_internal_has_attack()) {
    if (GetArena() == nullptr) {
      delete command_.attack_;
    }
    clear_has_command();
  }
}
inline ::IronGames::CommandAttack* EventUnitCommand::release_attack() {
  // @@protoc_insertion_point(field_release:IronGames.EventUnitCommand.attack)
  if (_internal_has_attack()) {
    clear_has_command();
      ::IronGames::CommandAttack* temp = command_.attack_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.attack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::IronGames::CommandAttack& EventUnitCommand::_internal_attack() const {
  return _internal_has_attack()
      ? *command_.attack_
      : reinterpret_cast< ::IronGames::CommandAttack&>(::IronGames::_CommandAttack_default_instance_);
}
inline const ::IronGames::CommandAttack& EventUnitCommand::attack() const {
  // @@protoc_insertion_point(field_get:IronGames.EventUnitCommand.attack)
  return _internal_attack();
}
inline ::IronGames::CommandAttack* EventUnitCommand::unsafe_arena_release_attack() {
  // @@protoc_insertion_point(field_unsafe_arena_release:IronGames.EventUnitCommand.attack)
  if (_internal_has_attack()) {
    clear_has_command();
    ::IronGames::CommandAttack* temp = command_.attack_;
    command_.attack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EventUnitCommand::unsafe_arena_set_allocated_attack(::IronGames::CommandAttack* attack) {
  clear_command();
  if (attack) {
    set_has_attack();
    command_.attack_ = attack;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IronGames.EventUnitCommand.attack)
}
inline ::IronGames::CommandAttack* EventUnitCommand::_internal_mutable_attack() {
  if (!_internal_has_attack()) {
    clear_command();
    set_has_attack();
    command_.attack_ = CreateMaybeMessage< ::IronGames::CommandAttack >(GetArena());
  }
  return command_.attack_;
}
inline ::IronGames::CommandAttack* EventUnitCommand::mutable_attack() {
  // @@protoc_insertion_point(field_mutable:IronGames.EventUnitCommand.attack)
  return _internal_mutable_attack();
}

// .IronGames.CommandAttackMove attack_move = 3;
inline bool EventUnitCommand::_internal_has_attack_move() const {
  return command_case() == kAttackMove;
}
inline bool EventUnitCommand::has_attack_move() const {
  return _internal_has_attack_move();
}
inline void EventUnitCommand::set_has_attack_move() {
  _oneof_case_[0] = kAttackMove;
}
inline void EventUnitCommand::clear_attack_move() {
  if (_internal_has_attack_move()) {
    if (GetArena() == nullptr) {
      delete command_.attack_move_;
    }
    clear_has_command();
  }
}
inline ::IronGames::CommandAttackMove* EventUnitCommand::release_attack_move() {
  // @@protoc_insertion_point(field_release:IronGames.EventUnitCommand.attack_move)
  if (_internal_has_attack_move()) {
    clear_has_command();
      ::IronGames::CommandAttackMove* temp = command_.attack_move_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    command_.attack_move_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::IronGames::CommandAttackMove& EventUnitCommand::_internal_attack_move() const {
  return _internal_has_attack_move()
      ? *command_.attack_move_
      : reinterpret_cast< ::IronGames::CommandAttackMove&>(::IronGames::_CommandAttackMove_default_instance_);
}
inline const ::IronGames::CommandAttackMove& EventUnitCommand::attack_move() const {
  // @@protoc_insertion_point(field_get:IronGames.EventUnitCommand.attack_move)
  return _internal_attack_move();
}
inline ::IronGames::CommandAttackMove* EventUnitCommand::unsafe_arena_release_attack_move() {
  // @@protoc_insertion_point(field_unsafe_arena_release:IronGames.EventUnitCommand.attack_move)
  if (_internal_has_attack_move()) {
    clear_has_command();
    ::IronGames::CommandAttackMove* temp = command_.attack_move_;
    command_.attack_move_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void EventUnitCommand::unsafe_arena_set_allocated_attack_move(::IronGames::CommandAttackMove* attack_move) {
  clear_command();
  if (attack_move) {
    set_has_attack_move();
    command_.attack_move_ = attack_move;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IronGames.EventUnitCommand.attack_move)
}
inline ::IronGames::CommandAttackMove* EventUnitCommand::_internal_mutable_attack_move() {
  if (!_internal_has_attack_move()) {
    clear_command();
    set_has_attack_move();
    command_.attack_move_ = CreateMaybeMessage< ::IronGames::CommandAttackMove >(GetArena());
  }
  return command_.attack_move_;
}
inline ::IronGames::CommandAttackMove* EventUnitCommand::mutable_attack_move() {
  // @@protoc_insertion_point(field_mutable:IronGames.EventUnitCommand.attack_move)
  return _internal_mutable_attack_move();
}

inline bool EventUnitCommand::has_command() const {
  return command_case() != COMMAND_NOT_SET;
}
inline void EventUnitCommand::clear_has_command() {
  _oneof_case_[0] = COMMAND_NOT_SET;
}
inline EventUnitCommand::CommandCase EventUnitCommand::command_case() const {
  return EventUnitCommand::CommandCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// EventPlayerReadyToStartGame

// -------------------------------------------------------------------

// EventGameStart

// -------------------------------------------------------------------

// EventAllPlayersReadyForGameToStart

// -------------------------------------------------------------------

// EventPlayerLoadedGame

// -------------------------------------------------------------------

// EventPlayerLoadedTile

// .IronGames.Tile tile = 1;
inline bool EventPlayerLoadedTile::_internal_has_tile() const {
  return this != internal_default_instance() && tile_ != nullptr;
}
inline bool EventPlayerLoadedTile::has_tile() const {
  return _internal_has_tile();
}
inline void EventPlayerLoadedTile::clear_tile() {
  if (GetArena() == nullptr && tile_ != nullptr) {
    delete tile_;
  }
  tile_ = nullptr;
}
inline const ::IronGames::Tile& EventPlayerLoadedTile::_internal_tile() const {
  const ::IronGames::Tile* p = tile_;
  return p != nullptr ? *p : reinterpret_cast<const ::IronGames::Tile&>(
      ::IronGames::_Tile_default_instance_);
}
inline const ::IronGames::Tile& EventPlayerLoadedTile::tile() const {
  // @@protoc_insertion_point(field_get:IronGames.EventPlayerLoadedTile.tile)
  return _internal_tile();
}
inline void EventPlayerLoadedTile::unsafe_arena_set_allocated_tile(
    ::IronGames::Tile* tile) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tile_);
  }
  tile_ = tile;
  if (tile) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IronGames.EventPlayerLoadedTile.tile)
}
inline ::IronGames::Tile* EventPlayerLoadedTile::release_tile() {
  
  ::IronGames::Tile* temp = tile_;
  tile_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::IronGames::Tile* EventPlayerLoadedTile::unsafe_arena_release_tile() {
  // @@protoc_insertion_point(field_release:IronGames.EventPlayerLoadedTile.tile)
  
  ::IronGames::Tile* temp = tile_;
  tile_ = nullptr;
  return temp;
}
inline ::IronGames::Tile* EventPlayerLoadedTile::_internal_mutable_tile() {
  
  if (tile_ == nullptr) {
    auto* p = CreateMaybeMessage<::IronGames::Tile>(GetArena());
    tile_ = p;
  }
  return tile_;
}
inline ::IronGames::Tile* EventPlayerLoadedTile::mutable_tile() {
  // @@protoc_insertion_point(field_mutable:IronGames.EventPlayerLoadedTile.tile)
  return _internal_mutable_tile();
}
inline void EventPlayerLoadedTile::set_allocated_tile(::IronGames::Tile* tile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tile_;
  }
  if (tile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tile);
    if (message_arena != submessage_arena) {
      tile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tile, submessage_arena);
    }
    
  } else {
    
  }
  tile_ = tile;
  // @@protoc_insertion_point(field_set_allocated:IronGames.EventPlayerLoadedTile.tile)
}

// -------------------------------------------------------------------

// Event

// int64 time = 1;
inline void Event::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Event::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Event::time() const {
  // @@protoc_insertion_point(field_get:IronGames.Event.time)
  return _internal_time();
}
inline void Event::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_ = value;
}
inline void Event::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:IronGames.Event.time)
}

// int32 sender_id = 2;
inline void Event::clear_sender_id() {
  sender_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Event::_internal_sender_id() const {
  return sender_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Event::sender_id() const {
  // @@protoc_insertion_point(field_get:IronGames.Event.sender_id)
  return _internal_sender_id();
}
inline void Event::_internal_set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sender_id_ = value;
}
inline void Event::set_sender_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sender_id(value);
  // @@protoc_insertion_point(field_set:IronGames.Event.sender_id)
}

// .IronGames.EventPlayerConnected player_connected = 3;
inline bool Event::_internal_has_player_connected() const {
  return event_case() == kPlayerConnected;
}
inline bool Event::has_player_connected() const {
  return _internal_has_player_connected();
}
inline void Event::set_has_player_connected() {
  _oneof_case_[0] = kPlayerConnected;
}
inline void Event::clear_player_connected() {
  if (_internal_has_player_connected()) {
    if (GetArena() == nullptr) {
      delete event_.player_connected_;
    }
    clear_has_event();
  }
}
inline ::IronGames::EventPlayerConnected* Event::release_player_connected() {
  // @@protoc_insertion_point(field_release:IronGames.Event.player_connected)
  if (_internal_has_player_connected()) {
    clear_has_event();
      ::IronGames::EventPlayerConnected* temp = event_.player_connected_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.player_connected_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::IronGames::EventPlayerConnected& Event::_internal_player_connected() const {
  return _internal_has_player_connected()
      ? *event_.player_connected_
      : reinterpret_cast< ::IronGames::EventPlayerConnected&>(::IronGames::_EventPlayerConnected_default_instance_);
}
inline const ::IronGames::EventPlayerConnected& Event::player_connected() const {
  // @@protoc_insertion_point(field_get:IronGames.Event.player_connected)
  return _internal_player_connected();
}
inline ::IronGames::EventPlayerConnected* Event::unsafe_arena_release_player_connected() {
  // @@protoc_insertion_point(field_unsafe_arena_release:IronGames.Event.player_connected)
  if (_internal_has_player_connected()) {
    clear_has_event();
    ::IronGames::EventPlayerConnected* temp = event_.player_connected_;
    event_.player_connected_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_player_connected(::IronGames::EventPlayerConnected* player_connected) {
  clear_event();
  if (player_connected) {
    set_has_player_connected();
    event_.player_connected_ = player_connected;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IronGames.Event.player_connected)
}
inline ::IronGames::EventPlayerConnected* Event::_internal_mutable_player_connected() {
  if (!_internal_has_player_connected()) {
    clear_event();
    set_has_player_connected();
    event_.player_connected_ = CreateMaybeMessage< ::IronGames::EventPlayerConnected >(GetArena());
  }
  return event_.player_connected_;
}
inline ::IronGames::EventPlayerConnected* Event::mutable_player_connected() {
  // @@protoc_insertion_point(field_mutable:IronGames.Event.player_connected)
  return _internal_mutable_player_connected();
}

// .IronGames.EventPlayerDisconnected player_disconnected = 4;
inline bool Event::_internal_has_player_disconnected() const {
  return event_case() == kPlayerDisconnected;
}
inline bool Event::has_player_disconnected() const {
  return _internal_has_player_disconnected();
}
inline void Event::set_has_player_disconnected() {
  _oneof_case_[0] = kPlayerDisconnected;
}
inline void Event::clear_player_disconnected() {
  if (_internal_has_player_disconnected()) {
    if (GetArena() == nullptr) {
      delete event_.player_disconnected_;
    }
    clear_has_event();
  }
}
inline ::IronGames::EventPlayerDisconnected* Event::release_player_disconnected() {
  // @@protoc_insertion_point(field_release:IronGames.Event.player_disconnected)
  if (_internal_has_player_disconnected()) {
    clear_has_event();
      ::IronGames::EventPlayerDisconnected* temp = event_.player_disconnected_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.player_disconnected_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::IronGames::EventPlayerDisconnected& Event::_internal_player_disconnected() const {
  return _internal_has_player_disconnected()
      ? *event_.player_disconnected_
      : reinterpret_cast< ::IronGames::EventPlayerDisconnected&>(::IronGames::_EventPlayerDisconnected_default_instance_);
}
inline const ::IronGames::EventPlayerDisconnected& Event::player_disconnected() const {
  // @@protoc_insertion_point(field_get:IronGames.Event.player_disconnected)
  return _internal_player_disconnected();
}
inline ::IronGames::EventPlayerDisconnected* Event::unsafe_arena_release_player_disconnected() {
  // @@protoc_insertion_point(field_unsafe_arena_release:IronGames.Event.player_disconnected)
  if (_internal_has_player_disconnected()) {
    clear_has_event();
    ::IronGames::EventPlayerDisconnected* temp = event_.player_disconnected_;
    event_.player_disconnected_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_player_disconnected(::IronGames::EventPlayerDisconnected* player_disconnected) {
  clear_event();
  if (player_disconnected) {
    set_has_player_disconnected();
    event_.player_disconnected_ = player_disconnected;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IronGames.Event.player_disconnected)
}
inline ::IronGames::EventPlayerDisconnected* Event::_internal_mutable_player_disconnected() {
  if (!_internal_has_player_disconnected()) {
    clear_event();
    set_has_player_disconnected();
    event_.player_disconnected_ = CreateMaybeMessage< ::IronGames::EventPlayerDisconnected >(GetArena());
  }
  return event_.player_disconnected_;
}
inline ::IronGames::EventPlayerDisconnected* Event::mutable_player_disconnected() {
  // @@protoc_insertion_point(field_mutable:IronGames.Event.player_disconnected)
  return _internal_mutable_player_disconnected();
}

// .IronGames.EventUnitCreation unit_creation = 5;
inline bool Event::_internal_has_unit_creation() const {
  return event_case() == kUnitCreation;
}
inline bool Event::has_unit_creation() const {
  return _internal_has_unit_creation();
}
inline void Event::set_has_unit_creation() {
  _oneof_case_[0] = kUnitCreation;
}
inline void Event::clear_unit_creation() {
  if (_internal_has_unit_creation()) {
    if (GetArena() == nullptr) {
      delete event_.unit_creation_;
    }
    clear_has_event();
  }
}
inline ::IronGames::EventUnitCreation* Event::release_unit_creation() {
  // @@protoc_insertion_point(field_release:IronGames.Event.unit_creation)
  if (_internal_has_unit_creation()) {
    clear_has_event();
      ::IronGames::EventUnitCreation* temp = event_.unit_creation_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.unit_creation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::IronGames::EventUnitCreation& Event::_internal_unit_creation() const {
  return _internal_has_unit_creation()
      ? *event_.unit_creation_
      : reinterpret_cast< ::IronGames::EventUnitCreation&>(::IronGames::_EventUnitCreation_default_instance_);
}
inline const ::IronGames::EventUnitCreation& Event::unit_creation() const {
  // @@protoc_insertion_point(field_get:IronGames.Event.unit_creation)
  return _internal_unit_creation();
}
inline ::IronGames::EventUnitCreation* Event::unsafe_arena_release_unit_creation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:IronGames.Event.unit_creation)
  if (_internal_has_unit_creation()) {
    clear_has_event();
    ::IronGames::EventUnitCreation* temp = event_.unit_creation_;
    event_.unit_creation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_unit_creation(::IronGames::EventUnitCreation* unit_creation) {
  clear_event();
  if (unit_creation) {
    set_has_unit_creation();
    event_.unit_creation_ = unit_creation;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IronGames.Event.unit_creation)
}
inline ::IronGames::EventUnitCreation* Event::_internal_mutable_unit_creation() {
  if (!_internal_has_unit_creation()) {
    clear_event();
    set_has_unit_creation();
    event_.unit_creation_ = CreateMaybeMessage< ::IronGames::EventUnitCreation >(GetArena());
  }
  return event_.unit_creation_;
}
inline ::IronGames::EventUnitCreation* Event::mutable_unit_creation() {
  // @@protoc_insertion_point(field_mutable:IronGames.Event.unit_creation)
  return _internal_mutable_unit_creation();
}

// .IronGames.EventActorCreationRequest actor_creation_request = 6;
inline bool Event::_internal_has_actor_creation_request() const {
  return event_case() == kActorCreationRequest;
}
inline bool Event::has_actor_creation_request() const {
  return _internal_has_actor_creation_request();
}
inline void Event::set_has_actor_creation_request() {
  _oneof_case_[0] = kActorCreationRequest;
}
inline void Event::clear_actor_creation_request() {
  if (_internal_has_actor_creation_request()) {
    if (GetArena() == nullptr) {
      delete event_.actor_creation_request_;
    }
    clear_has_event();
  }
}
inline ::IronGames::EventActorCreationRequest* Event::release_actor_creation_request() {
  // @@protoc_insertion_point(field_release:IronGames.Event.actor_creation_request)
  if (_internal_has_actor_creation_request()) {
    clear_has_event();
      ::IronGames::EventActorCreationRequest* temp = event_.actor_creation_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.actor_creation_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::IronGames::EventActorCreationRequest& Event::_internal_actor_creation_request() const {
  return _internal_has_actor_creation_request()
      ? *event_.actor_creation_request_
      : reinterpret_cast< ::IronGames::EventActorCreationRequest&>(::IronGames::_EventActorCreationRequest_default_instance_);
}
inline const ::IronGames::EventActorCreationRequest& Event::actor_creation_request() const {
  // @@protoc_insertion_point(field_get:IronGames.Event.actor_creation_request)
  return _internal_actor_creation_request();
}
inline ::IronGames::EventActorCreationRequest* Event::unsafe_arena_release_actor_creation_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:IronGames.Event.actor_creation_request)
  if (_internal_has_actor_creation_request()) {
    clear_has_event();
    ::IronGames::EventActorCreationRequest* temp = event_.actor_creation_request_;
    event_.actor_creation_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_actor_creation_request(::IronGames::EventActorCreationRequest* actor_creation_request) {
  clear_event();
  if (actor_creation_request) {
    set_has_actor_creation_request();
    event_.actor_creation_request_ = actor_creation_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IronGames.Event.actor_creation_request)
}
inline ::IronGames::EventActorCreationRequest* Event::_internal_mutable_actor_creation_request() {
  if (!_internal_has_actor_creation_request()) {
    clear_event();
    set_has_actor_creation_request();
    event_.actor_creation_request_ = CreateMaybeMessage< ::IronGames::EventActorCreationRequest >(GetArena());
  }
  return event_.actor_creation_request_;
}
inline ::IronGames::EventActorCreationRequest* Event::mutable_actor_creation_request() {
  // @@protoc_insertion_point(field_mutable:IronGames.Event.actor_creation_request)
  return _internal_mutable_actor_creation_request();
}

// .IronGames.EventUnitDestruction unit_destruction = 7;
inline bool Event::_internal_has_unit_destruction() const {
  return event_case() == kUnitDestruction;
}
inline bool Event::has_unit_destruction() const {
  return _internal_has_unit_destruction();
}
inline void Event::set_has_unit_destruction() {
  _oneof_case_[0] = kUnitDestruction;
}
inline void Event::clear_unit_destruction() {
  if (_internal_has_unit_destruction()) {
    if (GetArena() == nullptr) {
      delete event_.unit_destruction_;
    }
    clear_has_event();
  }
}
inline ::IronGames::EventUnitDestruction* Event::release_unit_destruction() {
  // @@protoc_insertion_point(field_release:IronGames.Event.unit_destruction)
  if (_internal_has_unit_destruction()) {
    clear_has_event();
      ::IronGames::EventUnitDestruction* temp = event_.unit_destruction_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.unit_destruction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::IronGames::EventUnitDestruction& Event::_internal_unit_destruction() const {
  return _internal_has_unit_destruction()
      ? *event_.unit_destruction_
      : reinterpret_cast< ::IronGames::EventUnitDestruction&>(::IronGames::_EventUnitDestruction_default_instance_);
}
inline const ::IronGames::EventUnitDestruction& Event::unit_destruction() const {
  // @@protoc_insertion_point(field_get:IronGames.Event.unit_destruction)
  return _internal_unit_destruction();
}
inline ::IronGames::EventUnitDestruction* Event::unsafe_arena_release_unit_destruction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:IronGames.Event.unit_destruction)
  if (_internal_has_unit_destruction()) {
    clear_has_event();
    ::IronGames::EventUnitDestruction* temp = event_.unit_destruction_;
    event_.unit_destruction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_unit_destruction(::IronGames::EventUnitDestruction* unit_destruction) {
  clear_event();
  if (unit_destruction) {
    set_has_unit_destruction();
    event_.unit_destruction_ = unit_destruction;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IronGames.Event.unit_destruction)
}
inline ::IronGames::EventUnitDestruction* Event::_internal_mutable_unit_destruction() {
  if (!_internal_has_unit_destruction()) {
    clear_event();
    set_has_unit_destruction();
    event_.unit_destruction_ = CreateMaybeMessage< ::IronGames::EventUnitDestruction >(GetArena());
  }
  return event_.unit_destruction_;
}
inline ::IronGames::EventUnitDestruction* Event::mutable_unit_destruction() {
  // @@protoc_insertion_point(field_mutable:IronGames.Event.unit_destruction)
  return _internal_mutable_unit_destruction();
}

// .IronGames.EventBuildingCreation building_creation = 8;
inline bool Event::_internal_has_building_creation() const {
  return event_case() == kBuildingCreation;
}
inline bool Event::has_building_creation() const {
  return _internal_has_building_creation();
}
inline void Event::set_has_building_creation() {
  _oneof_case_[0] = kBuildingCreation;
}
inline void Event::clear_building_creation() {
  if (_internal_has_building_creation()) {
    if (GetArena() == nullptr) {
      delete event_.building_creation_;
    }
    clear_has_event();
  }
}
inline ::IronGames::EventBuildingCreation* Event::release_building_creation() {
  // @@protoc_insertion_point(field_release:IronGames.Event.building_creation)
  if (_internal_has_building_creation()) {
    clear_has_event();
      ::IronGames::EventBuildingCreation* temp = event_.building_creation_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.building_creation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::IronGames::EventBuildingCreation& Event::_internal_building_creation() const {
  return _internal_has_building_creation()
      ? *event_.building_creation_
      : reinterpret_cast< ::IronGames::EventBuildingCreation&>(::IronGames::_EventBuildingCreation_default_instance_);
}
inline const ::IronGames::EventBuildingCreation& Event::building_creation() const {
  // @@protoc_insertion_point(field_get:IronGames.Event.building_creation)
  return _internal_building_creation();
}
inline ::IronGames::EventBuildingCreation* Event::unsafe_arena_release_building_creation() {
  // @@protoc_insertion_point(field_unsafe_arena_release:IronGames.Event.building_creation)
  if (_internal_has_building_creation()) {
    clear_has_event();
    ::IronGames::EventBuildingCreation* temp = event_.building_creation_;
    event_.building_creation_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_building_creation(::IronGames::EventBuildingCreation* building_creation) {
  clear_event();
  if (building_creation) {
    set_has_building_creation();
    event_.building_creation_ = building_creation;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IronGames.Event.building_creation)
}
inline ::IronGames::EventBuildingCreation* Event::_internal_mutable_building_creation() {
  if (!_internal_has_building_creation()) {
    clear_event();
    set_has_building_creation();
    event_.building_creation_ = CreateMaybeMessage< ::IronGames::EventBuildingCreation >(GetArena());
  }
  return event_.building_creation_;
}
inline ::IronGames::EventBuildingCreation* Event::mutable_building_creation() {
  // @@protoc_insertion_point(field_mutable:IronGames.Event.building_creation)
  return _internal_mutable_building_creation();
}

// .IronGames.EventBuildingDestruction building_destruction = 9;
inline bool Event::_internal_has_building_destruction() const {
  return event_case() == kBuildingDestruction;
}
inline bool Event::has_building_destruction() const {
  return _internal_has_building_destruction();
}
inline void Event::set_has_building_destruction() {
  _oneof_case_[0] = kBuildingDestruction;
}
inline void Event::clear_building_destruction() {
  if (_internal_has_building_destruction()) {
    if (GetArena() == nullptr) {
      delete event_.building_destruction_;
    }
    clear_has_event();
  }
}
inline ::IronGames::EventBuildingDestruction* Event::release_building_destruction() {
  // @@protoc_insertion_point(field_release:IronGames.Event.building_destruction)
  if (_internal_has_building_destruction()) {
    clear_has_event();
      ::IronGames::EventBuildingDestruction* temp = event_.building_destruction_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.building_destruction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::IronGames::EventBuildingDestruction& Event::_internal_building_destruction() const {
  return _internal_has_building_destruction()
      ? *event_.building_destruction_
      : reinterpret_cast< ::IronGames::EventBuildingDestruction&>(::IronGames::_EventBuildingDestruction_default_instance_);
}
inline const ::IronGames::EventBuildingDestruction& Event::building_destruction() const {
  // @@protoc_insertion_point(field_get:IronGames.Event.building_destruction)
  return _internal_building_destruction();
}
inline ::IronGames::EventBuildingDestruction* Event::unsafe_arena_release_building_destruction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:IronGames.Event.building_destruction)
  if (_internal_has_building_destruction()) {
    clear_has_event();
    ::IronGames::EventBuildingDestruction* temp = event_.building_destruction_;
    event_.building_destruction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_building_destruction(::IronGames::EventBuildingDestruction* building_destruction) {
  clear_event();
  if (building_destruction) {
    set_has_building_destruction();
    event_.building_destruction_ = building_destruction;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IronGames.Event.building_destruction)
}
inline ::IronGames::EventBuildingDestruction* Event::_internal_mutable_building_destruction() {
  if (!_internal_has_building_destruction()) {
    clear_event();
    set_has_building_destruction();
    event_.building_destruction_ = CreateMaybeMessage< ::IronGames::EventBuildingDestruction >(GetArena());
  }
  return event_.building_destruction_;
}
inline ::IronGames::EventBuildingDestruction* Event::mutable_building_destruction() {
  // @@protoc_insertion_point(field_mutable:IronGames.Event.building_destruction)
  return _internal_mutable_building_destruction();
}

// .IronGames.EventUnitCommand unit_command = 10;
inline bool Event::_internal_has_unit_command() const {
  return event_case() == kUnitCommand;
}
inline bool Event::has_unit_command() const {
  return _internal_has_unit_command();
}
inline void Event::set_has_unit_command() {
  _oneof_case_[0] = kUnitCommand;
}
inline void Event::clear_unit_command() {
  if (_internal_has_unit_command()) {
    if (GetArena() == nullptr) {
      delete event_.unit_command_;
    }
    clear_has_event();
  }
}
inline ::IronGames::EventUnitCommand* Event::release_unit_command() {
  // @@protoc_insertion_point(field_release:IronGames.Event.unit_command)
  if (_internal_has_unit_command()) {
    clear_has_event();
      ::IronGames::EventUnitCommand* temp = event_.unit_command_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.unit_command_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::IronGames::EventUnitCommand& Event::_internal_unit_command() const {
  return _internal_has_unit_command()
      ? *event_.unit_command_
      : reinterpret_cast< ::IronGames::EventUnitCommand&>(::IronGames::_EventUnitCommand_default_instance_);
}
inline const ::IronGames::EventUnitCommand& Event::unit_command() const {
  // @@protoc_insertion_point(field_get:IronGames.Event.unit_command)
  return _internal_unit_command();
}
inline ::IronGames::EventUnitCommand* Event::unsafe_arena_release_unit_command() {
  // @@protoc_insertion_point(field_unsafe_arena_release:IronGames.Event.unit_command)
  if (_internal_has_unit_command()) {
    clear_has_event();
    ::IronGames::EventUnitCommand* temp = event_.unit_command_;
    event_.unit_command_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_unit_command(::IronGames::EventUnitCommand* unit_command) {
  clear_event();
  if (unit_command) {
    set_has_unit_command();
    event_.unit_command_ = unit_command;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IronGames.Event.unit_command)
}
inline ::IronGames::EventUnitCommand* Event::_internal_mutable_unit_command() {
  if (!_internal_has_unit_command()) {
    clear_event();
    set_has_unit_command();
    event_.unit_command_ = CreateMaybeMessage< ::IronGames::EventUnitCommand >(GetArena());
  }
  return event_.unit_command_;
}
inline ::IronGames::EventUnitCommand* Event::mutable_unit_command() {
  // @@protoc_insertion_point(field_mutable:IronGames.Event.unit_command)
  return _internal_mutable_unit_command();
}

// .IronGames.EventPlayerReadyToStartGame player_ready_to_start_Game = 11;
inline bool Event::_internal_has_player_ready_to_start_game() const {
  return event_case() == kPlayerReadyToStartGame;
}
inline bool Event::has_player_ready_to_start_game() const {
  return _internal_has_player_ready_to_start_game();
}
inline void Event::set_has_player_ready_to_start_game() {
  _oneof_case_[0] = kPlayerReadyToStartGame;
}
inline void Event::clear_player_ready_to_start_game() {
  if (_internal_has_player_ready_to_start_game()) {
    if (GetArena() == nullptr) {
      delete event_.player_ready_to_start_game_;
    }
    clear_has_event();
  }
}
inline ::IronGames::EventPlayerReadyToStartGame* Event::release_player_ready_to_start_game() {
  // @@protoc_insertion_point(field_release:IronGames.Event.player_ready_to_start_Game)
  if (_internal_has_player_ready_to_start_game()) {
    clear_has_event();
      ::IronGames::EventPlayerReadyToStartGame* temp = event_.player_ready_to_start_game_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.player_ready_to_start_game_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::IronGames::EventPlayerReadyToStartGame& Event::_internal_player_ready_to_start_game() const {
  return _internal_has_player_ready_to_start_game()
      ? *event_.player_ready_to_start_game_
      : reinterpret_cast< ::IronGames::EventPlayerReadyToStartGame&>(::IronGames::_EventPlayerReadyToStartGame_default_instance_);
}
inline const ::IronGames::EventPlayerReadyToStartGame& Event::player_ready_to_start_game() const {
  // @@protoc_insertion_point(field_get:IronGames.Event.player_ready_to_start_Game)
  return _internal_player_ready_to_start_game();
}
inline ::IronGames::EventPlayerReadyToStartGame* Event::unsafe_arena_release_player_ready_to_start_game() {
  // @@protoc_insertion_point(field_unsafe_arena_release:IronGames.Event.player_ready_to_start_Game)
  if (_internal_has_player_ready_to_start_game()) {
    clear_has_event();
    ::IronGames::EventPlayerReadyToStartGame* temp = event_.player_ready_to_start_game_;
    event_.player_ready_to_start_game_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_player_ready_to_start_game(::IronGames::EventPlayerReadyToStartGame* player_ready_to_start_game) {
  clear_event();
  if (player_ready_to_start_game) {
    set_has_player_ready_to_start_game();
    event_.player_ready_to_start_game_ = player_ready_to_start_game;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IronGames.Event.player_ready_to_start_Game)
}
inline ::IronGames::EventPlayerReadyToStartGame* Event::_internal_mutable_player_ready_to_start_game() {
  if (!_internal_has_player_ready_to_start_game()) {
    clear_event();
    set_has_player_ready_to_start_game();
    event_.player_ready_to_start_game_ = CreateMaybeMessage< ::IronGames::EventPlayerReadyToStartGame >(GetArena());
  }
  return event_.player_ready_to_start_game_;
}
inline ::IronGames::EventPlayerReadyToStartGame* Event::mutable_player_ready_to_start_game() {
  // @@protoc_insertion_point(field_mutable:IronGames.Event.player_ready_to_start_Game)
  return _internal_mutable_player_ready_to_start_game();
}

// .IronGames.EventGameStart game_start = 12;
inline bool Event::_internal_has_game_start() const {
  return event_case() == kGameStart;
}
inline bool Event::has_game_start() const {
  return _internal_has_game_start();
}
inline void Event::set_has_game_start() {
  _oneof_case_[0] = kGameStart;
}
inline void Event::clear_game_start() {
  if (_internal_has_game_start()) {
    if (GetArena() == nullptr) {
      delete event_.game_start_;
    }
    clear_has_event();
  }
}
inline ::IronGames::EventGameStart* Event::release_game_start() {
  // @@protoc_insertion_point(field_release:IronGames.Event.game_start)
  if (_internal_has_game_start()) {
    clear_has_event();
      ::IronGames::EventGameStart* temp = event_.game_start_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.game_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::IronGames::EventGameStart& Event::_internal_game_start() const {
  return _internal_has_game_start()
      ? *event_.game_start_
      : reinterpret_cast< ::IronGames::EventGameStart&>(::IronGames::_EventGameStart_default_instance_);
}
inline const ::IronGames::EventGameStart& Event::game_start() const {
  // @@protoc_insertion_point(field_get:IronGames.Event.game_start)
  return _internal_game_start();
}
inline ::IronGames::EventGameStart* Event::unsafe_arena_release_game_start() {
  // @@protoc_insertion_point(field_unsafe_arena_release:IronGames.Event.game_start)
  if (_internal_has_game_start()) {
    clear_has_event();
    ::IronGames::EventGameStart* temp = event_.game_start_;
    event_.game_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_game_start(::IronGames::EventGameStart* game_start) {
  clear_event();
  if (game_start) {
    set_has_game_start();
    event_.game_start_ = game_start;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IronGames.Event.game_start)
}
inline ::IronGames::EventGameStart* Event::_internal_mutable_game_start() {
  if (!_internal_has_game_start()) {
    clear_event();
    set_has_game_start();
    event_.game_start_ = CreateMaybeMessage< ::IronGames::EventGameStart >(GetArena());
  }
  return event_.game_start_;
}
inline ::IronGames::EventGameStart* Event::mutable_game_start() {
  // @@protoc_insertion_point(field_mutable:IronGames.Event.game_start)
  return _internal_mutable_game_start();
}

// .IronGames.EventPlayerChanged player_changed = 13;
inline bool Event::_internal_has_player_changed() const {
  return event_case() == kPlayerChanged;
}
inline bool Event::has_player_changed() const {
  return _internal_has_player_changed();
}
inline void Event::set_has_player_changed() {
  _oneof_case_[0] = kPlayerChanged;
}
inline void Event::clear_player_changed() {
  if (_internal_has_player_changed()) {
    if (GetArena() == nullptr) {
      delete event_.player_changed_;
    }
    clear_has_event();
  }
}
inline ::IronGames::EventPlayerChanged* Event::release_player_changed() {
  // @@protoc_insertion_point(field_release:IronGames.Event.player_changed)
  if (_internal_has_player_changed()) {
    clear_has_event();
      ::IronGames::EventPlayerChanged* temp = event_.player_changed_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.player_changed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::IronGames::EventPlayerChanged& Event::_internal_player_changed() const {
  return _internal_has_player_changed()
      ? *event_.player_changed_
      : reinterpret_cast< ::IronGames::EventPlayerChanged&>(::IronGames::_EventPlayerChanged_default_instance_);
}
inline const ::IronGames::EventPlayerChanged& Event::player_changed() const {
  // @@protoc_insertion_point(field_get:IronGames.Event.player_changed)
  return _internal_player_changed();
}
inline ::IronGames::EventPlayerChanged* Event::unsafe_arena_release_player_changed() {
  // @@protoc_insertion_point(field_unsafe_arena_release:IronGames.Event.player_changed)
  if (_internal_has_player_changed()) {
    clear_has_event();
    ::IronGames::EventPlayerChanged* temp = event_.player_changed_;
    event_.player_changed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_player_changed(::IronGames::EventPlayerChanged* player_changed) {
  clear_event();
  if (player_changed) {
    set_has_player_changed();
    event_.player_changed_ = player_changed;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IronGames.Event.player_changed)
}
inline ::IronGames::EventPlayerChanged* Event::_internal_mutable_player_changed() {
  if (!_internal_has_player_changed()) {
    clear_event();
    set_has_player_changed();
    event_.player_changed_ = CreateMaybeMessage< ::IronGames::EventPlayerChanged >(GetArena());
  }
  return event_.player_changed_;
}
inline ::IronGames::EventPlayerChanged* Event::mutable_player_changed() {
  // @@protoc_insertion_point(field_mutable:IronGames.Event.player_changed)
  return _internal_mutable_player_changed();
}

// .IronGames.EventAllPlayersReadyForGameToStart all_players_ready_for_game_to_start = 14;
inline bool Event::_internal_has_all_players_ready_for_game_to_start() const {
  return event_case() == kAllPlayersReadyForGameToStart;
}
inline bool Event::has_all_players_ready_for_game_to_start() const {
  return _internal_has_all_players_ready_for_game_to_start();
}
inline void Event::set_has_all_players_ready_for_game_to_start() {
  _oneof_case_[0] = kAllPlayersReadyForGameToStart;
}
inline void Event::clear_all_players_ready_for_game_to_start() {
  if (_internal_has_all_players_ready_for_game_to_start()) {
    if (GetArena() == nullptr) {
      delete event_.all_players_ready_for_game_to_start_;
    }
    clear_has_event();
  }
}
inline ::IronGames::EventAllPlayersReadyForGameToStart* Event::release_all_players_ready_for_game_to_start() {
  // @@protoc_insertion_point(field_release:IronGames.Event.all_players_ready_for_game_to_start)
  if (_internal_has_all_players_ready_for_game_to_start()) {
    clear_has_event();
      ::IronGames::EventAllPlayersReadyForGameToStart* temp = event_.all_players_ready_for_game_to_start_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.all_players_ready_for_game_to_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::IronGames::EventAllPlayersReadyForGameToStart& Event::_internal_all_players_ready_for_game_to_start() const {
  return _internal_has_all_players_ready_for_game_to_start()
      ? *event_.all_players_ready_for_game_to_start_
      : reinterpret_cast< ::IronGames::EventAllPlayersReadyForGameToStart&>(::IronGames::_EventAllPlayersReadyForGameToStart_default_instance_);
}
inline const ::IronGames::EventAllPlayersReadyForGameToStart& Event::all_players_ready_for_game_to_start() const {
  // @@protoc_insertion_point(field_get:IronGames.Event.all_players_ready_for_game_to_start)
  return _internal_all_players_ready_for_game_to_start();
}
inline ::IronGames::EventAllPlayersReadyForGameToStart* Event::unsafe_arena_release_all_players_ready_for_game_to_start() {
  // @@protoc_insertion_point(field_unsafe_arena_release:IronGames.Event.all_players_ready_for_game_to_start)
  if (_internal_has_all_players_ready_for_game_to_start()) {
    clear_has_event();
    ::IronGames::EventAllPlayersReadyForGameToStart* temp = event_.all_players_ready_for_game_to_start_;
    event_.all_players_ready_for_game_to_start_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_all_players_ready_for_game_to_start(::IronGames::EventAllPlayersReadyForGameToStart* all_players_ready_for_game_to_start) {
  clear_event();
  if (all_players_ready_for_game_to_start) {
    set_has_all_players_ready_for_game_to_start();
    event_.all_players_ready_for_game_to_start_ = all_players_ready_for_game_to_start;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IronGames.Event.all_players_ready_for_game_to_start)
}
inline ::IronGames::EventAllPlayersReadyForGameToStart* Event::_internal_mutable_all_players_ready_for_game_to_start() {
  if (!_internal_has_all_players_ready_for_game_to_start()) {
    clear_event();
    set_has_all_players_ready_for_game_to_start();
    event_.all_players_ready_for_game_to_start_ = CreateMaybeMessage< ::IronGames::EventAllPlayersReadyForGameToStart >(GetArena());
  }
  return event_.all_players_ready_for_game_to_start_;
}
inline ::IronGames::EventAllPlayersReadyForGameToStart* Event::mutable_all_players_ready_for_game_to_start() {
  // @@protoc_insertion_point(field_mutable:IronGames.Event.all_players_ready_for_game_to_start)
  return _internal_mutable_all_players_ready_for_game_to_start();
}

// .IronGames.EventPlayerLoadedTile player_loaded_tile = 15;
inline bool Event::_internal_has_player_loaded_tile() const {
  return event_case() == kPlayerLoadedTile;
}
inline bool Event::has_player_loaded_tile() const {
  return _internal_has_player_loaded_tile();
}
inline void Event::set_has_player_loaded_tile() {
  _oneof_case_[0] = kPlayerLoadedTile;
}
inline void Event::clear_player_loaded_tile() {
  if (_internal_has_player_loaded_tile()) {
    if (GetArena() == nullptr) {
      delete event_.player_loaded_tile_;
    }
    clear_has_event();
  }
}
inline ::IronGames::EventPlayerLoadedTile* Event::release_player_loaded_tile() {
  // @@protoc_insertion_point(field_release:IronGames.Event.player_loaded_tile)
  if (_internal_has_player_loaded_tile()) {
    clear_has_event();
      ::IronGames::EventPlayerLoadedTile* temp = event_.player_loaded_tile_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.player_loaded_tile_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::IronGames::EventPlayerLoadedTile& Event::_internal_player_loaded_tile() const {
  return _internal_has_player_loaded_tile()
      ? *event_.player_loaded_tile_
      : reinterpret_cast< ::IronGames::EventPlayerLoadedTile&>(::IronGames::_EventPlayerLoadedTile_default_instance_);
}
inline const ::IronGames::EventPlayerLoadedTile& Event::player_loaded_tile() const {
  // @@protoc_insertion_point(field_get:IronGames.Event.player_loaded_tile)
  return _internal_player_loaded_tile();
}
inline ::IronGames::EventPlayerLoadedTile* Event::unsafe_arena_release_player_loaded_tile() {
  // @@protoc_insertion_point(field_unsafe_arena_release:IronGames.Event.player_loaded_tile)
  if (_internal_has_player_loaded_tile()) {
    clear_has_event();
    ::IronGames::EventPlayerLoadedTile* temp = event_.player_loaded_tile_;
    event_.player_loaded_tile_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_player_loaded_tile(::IronGames::EventPlayerLoadedTile* player_loaded_tile) {
  clear_event();
  if (player_loaded_tile) {
    set_has_player_loaded_tile();
    event_.player_loaded_tile_ = player_loaded_tile;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IronGames.Event.player_loaded_tile)
}
inline ::IronGames::EventPlayerLoadedTile* Event::_internal_mutable_player_loaded_tile() {
  if (!_internal_has_player_loaded_tile()) {
    clear_event();
    set_has_player_loaded_tile();
    event_.player_loaded_tile_ = CreateMaybeMessage< ::IronGames::EventPlayerLoadedTile >(GetArena());
  }
  return event_.player_loaded_tile_;
}
inline ::IronGames::EventPlayerLoadedTile* Event::mutable_player_loaded_tile() {
  // @@protoc_insertion_point(field_mutable:IronGames.Event.player_loaded_tile)
  return _internal_mutable_player_loaded_tile();
}

// .IronGames.EventPlayerLoadedGame player_loaded_game = 16;
inline bool Event::_internal_has_player_loaded_game() const {
  return event_case() == kPlayerLoadedGame;
}
inline bool Event::has_player_loaded_game() const {
  return _internal_has_player_loaded_game();
}
inline void Event::set_has_player_loaded_game() {
  _oneof_case_[0] = kPlayerLoadedGame;
}
inline void Event::clear_player_loaded_game() {
  if (_internal_has_player_loaded_game()) {
    if (GetArena() == nullptr) {
      delete event_.player_loaded_game_;
    }
    clear_has_event();
  }
}
inline ::IronGames::EventPlayerLoadedGame* Event::release_player_loaded_game() {
  // @@protoc_insertion_point(field_release:IronGames.Event.player_loaded_game)
  if (_internal_has_player_loaded_game()) {
    clear_has_event();
      ::IronGames::EventPlayerLoadedGame* temp = event_.player_loaded_game_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.player_loaded_game_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::IronGames::EventPlayerLoadedGame& Event::_internal_player_loaded_game() const {
  return _internal_has_player_loaded_game()
      ? *event_.player_loaded_game_
      : reinterpret_cast< ::IronGames::EventPlayerLoadedGame&>(::IronGames::_EventPlayerLoadedGame_default_instance_);
}
inline const ::IronGames::EventPlayerLoadedGame& Event::player_loaded_game() const {
  // @@protoc_insertion_point(field_get:IronGames.Event.player_loaded_game)
  return _internal_player_loaded_game();
}
inline ::IronGames::EventPlayerLoadedGame* Event::unsafe_arena_release_player_loaded_game() {
  // @@protoc_insertion_point(field_unsafe_arena_release:IronGames.Event.player_loaded_game)
  if (_internal_has_player_loaded_game()) {
    clear_has_event();
    ::IronGames::EventPlayerLoadedGame* temp = event_.player_loaded_game_;
    event_.player_loaded_game_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_player_loaded_game(::IronGames::EventPlayerLoadedGame* player_loaded_game) {
  clear_event();
  if (player_loaded_game) {
    set_has_player_loaded_game();
    event_.player_loaded_game_ = player_loaded_game;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IronGames.Event.player_loaded_game)
}
inline ::IronGames::EventPlayerLoadedGame* Event::_internal_mutable_player_loaded_game() {
  if (!_internal_has_player_loaded_game()) {
    clear_event();
    set_has_player_loaded_game();
    event_.player_loaded_game_ = CreateMaybeMessage< ::IronGames::EventPlayerLoadedGame >(GetArena());
  }
  return event_.player_loaded_game_;
}
inline ::IronGames::EventPlayerLoadedGame* Event::mutable_player_loaded_game() {
  // @@protoc_insertion_point(field_mutable:IronGames.Event.player_loaded_game)
  return _internal_mutable_player_loaded_game();
}

inline bool Event::has_event() const {
  return event_case() != EVENT_NOT_SET;
}
inline void Event::clear_has_event() {
  _oneof_case_[0] = EVENT_NOT_SET;
}
inline Event::EventCase Event::event_case() const {
  return Event::EventCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// EventList

// repeated .IronGames.Event events = 1;
inline int EventList::_internal_events_size() const {
  return events_.size();
}
inline int EventList::events_size() const {
  return _internal_events_size();
}
inline void EventList::clear_events() {
  events_.Clear();
}
inline ::IronGames::Event* EventList::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:IronGames.EventList.events)
  return events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::Event >*
EventList::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:IronGames.EventList.events)
  return &events_;
}
inline const ::IronGames::Event& EventList::_internal_events(int index) const {
  return events_.Get(index);
}
inline const ::IronGames::Event& EventList::events(int index) const {
  // @@protoc_insertion_point(field_get:IronGames.EventList.events)
  return _internal_events(index);
}
inline ::IronGames::Event* EventList::_internal_add_events() {
  return events_.Add();
}
inline ::IronGames::Event* EventList::add_events() {
  // @@protoc_insertion_point(field_add:IronGames.EventList.events)
  return _internal_add_events();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::Event >&
EventList::events() const {
  // @@protoc_insertion_point(field_list:IronGames.EventList.events)
  return events_;
}

// -------------------------------------------------------------------

// JoinGameRequest

// .IronGames.Player player = 1;
inline bool JoinGameRequest::_internal_has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline bool JoinGameRequest::has_player() const {
  return _internal_has_player();
}
inline void JoinGameRequest::clear_player() {
  if (GetArena() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
}
inline const ::IronGames::Player& JoinGameRequest::_internal_player() const {
  const ::IronGames::Player* p = player_;
  return p != nullptr ? *p : reinterpret_cast<const ::IronGames::Player&>(
      ::IronGames::_Player_default_instance_);
}
inline const ::IronGames::Player& JoinGameRequest::player() const {
  // @@protoc_insertion_point(field_get:IronGames.JoinGameRequest.player)
  return _internal_player();
}
inline void JoinGameRequest::unsafe_arena_set_allocated_player(
    ::IronGames::Player* player) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IronGames.JoinGameRequest.player)
}
inline ::IronGames::Player* JoinGameRequest::release_player() {
  
  ::IronGames::Player* temp = player_;
  player_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::IronGames::Player* JoinGameRequest::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:IronGames.JoinGameRequest.player)
  
  ::IronGames::Player* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::IronGames::Player* JoinGameRequest::_internal_mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::IronGames::Player>(GetArena());
    player_ = p;
  }
  return player_;
}
inline ::IronGames::Player* JoinGameRequest::mutable_player() {
  // @@protoc_insertion_point(field_mutable:IronGames.JoinGameRequest.player)
  return _internal_mutable_player();
}
inline void JoinGameRequest::set_allocated_player(::IronGames::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete player_;
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(player);
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:IronGames.JoinGameRequest.player)
}

// int32 game_id = 2;
inline void JoinGameRequest::clear_game_id() {
  game_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JoinGameRequest::_internal_game_id() const {
  return game_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JoinGameRequest::game_id() const {
  // @@protoc_insertion_point(field_get:IronGames.JoinGameRequest.game_id)
  return _internal_game_id();
}
inline void JoinGameRequest::_internal_set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  game_id_ = value;
}
inline void JoinGameRequest::set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:IronGames.JoinGameRequest.game_id)
}

// -------------------------------------------------------------------

// JoinGameResponse

// int32 player_id = 1;
inline void JoinGameResponse::clear_player_id() {
  player_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JoinGameResponse::_internal_player_id() const {
  return player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JoinGameResponse::player_id() const {
  // @@protoc_insertion_point(field_get:IronGames.JoinGameResponse.player_id)
  return _internal_player_id();
}
inline void JoinGameResponse::_internal_set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  player_id_ = value;
}
inline void JoinGameResponse::set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:IronGames.JoinGameResponse.player_id)
}

// repeated .IronGames.Player players = 2;
inline int JoinGameResponse::_internal_players_size() const {
  return players_.size();
}
inline int JoinGameResponse::players_size() const {
  return _internal_players_size();
}
inline void JoinGameResponse::clear_players() {
  players_.Clear();
}
inline ::IronGames::Player* JoinGameResponse::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:IronGames.JoinGameResponse.players)
  return players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::Player >*
JoinGameResponse::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:IronGames.JoinGameResponse.players)
  return &players_;
}
inline const ::IronGames::Player& JoinGameResponse::_internal_players(int index) const {
  return players_.Get(index);
}
inline const ::IronGames::Player& JoinGameResponse::players(int index) const {
  // @@protoc_insertion_point(field_get:IronGames.JoinGameResponse.players)
  return _internal_players(index);
}
inline ::IronGames::Player* JoinGameResponse::_internal_add_players() {
  return players_.Add();
}
inline ::IronGames::Player* JoinGameResponse::add_players() {
  // @@protoc_insertion_point(field_add:IronGames.JoinGameResponse.players)
  return _internal_add_players();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::IronGames::Player >&
JoinGameResponse::players() const {
  // @@protoc_insertion_point(field_list:IronGames.JoinGameResponse.players)
  return players_;
}

// -------------------------------------------------------------------

// ExitGameRequest

// int32 player_id = 1;
inline void ExitGameRequest::clear_player_id() {
  player_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExitGameRequest::_internal_player_id() const {
  return player_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExitGameRequest::player_id() const {
  // @@protoc_insertion_point(field_get:IronGames.ExitGameRequest.player_id)
  return _internal_player_id();
}
inline void ExitGameRequest::_internal_set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  player_id_ = value;
}
inline void ExitGameRequest::set_player_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_player_id(value);
  // @@protoc_insertion_point(field_set:IronGames.ExitGameRequest.player_id)
}

// -------------------------------------------------------------------

// ExitGameResponse

// -------------------------------------------------------------------

// SubscribeEventsRequest

// .IronGames.Player player = 1;
inline bool SubscribeEventsRequest::_internal_has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline bool SubscribeEventsRequest::has_player() const {
  return _internal_has_player();
}
inline void SubscribeEventsRequest::clear_player() {
  if (GetArena() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
}
inline const ::IronGames::Player& SubscribeEventsRequest::_internal_player() const {
  const ::IronGames::Player* p = player_;
  return p != nullptr ? *p : reinterpret_cast<const ::IronGames::Player&>(
      ::IronGames::_Player_default_instance_);
}
inline const ::IronGames::Player& SubscribeEventsRequest::player() const {
  // @@protoc_insertion_point(field_get:IronGames.SubscribeEventsRequest.player)
  return _internal_player();
}
inline void SubscribeEventsRequest::unsafe_arena_set_allocated_player(
    ::IronGames::Player* player) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_);
  }
  player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:IronGames.SubscribeEventsRequest.player)
}
inline ::IronGames::Player* SubscribeEventsRequest::release_player() {
  
  ::IronGames::Player* temp = player_;
  player_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::IronGames::Player* SubscribeEventsRequest::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:IronGames.SubscribeEventsRequest.player)
  
  ::IronGames::Player* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::IronGames::Player* SubscribeEventsRequest::_internal_mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::IronGames::Player>(GetArena());
    player_ = p;
  }
  return player_;
}
inline ::IronGames::Player* SubscribeEventsRequest::mutable_player() {
  // @@protoc_insertion_point(field_mutable:IronGames.SubscribeEventsRequest.player)
  return _internal_mutable_player();
}
inline void SubscribeEventsRequest::set_allocated_player(::IronGames::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete player_;
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(player);
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:IronGames.SubscribeEventsRequest.player)
}

// -------------------------------------------------------------------

// SendEventResponse

// -------------------------------------------------------------------

// NewGameRequest

// -------------------------------------------------------------------

// NewGameResponse

// int32 game_id = 1;
inline void NewGameResponse::clear_game_id() {
  game_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewGameResponse::_internal_game_id() const {
  return game_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NewGameResponse::game_id() const {
  // @@protoc_insertion_point(field_get:IronGames.NewGameResponse.game_id)
  return _internal_game_id();
}
inline void NewGameResponse::_internal_set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  game_id_ = value;
}
inline void NewGameResponse::set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:IronGames.NewGameResponse.game_id)
}

// -------------------------------------------------------------------

// EndGameRequest

// int32 game_id = 1;
inline void EndGameRequest::clear_game_id() {
  game_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EndGameRequest::_internal_game_id() const {
  return game_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EndGameRequest::game_id() const {
  // @@protoc_insertion_point(field_get:IronGames.EndGameRequest.game_id)
  return _internal_game_id();
}
inline void EndGameRequest::_internal_set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  game_id_ = value;
}
inline void EndGameRequest::set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:IronGames.EndGameRequest.game_id)
}

// -------------------------------------------------------------------

// EndGameResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace IronGames

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_core_2eproto
