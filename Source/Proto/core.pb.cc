// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: core.proto

#include "core.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace IronGames {
constexpr Color::Color(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : r_(0)
  , g_(0)
  , b_(0)
  , a_(0){}
struct ColorDefaultTypeInternal {
  constexpr ColorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ColorDefaultTypeInternal() {}
  union {
    Color _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ColorDefaultTypeInternal _Color_default_instance_;
constexpr Vector3::Vector3(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , z_(0){}
struct Vector3DefaultTypeInternal {
  constexpr Vector3DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Vector3DefaultTypeInternal() {}
  union {
    Vector3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Vector3DefaultTypeInternal _Vector3_default_instance_;
constexpr Matrix3::Matrix3(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : col0_(nullptr)
  , col1_(nullptr)
  , col2_(nullptr){}
struct Matrix3DefaultTypeInternal {
  constexpr Matrix3DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Matrix3DefaultTypeInternal() {}
  union {
    Matrix3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Matrix3DefaultTypeInternal _Matrix3_default_instance_;
constexpr Quaternion::Quaternion(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : w_(0)
  , x_(0)
  , y_(0)
  , z_(0){}
struct QuaternionDefaultTypeInternal {
  constexpr QuaternionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QuaternionDefaultTypeInternal() {}
  union {
    Quaternion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QuaternionDefaultTypeInternal _Quaternion_default_instance_;
constexpr Transform::Transform(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_(nullptr)
  , rotation_(nullptr){}
struct TransformDefaultTypeInternal {
  constexpr TransformDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransformDefaultTypeInternal() {}
  union {
    Transform _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransformDefaultTypeInternal _Transform_default_instance_;
constexpr Parameter::Parameter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(0)
  , _oneof_case_{}{}
struct ParameterDefaultTypeInternal {
  constexpr ParameterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ParameterDefaultTypeInternal() {}
  union {
    Parameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ParameterDefaultTypeInternal _Parameter_default_instance_;
constexpr Player::Player(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , color_(nullptr)
  , id_(0)
  , row_(0)
  , col_(0)
  , rotation_(0)
  , team_id_(0)
  , is_host_(false){}
struct PlayerDefaultTypeInternal {
  constexpr PlayerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlayerDefaultTypeInternal() {}
  union {
    Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlayerDefaultTypeInternal _Player_default_instance_;
constexpr Actor::Actor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parameters_()
  , transform_(nullptr)
  , unit_id_(0)
  , type_id_(0)
  , owner_id_(0){}
struct ActorDefaultTypeInternal {
  constexpr ActorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActorDefaultTypeInternal() {}
  union {
    Actor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActorDefaultTypeInternal _Actor_default_instance_;
constexpr Tile::Tile(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : actors_()
  , player_assets_(nullptr)
  , terrain_id_(0){}
struct TileDefaultTypeInternal {
  constexpr TileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TileDefaultTypeInternal() {}
  union {
    Tile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TileDefaultTypeInternal _Tile_default_instance_;
constexpr SimulationVertex::SimulationVertex(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : compressive_forces_()
  , tensile_forces_()
  , collision_forces_()
  , position_(nullptr)
  , material_coordinates_(nullptr)
  , velocity_(nullptr)
  , force_(nullptr)
  , principal_eigenvector_(nullptr)
  , separation_tensor_(nullptr)
  , mass_(0)
  , largest_eigenvalue_(0){}
struct SimulationVertexDefaultTypeInternal {
  constexpr SimulationVertexDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SimulationVertexDefaultTypeInternal() {}
  union {
    SimulationVertex _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SimulationVertexDefaultTypeInternal _SimulationVertex_default_instance_;
constexpr SimulationTetrahedra::SimulationTetrahedra(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : indices_()
  , _indices_cached_byte_size_()
  , strain_tensor_(nullptr)
  , stress_tensor_(nullptr)
  , mass_(0)
  , volume_(0){}
struct SimulationTetrahedraDefaultTypeInternal {
  constexpr SimulationTetrahedraDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SimulationTetrahedraDefaultTypeInternal() {}
  union {
    SimulationTetrahedra _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SimulationTetrahedraDefaultTypeInternal _SimulationTetrahedra_default_instance_;
constexpr SimulationFrame::SimulationFrame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vertices_()
  , tetrahedra_()
  , time_(0){}
struct SimulationFrameDefaultTypeInternal {
  constexpr SimulationFrameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SimulationFrameDefaultTypeInternal() {}
  union {
    SimulationFrame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SimulationFrameDefaultTypeInternal _SimulationFrame_default_instance_;
constexpr SimulationSummary::SimulationSummary(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : frames_()
  , lambda_(0)
  , psi_(0)
  , mu_(0)
  , phi_(0)
  , density_(0)
  , toughness_(0)
  , max_num_vertices_(0)
  , max_num_tetrahedra_(0){}
struct SimulationSummaryDefaultTypeInternal {
  constexpr SimulationSummaryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SimulationSummaryDefaultTypeInternal() {}
  union {
    SimulationSummary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SimulationSummaryDefaultTypeInternal _SimulationSummary_default_instance_;
constexpr SimulationSummaries::SimulationSummaries(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : summaries_(){}
struct SimulationSummariesDefaultTypeInternal {
  constexpr SimulationSummariesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SimulationSummariesDefaultTypeInternal() {}
  union {
    SimulationSummaries _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SimulationSummariesDefaultTypeInternal _SimulationSummaries_default_instance_;
constexpr Box::Box(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : min_(nullptr)
  , max_(nullptr){}
struct BoxDefaultTypeInternal {
  constexpr BoxDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BoxDefaultTypeInternal() {}
  union {
    Box _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BoxDefaultTypeInternal _Box_default_instance_;
constexpr EditCube::EditCube(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : center_(nullptr){}
struct EditCubeDefaultTypeInternal {
  constexpr EditCubeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EditCubeDefaultTypeInternal() {}
  union {
    EditCube _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EditCubeDefaultTypeInternal _EditCube_default_instance_;
constexpr TetrahedraMesh::TetrahedraMesh(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : positions_(){}
struct TetrahedraMeshDefaultTypeInternal {
  constexpr TetrahedraMeshDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TetrahedraMeshDefaultTypeInternal() {}
  union {
    TetrahedraMesh _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TetrahedraMeshDefaultTypeInternal _TetrahedraMesh_default_instance_;
constexpr Asset::Asset(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cubes_()
  , tetrahedra_meshes_()
  , last_saved_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , author_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , asset_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bounds_(nullptr){}
struct AssetDefaultTypeInternal {
  constexpr AssetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AssetDefaultTypeInternal() {}
  union {
    Asset _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AssetDefaultTypeInternal _Asset_default_instance_;
constexpr PalaceAsset::PalaceAsset(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : asset_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , transform_(nullptr)
  , color_(nullptr)
  , scale_(nullptr){}
struct PalaceAssetDefaultTypeInternal {
  constexpr PalaceAssetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PalaceAssetDefaultTypeInternal() {}
  union {
    PalaceAsset _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PalaceAssetDefaultTypeInternal _PalaceAsset_default_instance_;
constexpr PlayerAssets::PlayerAssets(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : assets_()
  , palace_assets_(){}
struct PlayerAssetsDefaultTypeInternal {
  constexpr PlayerAssetsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlayerAssetsDefaultTypeInternal() {}
  union {
    PlayerAssets _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlayerAssetsDefaultTypeInternal _PlayerAssets_default_instance_;
constexpr EventPlayerConnected::EventPlayerConnected(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_(nullptr){}
struct EventPlayerConnectedDefaultTypeInternal {
  constexpr EventPlayerConnectedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EventPlayerConnectedDefaultTypeInternal() {}
  union {
    EventPlayerConnected _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EventPlayerConnectedDefaultTypeInternal _EventPlayerConnected_default_instance_;
constexpr EventPlayerChanged::EventPlayerChanged(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_(nullptr){}
struct EventPlayerChangedDefaultTypeInternal {
  constexpr EventPlayerChangedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EventPlayerChangedDefaultTypeInternal() {}
  union {
    EventPlayerChanged _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EventPlayerChangedDefaultTypeInternal _EventPlayerChanged_default_instance_;
constexpr EventPlayerDisconnected::EventPlayerDisconnected(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_(nullptr){}
struct EventPlayerDisconnectedDefaultTypeInternal {
  constexpr EventPlayerDisconnectedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EventPlayerDisconnectedDefaultTypeInternal() {}
  union {
    EventPlayerDisconnected _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EventPlayerDisconnectedDefaultTypeInternal _EventPlayerDisconnected_default_instance_;
constexpr EventUnitCreation::EventUnitCreation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transform_(nullptr)
  , unit_id_(0)
  , type_id_(0)
  , owner_id_(0){}
struct EventUnitCreationDefaultTypeInternal {
  constexpr EventUnitCreationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EventUnitCreationDefaultTypeInternal() {}
  union {
    EventUnitCreation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EventUnitCreationDefaultTypeInternal _EventUnitCreation_default_instance_;
constexpr EventActorCreationRequest::EventActorCreationRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transform_(nullptr)
  , type_id_(0)
  , owner_id_(0){}
struct EventActorCreationRequestDefaultTypeInternal {
  constexpr EventActorCreationRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EventActorCreationRequestDefaultTypeInternal() {}
  union {
    EventActorCreationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EventActorCreationRequestDefaultTypeInternal _EventActorCreationRequest_default_instance_;
constexpr EventUnitDestruction::EventUnitDestruction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : unit_id_(0){}
struct EventUnitDestructionDefaultTypeInternal {
  constexpr EventUnitDestructionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EventUnitDestructionDefaultTypeInternal() {}
  union {
    EventUnitDestruction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EventUnitDestructionDefaultTypeInternal _EventUnitDestruction_default_instance_;
constexpr EventBuildingCreation::EventBuildingCreation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transform_(nullptr)
  , building_id_(0)
  , type_id_(0){}
struct EventBuildingCreationDefaultTypeInternal {
  constexpr EventBuildingCreationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EventBuildingCreationDefaultTypeInternal() {}
  union {
    EventBuildingCreation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EventBuildingCreationDefaultTypeInternal _EventBuildingCreation_default_instance_;
constexpr EventBuildingDestruction::EventBuildingDestruction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : building_id_(0){}
struct EventBuildingDestructionDefaultTypeInternal {
  constexpr EventBuildingDestructionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EventBuildingDestructionDefaultTypeInternal() {}
  union {
    EventBuildingDestruction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EventBuildingDestructionDefaultTypeInternal _EventBuildingDestruction_default_instance_;
constexpr CommandMove::CommandMove(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : destination_(nullptr)
  , unit_id_(0){}
struct CommandMoveDefaultTypeInternal {
  constexpr CommandMoveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandMoveDefaultTypeInternal() {}
  union {
    CommandMove _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandMoveDefaultTypeInternal _CommandMove_default_instance_;
constexpr CommandAttack::CommandAttack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : unit_id_(0)
  , target_id_(0){}
struct CommandAttackDefaultTypeInternal {
  constexpr CommandAttackDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandAttackDefaultTypeInternal() {}
  union {
    CommandAttack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandAttackDefaultTypeInternal _CommandAttack_default_instance_;
constexpr CommandAttackMove::CommandAttackMove(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : destination_(nullptr)
  , unit_id_(0){}
struct CommandAttackMoveDefaultTypeInternal {
  constexpr CommandAttackMoveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandAttackMoveDefaultTypeInternal() {}
  union {
    CommandAttackMove _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandAttackMoveDefaultTypeInternal _CommandAttackMove_default_instance_;
constexpr EventUnitCommand::EventUnitCommand(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct EventUnitCommandDefaultTypeInternal {
  constexpr EventUnitCommandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EventUnitCommandDefaultTypeInternal() {}
  union {
    EventUnitCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EventUnitCommandDefaultTypeInternal _EventUnitCommand_default_instance_;
constexpr EventPlayerReadyToStartGame::EventPlayerReadyToStartGame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct EventPlayerReadyToStartGameDefaultTypeInternal {
  constexpr EventPlayerReadyToStartGameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EventPlayerReadyToStartGameDefaultTypeInternal() {}
  union {
    EventPlayerReadyToStartGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EventPlayerReadyToStartGameDefaultTypeInternal _EventPlayerReadyToStartGame_default_instance_;
constexpr EventGameStart::EventGameStart(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct EventGameStartDefaultTypeInternal {
  constexpr EventGameStartDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EventGameStartDefaultTypeInternal() {}
  union {
    EventGameStart _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EventGameStartDefaultTypeInternal _EventGameStart_default_instance_;
constexpr EventAllPlayersReadyForGameToStart::EventAllPlayersReadyForGameToStart(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct EventAllPlayersReadyForGameToStartDefaultTypeInternal {
  constexpr EventAllPlayersReadyForGameToStartDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EventAllPlayersReadyForGameToStartDefaultTypeInternal() {}
  union {
    EventAllPlayersReadyForGameToStart _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EventAllPlayersReadyForGameToStartDefaultTypeInternal _EventAllPlayersReadyForGameToStart_default_instance_;
constexpr EventPlayerLoadedGame::EventPlayerLoadedGame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct EventPlayerLoadedGameDefaultTypeInternal {
  constexpr EventPlayerLoadedGameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EventPlayerLoadedGameDefaultTypeInternal() {}
  union {
    EventPlayerLoadedGame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EventPlayerLoadedGameDefaultTypeInternal _EventPlayerLoadedGame_default_instance_;
constexpr EventPlayerLoadedTile::EventPlayerLoadedTile(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tile_(nullptr){}
struct EventPlayerLoadedTileDefaultTypeInternal {
  constexpr EventPlayerLoadedTileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EventPlayerLoadedTileDefaultTypeInternal() {}
  union {
    EventPlayerLoadedTile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EventPlayerLoadedTileDefaultTypeInternal _EventPlayerLoadedTile_default_instance_;
constexpr Event::Event(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : time_(PROTOBUF_LONGLONG(0))
  , sender_id_(0)
  , _oneof_case_{}{}
struct EventDefaultTypeInternal {
  constexpr EventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EventDefaultTypeInternal() {}
  union {
    Event _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EventDefaultTypeInternal _Event_default_instance_;
constexpr EventList::EventList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : events_(){}
struct EventListDefaultTypeInternal {
  constexpr EventListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EventListDefaultTypeInternal() {}
  union {
    EventList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EventListDefaultTypeInternal _EventList_default_instance_;
constexpr JoinGameRequest::JoinGameRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_(nullptr)
  , game_id_(0){}
struct JoinGameRequestDefaultTypeInternal {
  constexpr JoinGameRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JoinGameRequestDefaultTypeInternal() {}
  union {
    JoinGameRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JoinGameRequestDefaultTypeInternal _JoinGameRequest_default_instance_;
constexpr JoinGameResponse::JoinGameResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : players_()
  , player_id_(0){}
struct JoinGameResponseDefaultTypeInternal {
  constexpr JoinGameResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JoinGameResponseDefaultTypeInternal() {}
  union {
    JoinGameResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JoinGameResponseDefaultTypeInternal _JoinGameResponse_default_instance_;
constexpr ExitGameRequest::ExitGameRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(0){}
struct ExitGameRequestDefaultTypeInternal {
  constexpr ExitGameRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExitGameRequestDefaultTypeInternal() {}
  union {
    ExitGameRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExitGameRequestDefaultTypeInternal _ExitGameRequest_default_instance_;
constexpr ExitGameResponse::ExitGameResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ExitGameResponseDefaultTypeInternal {
  constexpr ExitGameResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ExitGameResponseDefaultTypeInternal() {}
  union {
    ExitGameResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ExitGameResponseDefaultTypeInternal _ExitGameResponse_default_instance_;
constexpr SubscribeEventsRequest::SubscribeEventsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_(nullptr){}
struct SubscribeEventsRequestDefaultTypeInternal {
  constexpr SubscribeEventsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubscribeEventsRequestDefaultTypeInternal() {}
  union {
    SubscribeEventsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubscribeEventsRequestDefaultTypeInternal _SubscribeEventsRequest_default_instance_;
constexpr SendEventResponse::SendEventResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct SendEventResponseDefaultTypeInternal {
  constexpr SendEventResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SendEventResponseDefaultTypeInternal() {}
  union {
    SendEventResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SendEventResponseDefaultTypeInternal _SendEventResponse_default_instance_;
constexpr NewGameRequest::NewGameRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct NewGameRequestDefaultTypeInternal {
  constexpr NewGameRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NewGameRequestDefaultTypeInternal() {}
  union {
    NewGameRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NewGameRequestDefaultTypeInternal _NewGameRequest_default_instance_;
constexpr NewGameResponse::NewGameResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : game_id_(0){}
struct NewGameResponseDefaultTypeInternal {
  constexpr NewGameResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NewGameResponseDefaultTypeInternal() {}
  union {
    NewGameResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NewGameResponseDefaultTypeInternal _NewGameResponse_default_instance_;
constexpr EndGameRequest::EndGameRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : game_id_(0){}
struct EndGameRequestDefaultTypeInternal {
  constexpr EndGameRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EndGameRequestDefaultTypeInternal() {}
  union {
    EndGameRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EndGameRequestDefaultTypeInternal _EndGameRequest_default_instance_;
constexpr EndGameResponse::EndGameResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct EndGameResponseDefaultTypeInternal {
  constexpr EndGameResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EndGameResponseDefaultTypeInternal() {}
  union {
    EndGameResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EndGameResponseDefaultTypeInternal _EndGameResponse_default_instance_;
}  // namespace IronGames
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_core_2eproto[49];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_core_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_core_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_core_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IronGames::Color, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IronGames::Color, r_),
  PROTOBUF_FIELD_OFFSET(::IronGames::Color, g_),
  PROTOBUF_FIELD_OFFSET(::IronGames::Color, b_),
  PROTOBUF_FIELD_OFFSET(::IronGames::Color, a_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IronGames::Vector3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IronGames::Vector3, x_),
  PROTOBUF_FIELD_OFFSET(::IronGames::Vector3, y_),
  PROTOBUF_FIELD_OFFSET(::IronGames::Vector3, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IronGames::Matrix3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IronGames::Matrix3, col0_),
  PROTOBUF_FIELD_OFFSET(::IronGames::Matrix3, col1_),
  PROTOBUF_FIELD_OFFSET(::IronGames::Matrix3, col2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IronGames::Quaternion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IronGames::Quaternion, w_),
  PROTOBUF_FIELD_OFFSET(::IronGames::Quaternion, x_),
  PROTOBUF_FIELD_OFFSET(::IronGames::Quaternion, y_),
  PROTOBUF_FIELD_OFFSET(::IronGames::Quaternion, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IronGames::Transform, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IronGames::Transform, position_),
  PROTOBUF_FIELD_OFFSET(::IronGames::Transform, rotation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IronGames::Parameter, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::IronGames::Parameter, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IronGames::Parameter, name_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::IronGames::Parameter, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IronGames::Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IronGames::Player, name_),
  PROTOBUF_FIELD_OFFSET(::IronGames::Player, color_),
  PROTOBUF_FIELD_OFFSET(::IronGames::Player, id_),
  PROTOBUF_FIELD_OFFSET(::IronGames::Player, row_),
  PROTOBUF_FIELD_OFFSET(::IronGames::Player, col_),
  PROTOBUF_FIELD_OFFSET(::IronGames::Player, rotation_),
  PROTOBUF_FIELD_OFFSET(::IronGames::Player, team_id_),
  PROTOBUF_FIELD_OFFSET(::IronGames::Player, is_host_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IronGames::Actor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IronGames::Actor, unit_id_),
  PROTOBUF_FIELD_OFFSET(::IronGames::Actor, type_id_),
  PROTOBUF_FIELD_OFFSET(::IronGames::Actor, owner_id_),
  PROTOBUF_FIELD_OFFSET(::IronGames::Actor, transform_),
  PROTOBUF_FIELD_OFFSET(::IronGames::Actor, parameters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IronGames::Tile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IronGames::Tile, terrain_id_),
  PROTOBUF_FIELD_OFFSET(::IronGames::Tile, actors_),
  PROTOBUF_FIELD_OFFSET(::IronGames::Tile, player_assets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IronGames::SimulationVertex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IronGames::SimulationVertex, position_),
  PROTOBUF_FIELD_OFFSET(::IronGames::SimulationVertex, material_coordinates_),
  PROTOBUF_FIELD_OFFSET(::IronGames::SimulationVertex, velocity_),
  PROTOBUF_FIELD_OFFSET(::IronGames::SimulationVertex, mass_),
  PROTOBUF_FIELD_OFFSET(::IronGames::SimulationVertex, force_),
  PROTOBUF_FIELD_OFFSET(::IronGames::SimulationVertex, largest_eigenvalue_),
  PROTOBUF_FIELD_OFFSET(::IronGames::SimulationVertex, principal_eigenvector_),
  PROTOBUF_FIELD_OFFSET(::IronGames::SimulationVertex, compressive_forces_),
  PROTOBUF_FIELD_OFFSET(::IronGames::SimulationVertex, tensile_forces_),
  PROTOBUF_FIELD_OFFSET(::IronGames::SimulationVertex, collision_forces_),
  PROTOBUF_FIELD_OFFSET(::IronGames::SimulationVertex, separation_tensor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IronGames::SimulationTetrahedra, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IronGames::SimulationTetrahedra, mass_),
  PROTOBUF_FIELD_OFFSET(::IronGames::SimulationTetrahedra, volume_),
  PROTOBUF_FIELD_OFFSET(::IronGames::SimulationTetrahedra, indices_),
  PROTOBUF_FIELD_OFFSET(::IronGames::SimulationTetrahedra, strain_tensor_),
  PROTOBUF_FIELD_OFFSET(::IronGames::SimulationTetrahedra, stress_tensor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IronGames::SimulationFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IronGames::SimulationFrame, time_),
  PROTOBUF_FIELD_OFFSET(::IronGames::SimulationFrame, vertices_),
  PROTOBUF_FIELD_OFFSET(::IronGames::SimulationFrame, tetrahedra_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IronGames::SimulationSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IronGames::SimulationSummary, lambda_),
  PROTOBUF_FIELD_OFFSET(::IronGames::SimulationSummary, psi_),
  PROTOBUF_FIELD_OFFSET(::IronGames::SimulationSummary, mu_),
  PROTOBUF_FIELD_OFFSET(::IronGames::SimulationSummary, phi_),
  PROTOBUF_FIELD_OFFSET(::IronGames::SimulationSummary, density_),
  PROTOBUF_FIELD_OFFSET(::IronGames::SimulationSummary, toughness_),
  PROTOBUF_FIELD_OFFSET(::IronGames::SimulationSummary, max_num_vertices_),
  PROTOBUF_FIELD_OFFSET(::IronGames::SimulationSummary, max_num_tetrahedra_),
  PROTOBUF_FIELD_OFFSET(::IronGames::SimulationSummary, frames_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IronGames::SimulationSummaries, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IronGames::SimulationSummaries, summaries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IronGames::Box, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IronGames::Box, min_),
  PROTOBUF_FIELD_OFFSET(::IronGames::Box, max_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IronGames::EditCube, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IronGames::EditCube, center_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IronGames::TetrahedraMesh, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IronGames::TetrahedraMesh, positions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IronGames::Asset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IronGames::Asset, cubes_),
  PROTOBUF_FIELD_OFFSET(::IronGames::Asset, tetrahedra_meshes_),
  PROTOBUF_FIELD_OFFSET(::IronGames::Asset, bounds_),
  PROTOBUF_FIELD_OFFSET(::IronGames::Asset, last_saved_),
  PROTOBUF_FIELD_OFFSET(::IronGames::Asset, author_),
  PROTOBUF_FIELD_OFFSET(::IronGames::Asset, asset_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IronGames::PalaceAsset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IronGames::PalaceAsset, asset_id_),
  PROTOBUF_FIELD_OFFSET(::IronGames::PalaceAsset, transform_),
  PROTOBUF_FIELD_OFFSET(::IronGames::PalaceAsset, color_),
  PROTOBUF_FIELD_OFFSET(::IronGames::PalaceAsset, scale_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IronGames::PlayerAssets, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IronGames::PlayerAssets, assets_),
  PROTOBUF_FIELD_OFFSET(::IronGames::PlayerAssets, palace_assets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IronGames::EventPlayerConnected, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IronGames::EventPlayerConnected, player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IronGames::EventPlayerChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IronGames::EventPlayerChanged, player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IronGames::EventPlayerDisconnected, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IronGames::EventPlayerDisconnected, player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IronGames::EventUnitCreation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IronGames::EventUnitCreation, unit_id_),
  PROTOBUF_FIELD_OFFSET(::IronGames::EventUnitCreation, type_id_),
  PROTOBUF_FIELD_OFFSET(::IronGames::EventUnitCreation, owner_id_),
  PROTOBUF_FIELD_OFFSET(::IronGames::EventUnitCreation, transform_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IronGames::EventActorCreationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IronGames::EventActorCreationRequest, type_id_),
  PROTOBUF_FIELD_OFFSET(::IronGames::EventActorCreationRequest, owner_id_),
  PROTOBUF_FIELD_OFFSET(::IronGames::EventActorCreationRequest, transform_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IronGames::EventUnitDestruction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IronGames::EventUnitDestruction, unit_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IronGames::EventBuildingCreation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IronGames::EventBuildingCreation, building_id_),
  PROTOBUF_FIELD_OFFSET(::IronGames::EventBuildingCreation, type_id_),
  PROTOBUF_FIELD_OFFSET(::IronGames::EventBuildingCreation, transform_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IronGames::EventBuildingDestruction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IronGames::EventBuildingDestruction, building_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IronGames::CommandMove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IronGames::CommandMove, unit_id_),
  PROTOBUF_FIELD_OFFSET(::IronGames::CommandMove, destination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IronGames::CommandAttack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IronGames::CommandAttack, unit_id_),
  PROTOBUF_FIELD_OFFSET(::IronGames::CommandAttack, target_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IronGames::CommandAttackMove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IronGames::CommandAttackMove, unit_id_),
  PROTOBUF_FIELD_OFFSET(::IronGames::CommandAttackMove, destination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IronGames::EventUnitCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::IronGames::EventUnitCommand, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::IronGames::EventUnitCommand, command_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IronGames::EventPlayerReadyToStartGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IronGames::EventGameStart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IronGames::EventAllPlayersReadyForGameToStart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IronGames::EventPlayerLoadedGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IronGames::EventPlayerLoadedTile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IronGames::EventPlayerLoadedTile, tile_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IronGames::Event, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::IronGames::Event, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IronGames::Event, time_),
  PROTOBUF_FIELD_OFFSET(::IronGames::Event, sender_id_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::IronGames::Event, event_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IronGames::EventList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IronGames::EventList, events_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IronGames::JoinGameRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IronGames::JoinGameRequest, player_),
  PROTOBUF_FIELD_OFFSET(::IronGames::JoinGameRequest, game_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IronGames::JoinGameResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IronGames::JoinGameResponse, player_id_),
  PROTOBUF_FIELD_OFFSET(::IronGames::JoinGameResponse, players_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IronGames::ExitGameRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IronGames::ExitGameRequest, player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IronGames::ExitGameResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IronGames::SubscribeEventsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IronGames::SubscribeEventsRequest, player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IronGames::SendEventResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IronGames::NewGameRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IronGames::NewGameResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IronGames::NewGameResponse, game_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IronGames::EndGameRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::IronGames::EndGameRequest, game_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IronGames::EndGameResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::IronGames::Color)},
  { 9, -1, sizeof(::IronGames::Vector3)},
  { 17, -1, sizeof(::IronGames::Matrix3)},
  { 25, -1, sizeof(::IronGames::Quaternion)},
  { 34, -1, sizeof(::IronGames::Transform)},
  { 41, -1, sizeof(::IronGames::Parameter)},
  { 53, -1, sizeof(::IronGames::Player)},
  { 66, -1, sizeof(::IronGames::Actor)},
  { 76, -1, sizeof(::IronGames::Tile)},
  { 84, -1, sizeof(::IronGames::SimulationVertex)},
  { 100, -1, sizeof(::IronGames::SimulationTetrahedra)},
  { 110, -1, sizeof(::IronGames::SimulationFrame)},
  { 118, -1, sizeof(::IronGames::SimulationSummary)},
  { 132, -1, sizeof(::IronGames::SimulationSummaries)},
  { 138, -1, sizeof(::IronGames::Box)},
  { 145, -1, sizeof(::IronGames::EditCube)},
  { 151, -1, sizeof(::IronGames::TetrahedraMesh)},
  { 157, -1, sizeof(::IronGames::Asset)},
  { 168, -1, sizeof(::IronGames::PalaceAsset)},
  { 177, -1, sizeof(::IronGames::PlayerAssets)},
  { 184, -1, sizeof(::IronGames::EventPlayerConnected)},
  { 190, -1, sizeof(::IronGames::EventPlayerChanged)},
  { 196, -1, sizeof(::IronGames::EventPlayerDisconnected)},
  { 202, -1, sizeof(::IronGames::EventUnitCreation)},
  { 211, -1, sizeof(::IronGames::EventActorCreationRequest)},
  { 219, -1, sizeof(::IronGames::EventUnitDestruction)},
  { 225, -1, sizeof(::IronGames::EventBuildingCreation)},
  { 233, -1, sizeof(::IronGames::EventBuildingDestruction)},
  { 239, -1, sizeof(::IronGames::CommandMove)},
  { 246, -1, sizeof(::IronGames::CommandAttack)},
  { 253, -1, sizeof(::IronGames::CommandAttackMove)},
  { 260, -1, sizeof(::IronGames::EventUnitCommand)},
  { 269, -1, sizeof(::IronGames::EventPlayerReadyToStartGame)},
  { 274, -1, sizeof(::IronGames::EventGameStart)},
  { 279, -1, sizeof(::IronGames::EventAllPlayersReadyForGameToStart)},
  { 284, -1, sizeof(::IronGames::EventPlayerLoadedGame)},
  { 289, -1, sizeof(::IronGames::EventPlayerLoadedTile)},
  { 295, -1, sizeof(::IronGames::Event)},
  { 317, -1, sizeof(::IronGames::EventList)},
  { 323, -1, sizeof(::IronGames::JoinGameRequest)},
  { 330, -1, sizeof(::IronGames::JoinGameResponse)},
  { 337, -1, sizeof(::IronGames::ExitGameRequest)},
  { 343, -1, sizeof(::IronGames::ExitGameResponse)},
  { 348, -1, sizeof(::IronGames::SubscribeEventsRequest)},
  { 354, -1, sizeof(::IronGames::SendEventResponse)},
  { 359, -1, sizeof(::IronGames::NewGameRequest)},
  { 364, -1, sizeof(::IronGames::NewGameResponse)},
  { 370, -1, sizeof(::IronGames::EndGameRequest)},
  { 376, -1, sizeof(::IronGames::EndGameResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IronGames::_Color_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IronGames::_Vector3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IronGames::_Matrix3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IronGames::_Quaternion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IronGames::_Transform_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IronGames::_Parameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IronGames::_Player_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IronGames::_Actor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IronGames::_Tile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IronGames::_SimulationVertex_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IronGames::_SimulationTetrahedra_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IronGames::_SimulationFrame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IronGames::_SimulationSummary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IronGames::_SimulationSummaries_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IronGames::_Box_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IronGames::_EditCube_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IronGames::_TetrahedraMesh_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IronGames::_Asset_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IronGames::_PalaceAsset_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IronGames::_PlayerAssets_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IronGames::_EventPlayerConnected_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IronGames::_EventPlayerChanged_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IronGames::_EventPlayerDisconnected_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IronGames::_EventUnitCreation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IronGames::_EventActorCreationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IronGames::_EventUnitDestruction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IronGames::_EventBuildingCreation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IronGames::_EventBuildingDestruction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IronGames::_CommandMove_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IronGames::_CommandAttack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IronGames::_CommandAttackMove_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IronGames::_EventUnitCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IronGames::_EventPlayerReadyToStartGame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IronGames::_EventGameStart_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IronGames::_EventAllPlayersReadyForGameToStart_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IronGames::_EventPlayerLoadedGame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IronGames::_EventPlayerLoadedTile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IronGames::_Event_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IronGames::_EventList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IronGames::_JoinGameRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IronGames::_JoinGameResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IronGames::_ExitGameRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IronGames::_ExitGameResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IronGames::_SubscribeEventsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IronGames::_SendEventResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IronGames::_NewGameRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IronGames::_NewGameResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IronGames::_EndGameRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::IronGames::_EndGameResponse_default_instance_),
};

const char descriptor_table_protodef_core_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ncore.proto\022\tIronGames\"3\n\005Color\022\t\n\001r\030\001 "
  "\001(\002\022\t\n\001g\030\002 \001(\002\022\t\n\001b\030\003 \001(\002\022\t\n\001a\030\004 \001(\002\"*\n\007"
  "Vector3\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002"
  "\"o\n\007Matrix3\022 \n\004col0\030\001 \001(\0132\022.IronGames.Ve"
  "ctor3\022 \n\004col1\030\002 \001(\0132\022.IronGames.Vector3\022"
  " \n\004col2\030\003 \001(\0132\022.IronGames.Vector3\"8\n\nQua"
  "ternion\022\t\n\001w\030\001 \001(\002\022\t\n\001x\030\002 \001(\002\022\t\n\001y\030\003 \001(\002"
  "\022\t\n\001z\030\004 \001(\002\"Z\n\tTransform\022$\n\010position\030\001 \001"
  "(\0132\022.IronGames.Vector3\022\'\n\010rotation\030\002 \001(\013"
  "2\025.IronGames.Quaternion\"\256\001\n\tParameter\022\014\n"
  "\004name\030\001 \001(\005\022\023\n\tval_float\030\002 \001(\002H\000\022\021\n\007val_"
  "int\030\003 \001(\005H\000\022\024\n\nval_string\030\004 \001(\tH\000\022)\n\013val"
  "_vector3\030\005 \001(\0132\022.IronGames.Vector3H\000\022!\n\005"
  "color\030\006 \001(\0132\020.IronGames.ColorH\000B\007\n\005value"
  "\"\221\001\n\006Player\022\014\n\004name\030\001 \001(\t\022\037\n\005color\030\002 \001(\013"
  "2\020.IronGames.Color\022\n\n\002id\030\003 \001(\005\022\013\n\003row\030\004 "
  "\001(\005\022\013\n\003col\030\005 \001(\005\022\020\n\010rotation\030\006 \001(\002\022\017\n\007te"
  "am_id\030\007 \001(\005\022\017\n\007is_host\030\010 \001(\010\"\216\001\n\005Actor\022\017"
  "\n\007unit_id\030\001 \001(\005\022\017\n\007type_id\030\002 \001(\005\022\020\n\010owne"
  "r_id\030\003 \001(\005\022\'\n\ttransform\030\004 \001(\0132\024.IronGame"
  "s.Transform\022(\n\nparameters\030\005 \003(\0132\024.IronGa"
  "mes.Parameter\"l\n\004Tile\022\022\n\nterrain_id\030\001 \001("
  "\005\022 \n\006actors\030\002 \003(\0132\020.IronGames.Actor\022.\n\rp"
  "layer_assets\030\003 \001(\0132\027.IronGames.PlayerAss"
  "ets\"\311\003\n\020SimulationVertex\022$\n\010position\030\001 \001"
  "(\0132\022.IronGames.Vector3\0220\n\024material_coord"
  "inates\030\002 \001(\0132\022.IronGames.Vector3\022$\n\010velo"
  "city\030\003 \001(\0132\022.IronGames.Vector3\022\014\n\004mass\030\004"
  " \001(\002\022!\n\005force\030\005 \001(\0132\022.IronGames.Vector3\022"
  "\032\n\022largest_eigenvalue\030\006 \001(\002\0221\n\025principal"
  "_eigenvector\030\007 \001(\0132\022.IronGames.Vector3\022."
  "\n\022compressive_forces\030\010 \003(\0132\022.IronGames.V"
  "ector3\022*\n\016tensile_forces\030\t \003(\0132\022.IronGam"
  "es.Vector3\022,\n\020collision_forces\030\n \003(\0132\022.I"
  "ronGames.Vector3\022-\n\021separation_tensor\030\013 "
  "\001(\0132\022.IronGames.Matrix3\"\233\001\n\024SimulationTe"
  "trahedra\022\014\n\004mass\030\001 \001(\002\022\016\n\006volume\030\002 \001(\002\022\017"
  "\n\007indices\030\003 \003(\005\022)\n\rstrain_tensor\030\004 \001(\0132\022"
  ".IronGames.Matrix3\022)\n\rstress_tensor\030\005 \001("
  "\0132\022.IronGames.Matrix3\"\203\001\n\017SimulationFram"
  "e\022\014\n\004time\030\001 \001(\002\022-\n\010vertices\030\002 \003(\0132\033.Iron"
  "Games.SimulationVertex\0223\n\ntetrahedra\030\003 \003"
  "(\0132\037.IronGames.SimulationTetrahedra\"\317\001\n\021"
  "SimulationSummary\022\016\n\006lambda\030\001 \001(\002\022\013\n\003psi"
  "\030\002 \001(\002\022\n\n\002mu\030\003 \001(\002\022\013\n\003phi\030\004 \001(\002\022\017\n\007densi"
  "ty\030\005 \001(\002\022\021\n\ttoughness\030\006 \001(\002\022\030\n\020max_num_v"
  "ertices\030\007 \001(\005\022\032\n\022max_num_tetrahedra\030\010 \001("
  "\005\022*\n\006frames\030\t \003(\0132\032.IronGames.Simulation"
  "Frame\"F\n\023SimulationSummaries\022/\n\tsummarie"
  "s\030\001 \003(\0132\034.IronGames.SimulationSummary\"G\n"
  "\003Box\022\037\n\003min\030\001 \001(\0132\022.IronGames.Vector3\022\037\n"
  "\003max\030\002 \001(\0132\022.IronGames.Vector3\".\n\010EditCu"
  "be\022\"\n\006center\030\001 \001(\0132\022.IronGames.Vector3\"7"
  "\n\016TetrahedraMesh\022%\n\tpositions\030\001 \003(\0132\022.Ir"
  "onGames.Vector3\"\267\001\n\005Asset\022\"\n\005cubes\030\001 \003(\013"
  "2\023.IronGames.EditCube\0224\n\021tetrahedra_Mesh"
  "es\030\002 \003(\0132\031.IronGames.TetrahedraMesh\022\036\n\006b"
  "ounds\030\003 \001(\0132\016.IronGames.Box\022\022\n\nlast_save"
  "d\030\004 \001(\t\022\016\n\006author\030\005 \001(\t\022\020\n\010asset_id\030\006 \001("
  "\t\"\214\001\n\013PalaceAsset\022\020\n\010asset_id\030\001 \001(\t\022\'\n\tt"
  "ransform\030\002 \001(\0132\024.IronGames.Transform\022\037\n\005"
  "color\030\003 \001(\0132\020.IronGames.Color\022!\n\005scale\030\004"
  " \001(\0132\022.IronGames.Vector3\"_\n\014PlayerAssets"
  "\022 \n\006assets\030\001 \003(\0132\020.IronGames.Asset\022-\n\rpa"
  "lace_assets\030\002 \003(\0132\026.IronGames.PalaceAsse"
  "t\"9\n\024EventPlayerConnected\022!\n\006player\030\001 \001("
  "\0132\021.IronGames.Player\"7\n\022EventPlayerChang"
  "ed\022!\n\006player\030\001 \001(\0132\021.IronGames.Player\"<\n"
  "\027EventPlayerDisconnected\022!\n\006player\030\001 \001(\013"
  "2\021.IronGames.Player\"p\n\021EventUnitCreation"
  "\022\017\n\007unit_id\030\001 \001(\005\022\017\n\007type_id\030\002 \001(\005\022\020\n\010ow"
  "ner_id\030\003 \001(\005\022\'\n\ttransform\030\004 \001(\0132\024.IronGa"
  "mes.Transform\"g\n\031EventActorCreationReque"
  "st\022\017\n\007type_id\030\001 \001(\005\022\020\n\010owner_id\030\002 \001(\005\022\'\n"
  "\ttransform\030\003 \001(\0132\024.IronGames.Transform\"\'"
  "\n\024EventUnitDestruction\022\017\n\007unit_id\030\001 \001(\005\""
  "f\n\025EventBuildingCreation\022\023\n\013building_id\030"
  "\001 \001(\005\022\017\n\007type_id\030\002 \001(\005\022\'\n\ttransform\030\003 \001("
  "\0132\024.IronGames.Transform\"/\n\030EventBuilding"
  "Destruction\022\023\n\013building_id\030\001 \001(\005\"G\n\013Comm"
  "andMove\022\017\n\007unit_id\030\001 \001(\005\022\'\n\013destination\030"
  "\002 \001(\0132\022.IronGames.Vector3\"3\n\rCommandAtta"
  "ck\022\017\n\007unit_id\030\001 \001(\005\022\021\n\ttarget_id\030\002 \001(\005\"M"
  "\n\021CommandAttackMove\022\017\n\007unit_id\030\001 \001(\005\022\'\n\013"
  "destination\030\002 \001(\0132\022.IronGames.Vector3\"\246\001"
  "\n\020EventUnitCommand\022&\n\004move\030\001 \001(\0132\026.IronG"
  "ames.CommandMoveH\000\022*\n\006attack\030\002 \001(\0132\030.Iro"
  "nGames.CommandAttackH\000\0223\n\013attack_move\030\003 "
  "\001(\0132\034.IronGames.CommandAttackMoveH\000B\t\n\007c"
  "ommand\"\035\n\033EventPlayerReadyToStartGame\"\020\n"
  "\016EventGameStart\"$\n\"EventAllPlayersReadyF"
  "orGameToStart\"\027\n\025EventPlayerLoadedGame\"6"
  "\n\025EventPlayerLoadedTile\022\035\n\004tile\030\001 \001(\0132\017."
  "IronGames.Tile\"\274\007\n\005Event\022\014\n\004time\030\001 \001(\003\022\021"
  "\n\tsender_id\030\002 \001(\005\022;\n\020player_connected\030\003 "
  "\001(\0132\037.IronGames.EventPlayerConnectedH\000\022A"
  "\n\023player_disconnected\030\004 \001(\0132\".IronGames."
  "EventPlayerDisconnectedH\000\0225\n\runit_creati"
  "on\030\005 \001(\0132\034.IronGames.EventUnitCreationH\000"
  "\022F\n\026actor_creation_request\030\006 \001(\0132$.IronG"
  "ames.EventActorCreationRequestH\000\022;\n\020unit"
  "_destruction\030\007 \001(\0132\037.IronGames.EventUnit"
  "DestructionH\000\022=\n\021building_creation\030\010 \001(\013"
  "2 .IronGames.EventBuildingCreationH\000\022C\n\024"
  "building_destruction\030\t \001(\0132#.IronGames.E"
  "ventBuildingDestructionH\000\0223\n\014unit_comman"
  "d\030\n \001(\0132\033.IronGames.EventUnitCommandH\000\022L"
  "\n\032player_ready_to_start_Game\030\013 \001(\0132&.Iro"
  "nGames.EventPlayerReadyToStartGameH\000\022/\n\n"
  "game_start\030\014 \001(\0132\031.IronGames.EventGameSt"
  "artH\000\0227\n\016player_changed\030\r \001(\0132\035.IronGame"
  "s.EventPlayerChangedH\000\022\\\n#all_players_re"
  "ady_for_game_to_start\030\016 \001(\0132-.IronGames."
  "EventAllPlayersReadyForGameToStartH\000\022>\n\022"
  "player_loaded_tile\030\017 \001(\0132 .IronGames.Eve"
  "ntPlayerLoadedTileH\000\022>\n\022player_loaded_ga"
  "me\030\020 \001(\0132 .IronGames.EventPlayerLoadedGa"
  "meH\000B\007\n\005event\"-\n\tEventList\022 \n\006events\030\001 \003"
  "(\0132\020.IronGames.Event\"E\n\017JoinGameRequest\022"
  "!\n\006player\030\001 \001(\0132\021.IronGames.Player\022\017\n\007ga"
  "me_id\030\002 \001(\005\"I\n\020JoinGameResponse\022\021\n\tplaye"
  "r_id\030\001 \001(\005\022\"\n\007players\030\002 \003(\0132\021.IronGames."
  "Player\"$\n\017ExitGameRequest\022\021\n\tplayer_id\030\001"
  " \001(\005\"\022\n\020ExitGameResponse\";\n\026SubscribeEve"
  "ntsRequest\022!\n\006player\030\001 \001(\0132\021.IronGames.P"
  "layer\"\023\n\021SendEventResponse\"\020\n\016NewGameReq"
  "uest\"\"\n\017NewGameResponse\022\017\n\007game_id\030\001 \001(\005"
  "\"!\n\016EndGameRequest\022\017\n\007game_id\030\001 \001(\005\"\021\n\017E"
  "ndGameResponse2\360\002\n\017IronGamesServer\022B\n\007Ne"
  "wGame\022\031.IronGames.NewGameRequest\032\032.IronG"
  "ames.NewGameResponse\"\000\022E\n\010JoinGame\022\032.Iro"
  "nGames.JoinGameRequest\032\033.IronGames.JoinG"
  "ameResponse\"\000\022C\n\007EndGame\022\032.IronGames.End"
  "GameResponse\032\032.IronGames.EndGameResponse"
  "\"\000\022A\n\tSendEvent\022\024.IronGames.EventList\032\034."
  "IronGames.SendEventResponse\"\000\022J\n\017Subscri"
  "beEvents\022!.IronGames.SubscribeEventsRequ"
  "est\032\020.IronGames.Event\"\0000\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_core_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_core_2eproto = {
  false, false, 5513, descriptor_table_protodef_core_2eproto, "core.proto", 
  &descriptor_table_core_2eproto_once, nullptr, 0, 49,
  schemas, file_default_instances, TableStruct_core_2eproto::offsets,
  file_level_metadata_core_2eproto, file_level_enum_descriptors_core_2eproto, file_level_service_descriptors_core_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_core_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_core_2eproto);
  return descriptor_table_core_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_core_2eproto(&descriptor_table_core_2eproto);
namespace IronGames {

// ===================================================================

class Color::_Internal {
 public:
};

Color::Color(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IronGames.Color)
}
Color::Color(const Color& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&r_, &from.r_,
    static_cast<size_t>(reinterpret_cast<char*>(&a_) -
    reinterpret_cast<char*>(&r_)) + sizeof(a_));
  // @@protoc_insertion_point(copy_constructor:IronGames.Color)
}

void Color::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&r_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&a_) -
    reinterpret_cast<char*>(&r_)) + sizeof(a_));
}

Color::~Color() {
  // @@protoc_insertion_point(destructor:IronGames.Color)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Color::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Color::ArenaDtor(void* object) {
  Color* _this = reinterpret_cast< Color* >(object);
  (void)_this;
}
void Color::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Color::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Color::Clear() {
// @@protoc_insertion_point(message_clear_start:IronGames.Color)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&a_) -
      reinterpret_cast<char*>(&r_)) + sizeof(a_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Color::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float r = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          r_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float g = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          g_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float b = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          b_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float a = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Color::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IronGames.Color)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float r = 1;
  if (!(this->r() <= 0 && this->r() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_r(), target);
  }

  // float g = 2;
  if (!(this->g() <= 0 && this->g() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_g(), target);
  }

  // float b = 3;
  if (!(this->b() <= 0 && this->b() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_b(), target);
  }

  // float a = 4;
  if (!(this->a() <= 0 && this->a() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_a(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IronGames.Color)
  return target;
}

size_t Color::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IronGames.Color)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float r = 1;
  if (!(this->r() <= 0 && this->r() >= 0)) {
    total_size += 1 + 4;
  }

  // float g = 2;
  if (!(this->g() <= 0 && this->g() >= 0)) {
    total_size += 1 + 4;
  }

  // float b = 3;
  if (!(this->b() <= 0 && this->b() >= 0)) {
    total_size += 1 + 4;
  }

  // float a = 4;
  if (!(this->a() <= 0 && this->a() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Color::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IronGames.Color)
  GOOGLE_DCHECK_NE(&from, this);
  const Color* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Color>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IronGames.Color)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IronGames.Color)
    MergeFrom(*source);
  }
}

void Color::MergeFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IronGames.Color)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.r() <= 0 && from.r() >= 0)) {
    _internal_set_r(from._internal_r());
  }
  if (!(from.g() <= 0 && from.g() >= 0)) {
    _internal_set_g(from._internal_g());
  }
  if (!(from.b() <= 0 && from.b() >= 0)) {
    _internal_set_b(from._internal_b());
  }
  if (!(from.a() <= 0 && from.a() >= 0)) {
    _internal_set_a(from._internal_a());
  }
}

void Color::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IronGames.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Color::CopyFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IronGames.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Color::IsInitialized() const {
  return true;
}

void Color::InternalSwap(Color* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Color, a_)
      + sizeof(Color::a_)
      - PROTOBUF_FIELD_OFFSET(Color, r_)>(
          reinterpret_cast<char*>(&r_),
          reinterpret_cast<char*>(&other->r_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Color::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Vector3::_Internal {
 public:
};

Vector3::Vector3(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IronGames.Vector3)
}
Vector3::Vector3(const Vector3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:IronGames.Vector3)
}

void Vector3::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Vector3::~Vector3() {
  // @@protoc_insertion_point(destructor:IronGames.Vector3)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Vector3::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Vector3::ArenaDtor(void* object) {
  Vector3* _this = reinterpret_cast< Vector3* >(object);
  (void)_this;
}
void Vector3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vector3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vector3::Clear() {
// @@protoc_insertion_point(message_clear_start:IronGames.Vector3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vector3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IronGames.Vector3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IronGames.Vector3)
  return target;
}

size_t Vector3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IronGames.Vector3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vector3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IronGames.Vector3)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vector3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IronGames.Vector3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IronGames.Vector3)
    MergeFrom(*source);
  }
}

void Vector3::MergeFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IronGames.Vector3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void Vector3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IronGames.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3::CopyFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IronGames.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3::IsInitialized() const {
  return true;
}

void Vector3::InternalSwap(Vector3* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector3, z_)
      + sizeof(Vector3::z_)
      - PROTOBUF_FIELD_OFFSET(Vector3, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector3::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Matrix3::_Internal {
 public:
  static const ::IronGames::Vector3& col0(const Matrix3* msg);
  static const ::IronGames::Vector3& col1(const Matrix3* msg);
  static const ::IronGames::Vector3& col2(const Matrix3* msg);
};

const ::IronGames::Vector3&
Matrix3::_Internal::col0(const Matrix3* msg) {
  return *msg->col0_;
}
const ::IronGames::Vector3&
Matrix3::_Internal::col1(const Matrix3* msg) {
  return *msg->col1_;
}
const ::IronGames::Vector3&
Matrix3::_Internal::col2(const Matrix3* msg) {
  return *msg->col2_;
}
Matrix3::Matrix3(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IronGames.Matrix3)
}
Matrix3::Matrix3(const Matrix3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_col0()) {
    col0_ = new ::IronGames::Vector3(*from.col0_);
  } else {
    col0_ = nullptr;
  }
  if (from._internal_has_col1()) {
    col1_ = new ::IronGames::Vector3(*from.col1_);
  } else {
    col1_ = nullptr;
  }
  if (from._internal_has_col2()) {
    col2_ = new ::IronGames::Vector3(*from.col2_);
  } else {
    col2_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:IronGames.Matrix3)
}

void Matrix3::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&col0_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&col2_) -
    reinterpret_cast<char*>(&col0_)) + sizeof(col2_));
}

Matrix3::~Matrix3() {
  // @@protoc_insertion_point(destructor:IronGames.Matrix3)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Matrix3::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete col0_;
  if (this != internal_default_instance()) delete col1_;
  if (this != internal_default_instance()) delete col2_;
}

void Matrix3::ArenaDtor(void* object) {
  Matrix3* _this = reinterpret_cast< Matrix3* >(object);
  (void)_this;
}
void Matrix3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Matrix3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Matrix3::Clear() {
// @@protoc_insertion_point(message_clear_start:IronGames.Matrix3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && col0_ != nullptr) {
    delete col0_;
  }
  col0_ = nullptr;
  if (GetArena() == nullptr && col1_ != nullptr) {
    delete col1_;
  }
  col1_ = nullptr;
  if (GetArena() == nullptr && col2_ != nullptr) {
    delete col2_;
  }
  col2_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Matrix3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .IronGames.Vector3 col0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_col0(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IronGames.Vector3 col1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_col1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IronGames.Vector3 col2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_col2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Matrix3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IronGames.Matrix3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IronGames.Vector3 col0 = 1;
  if (this->has_col0()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::col0(this), target, stream);
  }

  // .IronGames.Vector3 col1 = 2;
  if (this->has_col1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::col1(this), target, stream);
  }

  // .IronGames.Vector3 col2 = 3;
  if (this->has_col2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::col2(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IronGames.Matrix3)
  return target;
}

size_t Matrix3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IronGames.Matrix3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .IronGames.Vector3 col0 = 1;
  if (this->has_col0()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *col0_);
  }

  // .IronGames.Vector3 col1 = 2;
  if (this->has_col1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *col1_);
  }

  // .IronGames.Vector3 col2 = 3;
  if (this->has_col2()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *col2_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Matrix3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IronGames.Matrix3)
  GOOGLE_DCHECK_NE(&from, this);
  const Matrix3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Matrix3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IronGames.Matrix3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IronGames.Matrix3)
    MergeFrom(*source);
  }
}

void Matrix3::MergeFrom(const Matrix3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IronGames.Matrix3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_col0()) {
    _internal_mutable_col0()->::IronGames::Vector3::MergeFrom(from._internal_col0());
  }
  if (from.has_col1()) {
    _internal_mutable_col1()->::IronGames::Vector3::MergeFrom(from._internal_col1());
  }
  if (from.has_col2()) {
    _internal_mutable_col2()->::IronGames::Vector3::MergeFrom(from._internal_col2());
  }
}

void Matrix3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IronGames.Matrix3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Matrix3::CopyFrom(const Matrix3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IronGames.Matrix3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Matrix3::IsInitialized() const {
  return true;
}

void Matrix3::InternalSwap(Matrix3* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Matrix3, col2_)
      + sizeof(Matrix3::col2_)
      - PROTOBUF_FIELD_OFFSET(Matrix3, col0_)>(
          reinterpret_cast<char*>(&col0_),
          reinterpret_cast<char*>(&other->col0_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Matrix3::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Quaternion::_Internal {
 public:
};

Quaternion::Quaternion(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IronGames.Quaternion)
}
Quaternion::Quaternion(const Quaternion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&w_, &from.w_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&w_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:IronGames.Quaternion)
}

void Quaternion::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&w_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&w_)) + sizeof(z_));
}

Quaternion::~Quaternion() {
  // @@protoc_insertion_point(destructor:IronGames.Quaternion)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Quaternion::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Quaternion::ArenaDtor(void* object) {
  Quaternion* _this = reinterpret_cast< Quaternion* >(object);
  (void)_this;
}
void Quaternion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Quaternion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Quaternion::Clear() {
// @@protoc_insertion_point(message_clear_start:IronGames.Quaternion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&w_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&w_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Quaternion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float w = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Quaternion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IronGames.Quaternion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float w = 1;
  if (!(this->w() <= 0 && this->w() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_w(), target);
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // float z = 4;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IronGames.Quaternion)
  return target;
}

size_t Quaternion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IronGames.Quaternion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float w = 1;
  if (!(this->w() <= 0 && this->w() >= 0)) {
    total_size += 1 + 4;
  }

  // float x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 4;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Quaternion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IronGames.Quaternion)
  GOOGLE_DCHECK_NE(&from, this);
  const Quaternion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Quaternion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IronGames.Quaternion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IronGames.Quaternion)
    MergeFrom(*source);
  }
}

void Quaternion::MergeFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IronGames.Quaternion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.w() <= 0 && from.w() >= 0)) {
    _internal_set_w(from._internal_w());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void Quaternion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IronGames.Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quaternion::CopyFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IronGames.Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quaternion::IsInitialized() const {
  return true;
}

void Quaternion::InternalSwap(Quaternion* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Quaternion, z_)
      + sizeof(Quaternion::z_)
      - PROTOBUF_FIELD_OFFSET(Quaternion, w_)>(
          reinterpret_cast<char*>(&w_),
          reinterpret_cast<char*>(&other->w_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Quaternion::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Transform::_Internal {
 public:
  static const ::IronGames::Vector3& position(const Transform* msg);
  static const ::IronGames::Quaternion& rotation(const Transform* msg);
};

const ::IronGames::Vector3&
Transform::_Internal::position(const Transform* msg) {
  return *msg->position_;
}
const ::IronGames::Quaternion&
Transform::_Internal::rotation(const Transform* msg) {
  return *msg->rotation_;
}
Transform::Transform(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IronGames.Transform)
}
Transform::Transform(const Transform& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::IronGames::Vector3(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_rotation()) {
    rotation_ = new ::IronGames::Quaternion(*from.rotation_);
  } else {
    rotation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:IronGames.Transform)
}

void Transform::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rotation_) -
    reinterpret_cast<char*>(&position_)) + sizeof(rotation_));
}

Transform::~Transform() {
  // @@protoc_insertion_point(destructor:IronGames.Transform)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Transform::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete rotation_;
}

void Transform::ArenaDtor(void* object) {
  Transform* _this = reinterpret_cast< Transform* >(object);
  (void)_this;
}
void Transform::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transform::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Transform::Clear() {
// @@protoc_insertion_point(message_clear_start:IronGames.Transform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArena() == nullptr && rotation_ != nullptr) {
    delete rotation_;
  }
  rotation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transform::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .IronGames.Vector3 position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IronGames.Quaternion rotation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transform::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IronGames.Transform)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IronGames.Vector3 position = 1;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  // .IronGames.Quaternion rotation = 2;
  if (this->has_rotation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rotation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IronGames.Transform)
  return target;
}

size_t Transform::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IronGames.Transform)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .IronGames.Vector3 position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .IronGames.Quaternion rotation = 2;
  if (this->has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rotation_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transform::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IronGames.Transform)
  GOOGLE_DCHECK_NE(&from, this);
  const Transform* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transform>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IronGames.Transform)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IronGames.Transform)
    MergeFrom(*source);
  }
}

void Transform::MergeFrom(const Transform& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IronGames.Transform)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    _internal_mutable_position()->::IronGames::Vector3::MergeFrom(from._internal_position());
  }
  if (from.has_rotation()) {
    _internal_mutable_rotation()->::IronGames::Quaternion::MergeFrom(from._internal_rotation());
  }
}

void Transform::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IronGames.Transform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transform::CopyFrom(const Transform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IronGames.Transform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transform::IsInitialized() const {
  return true;
}

void Transform::InternalSwap(Transform* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transform, rotation_)
      + sizeof(Transform::rotation_)
      - PROTOBUF_FIELD_OFFSET(Transform, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Transform::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Parameter::_Internal {
 public:
  static const ::IronGames::Vector3& val_vector3(const Parameter* msg);
  static const ::IronGames::Color& color(const Parameter* msg);
};

const ::IronGames::Vector3&
Parameter::_Internal::val_vector3(const Parameter* msg) {
  return *msg->value_.val_vector3_;
}
const ::IronGames::Color&
Parameter::_Internal::color(const Parameter* msg) {
  return *msg->value_.color_;
}
void Parameter::set_allocated_val_vector3(::IronGames::Vector3* val_vector3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value();
  if (val_vector3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(val_vector3);
    if (message_arena != submessage_arena) {
      val_vector3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, val_vector3, submessage_arena);
    }
    set_has_val_vector3();
    value_.val_vector3_ = val_vector3;
  }
  // @@protoc_insertion_point(field_set_allocated:IronGames.Parameter.val_vector3)
}
void Parameter::set_allocated_color(::IronGames::Color* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_value();
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(color);
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    set_has_color();
    value_.color_ = color;
  }
  // @@protoc_insertion_point(field_set_allocated:IronGames.Parameter.color)
}
Parameter::Parameter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IronGames.Parameter)
}
Parameter::Parameter(const Parameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_ = from.name_;
  clear_has_value();
  switch (from.value_case()) {
    case kValFloat: {
      _internal_set_val_float(from._internal_val_float());
      break;
    }
    case kValInt: {
      _internal_set_val_int(from._internal_val_int());
      break;
    }
    case kValString: {
      _internal_set_val_string(from._internal_val_string());
      break;
    }
    case kValVector3: {
      _internal_mutable_val_vector3()->::IronGames::Vector3::MergeFrom(from._internal_val_vector3());
      break;
    }
    case kColor: {
      _internal_mutable_color()->::IronGames::Color::MergeFrom(from._internal_color());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:IronGames.Parameter)
}

void Parameter::SharedCtor() {
name_ = 0;
clear_has_value();
}

Parameter::~Parameter() {
  // @@protoc_insertion_point(destructor:IronGames.Parameter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Parameter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void Parameter::ArenaDtor(void* object) {
  Parameter* _this = reinterpret_cast< Parameter* >(object);
  (void)_this;
}
void Parameter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Parameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Parameter::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:IronGames.Parameter)
  switch (value_case()) {
    case kValFloat: {
      // No need to clear
      break;
    }
    case kValInt: {
      // No need to clear
      break;
    }
    case kValString: {
      value_.val_string_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case kValVector3: {
      if (GetArena() == nullptr) {
        delete value_.val_vector3_;
      }
      break;
    }
    case kColor: {
      if (GetArena() == nullptr) {
        delete value_.color_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void Parameter::Clear() {
// @@protoc_insertion_point(message_clear_start:IronGames.Parameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_ = 0;
  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Parameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          name_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float val_float = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _internal_set_val_float(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 val_int = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_val_int(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string val_string = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_val_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "IronGames.Parameter.val_string"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IronGames.Vector3 val_vector3 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_val_vector3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IronGames.Color color = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Parameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IronGames.Parameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 name = 1;
  if (this->name() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_name(), target);
  }

  // float val_float = 2;
  if (_internal_has_val_float()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_val_float(), target);
  }

  // int32 val_int = 3;
  if (_internal_has_val_int()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_val_int(), target);
  }

  // string val_string = 4;
  if (_internal_has_val_string()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_val_string().data(), static_cast<int>(this->_internal_val_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IronGames.Parameter.val_string");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_val_string(), target);
  }

  // .IronGames.Vector3 val_vector3 = 5;
  if (_internal_has_val_vector3()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::val_vector3(this), target, stream);
  }

  // .IronGames.Color color = 6;
  if (_internal_has_color()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::color(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IronGames.Parameter)
  return target;
}

size_t Parameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IronGames.Parameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 name = 1;
  if (this->name() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_name());
  }

  switch (value_case()) {
    // float val_float = 2;
    case kValFloat: {
      total_size += 1 + 4;
      break;
    }
    // int32 val_int = 3;
    case kValInt: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_val_int());
      break;
    }
    // string val_string = 4;
    case kValString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_val_string());
      break;
    }
    // .IronGames.Vector3 val_vector3 = 5;
    case kValVector3: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.val_vector3_);
      break;
    }
    // .IronGames.Color color = 6;
    case kColor: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.color_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Parameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IronGames.Parameter)
  GOOGLE_DCHECK_NE(&from, this);
  const Parameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Parameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IronGames.Parameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IronGames.Parameter)
    MergeFrom(*source);
  }
}

void Parameter::MergeFrom(const Parameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IronGames.Parameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name() != 0) {
    _internal_set_name(from._internal_name());
  }
  switch (from.value_case()) {
    case kValFloat: {
      _internal_set_val_float(from._internal_val_float());
      break;
    }
    case kValInt: {
      _internal_set_val_int(from._internal_val_int());
      break;
    }
    case kValString: {
      _internal_set_val_string(from._internal_val_string());
      break;
    }
    case kValVector3: {
      _internal_mutable_val_vector3()->::IronGames::Vector3::MergeFrom(from._internal_val_vector3());
      break;
    }
    case kColor: {
      _internal_mutable_color()->::IronGames::Color::MergeFrom(from._internal_color());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void Parameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IronGames.Parameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Parameter::CopyFrom(const Parameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IronGames.Parameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parameter::IsInitialized() const {
  return true;
}

void Parameter::InternalSwap(Parameter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(name_, other->name_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Parameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Player::_Internal {
 public:
  static const ::IronGames::Color& color(const Player* msg);
};

const ::IronGames::Color&
Player::_Internal::color(const Player* msg) {
  return *msg->color_;
}
Player::Player(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IronGames.Player)
}
Player::Player(const Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_color()) {
    color_ = new ::IronGames::Color(*from.color_);
  } else {
    color_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_host_) -
    reinterpret_cast<char*>(&id_)) + sizeof(is_host_));
  // @@protoc_insertion_point(copy_constructor:IronGames.Player)
}

void Player::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&color_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_host_) -
    reinterpret_cast<char*>(&color_)) + sizeof(is_host_));
}

Player::~Player() {
  // @@protoc_insertion_point(destructor:IronGames.Player)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Player::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete color_;
}

void Player::ArenaDtor(void* object) {
  Player* _this = reinterpret_cast< Player* >(object);
  (void)_this;
}
void Player::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Player::Clear() {
// @@protoc_insertion_point(message_clear_start:IronGames.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArena() == nullptr && color_ != nullptr) {
    delete color_;
  }
  color_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_host_) -
      reinterpret_cast<char*>(&id_)) + sizeof(is_host_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Player::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "IronGames.Player.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IronGames.Color color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 row = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 col = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          col_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float rotation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          rotation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 team_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_host = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          is_host_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Player::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IronGames.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IronGames.Player.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .IronGames.Color color = 2;
  if (this->has_color()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::color(this), target, stream);
  }

  // int32 id = 3;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_id(), target);
  }

  // int32 row = 4;
  if (this->row() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_row(), target);
  }

  // int32 col = 5;
  if (this->col() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_col(), target);
  }

  // float rotation = 6;
  if (!(this->rotation() <= 0 && this->rotation() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_rotation(), target);
  }

  // int32 team_id = 7;
  if (this->team_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_team_id(), target);
  }

  // bool is_host = 8;
  if (this->is_host() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_is_host(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IronGames.Player)
  return target;
}

size_t Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IronGames.Player)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .IronGames.Color color = 2;
  if (this->has_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *color_);
  }

  // int32 id = 3;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 row = 4;
  if (this->row() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_row());
  }

  // int32 col = 5;
  if (this->col() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_col());
  }

  // float rotation = 6;
  if (!(this->rotation() <= 0 && this->rotation() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 team_id = 7;
  if (this->team_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_team_id());
  }

  // bool is_host = 8;
  if (this->is_host() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Player::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IronGames.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const Player* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Player>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IronGames.Player)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IronGames.Player)
    MergeFrom(*source);
  }
}

void Player::MergeFrom(const Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IronGames.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_color()) {
    _internal_mutable_color()->::IronGames::Color::MergeFrom(from._internal_color());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.row() != 0) {
    _internal_set_row(from._internal_row());
  }
  if (from.col() != 0) {
    _internal_set_col(from._internal_col());
  }
  if (!(from.rotation() <= 0 && from.rotation() >= 0)) {
    _internal_set_rotation(from._internal_rotation());
  }
  if (from.team_id() != 0) {
    _internal_set_team_id(from._internal_team_id());
  }
  if (from.is_host() != 0) {
    _internal_set_is_host(from._internal_is_host());
  }
}

void Player::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IronGames.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Player::CopyFrom(const Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IronGames.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player::IsInitialized() const {
  return true;
}

void Player::InternalSwap(Player* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Player, is_host_)
      + sizeof(Player::is_host_)
      - PROTOBUF_FIELD_OFFSET(Player, color_)>(
          reinterpret_cast<char*>(&color_),
          reinterpret_cast<char*>(&other->color_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Player::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Actor::_Internal {
 public:
  static const ::IronGames::Transform& transform(const Actor* msg);
};

const ::IronGames::Transform&
Actor::_Internal::transform(const Actor* msg) {
  return *msg->transform_;
}
Actor::Actor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  parameters_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IronGames.Actor)
}
Actor::Actor(const Actor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      parameters_(from.parameters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transform()) {
    transform_ = new ::IronGames::Transform(*from.transform_);
  } else {
    transform_ = nullptr;
  }
  ::memcpy(&unit_id_, &from.unit_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&owner_id_) -
    reinterpret_cast<char*>(&unit_id_)) + sizeof(owner_id_));
  // @@protoc_insertion_point(copy_constructor:IronGames.Actor)
}

void Actor::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&transform_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&owner_id_) -
    reinterpret_cast<char*>(&transform_)) + sizeof(owner_id_));
}

Actor::~Actor() {
  // @@protoc_insertion_point(destructor:IronGames.Actor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Actor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete transform_;
}

void Actor::ArenaDtor(void* object) {
  Actor* _this = reinterpret_cast< Actor* >(object);
  (void)_this;
}
void Actor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Actor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Actor::Clear() {
// @@protoc_insertion_point(message_clear_start:IronGames.Actor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parameters_.Clear();
  if (GetArena() == nullptr && transform_ != nullptr) {
    delete transform_;
  }
  transform_ = nullptr;
  ::memset(&unit_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&owner_id_) -
      reinterpret_cast<char*>(&unit_id_)) + sizeof(owner_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Actor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 unit_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          unit_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 owner_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          owner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IronGames.Transform transform = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_transform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .IronGames.Parameter parameters = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parameters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Actor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IronGames.Actor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 unit_id = 1;
  if (this->unit_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_unit_id(), target);
  }

  // int32 type_id = 2;
  if (this->type_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type_id(), target);
  }

  // int32 owner_id = 3;
  if (this->owner_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_owner_id(), target);
  }

  // .IronGames.Transform transform = 4;
  if (this->has_transform()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::transform(this), target, stream);
  }

  // repeated .IronGames.Parameter parameters = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_parameters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_parameters(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IronGames.Actor)
  return target;
}

size_t Actor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IronGames.Actor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IronGames.Parameter parameters = 5;
  total_size += 1UL * this->_internal_parameters_size();
  for (const auto& msg : this->parameters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .IronGames.Transform transform = 4;
  if (this->has_transform()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transform_);
  }

  // int32 unit_id = 1;
  if (this->unit_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_unit_id());
  }

  // int32 type_id = 2;
  if (this->type_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type_id());
  }

  // int32 owner_id = 3;
  if (this->owner_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_owner_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Actor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IronGames.Actor)
  GOOGLE_DCHECK_NE(&from, this);
  const Actor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Actor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IronGames.Actor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IronGames.Actor)
    MergeFrom(*source);
  }
}

void Actor::MergeFrom(const Actor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IronGames.Actor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  parameters_.MergeFrom(from.parameters_);
  if (from.has_transform()) {
    _internal_mutable_transform()->::IronGames::Transform::MergeFrom(from._internal_transform());
  }
  if (from.unit_id() != 0) {
    _internal_set_unit_id(from._internal_unit_id());
  }
  if (from.type_id() != 0) {
    _internal_set_type_id(from._internal_type_id());
  }
  if (from.owner_id() != 0) {
    _internal_set_owner_id(from._internal_owner_id());
  }
}

void Actor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IronGames.Actor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Actor::CopyFrom(const Actor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IronGames.Actor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Actor::IsInitialized() const {
  return true;
}

void Actor::InternalSwap(Actor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  parameters_.InternalSwap(&other->parameters_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Actor, owner_id_)
      + sizeof(Actor::owner_id_)
      - PROTOBUF_FIELD_OFFSET(Actor, transform_)>(
          reinterpret_cast<char*>(&transform_),
          reinterpret_cast<char*>(&other->transform_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Actor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Tile::_Internal {
 public:
  static const ::IronGames::PlayerAssets& player_assets(const Tile* msg);
};

const ::IronGames::PlayerAssets&
Tile::_Internal::player_assets(const Tile* msg) {
  return *msg->player_assets_;
}
Tile::Tile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  actors_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IronGames.Tile)
}
Tile::Tile(const Tile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      actors_(from.actors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_assets()) {
    player_assets_ = new ::IronGames::PlayerAssets(*from.player_assets_);
  } else {
    player_assets_ = nullptr;
  }
  terrain_id_ = from.terrain_id_;
  // @@protoc_insertion_point(copy_constructor:IronGames.Tile)
}

void Tile::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_assets_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&terrain_id_) -
    reinterpret_cast<char*>(&player_assets_)) + sizeof(terrain_id_));
}

Tile::~Tile() {
  // @@protoc_insertion_point(destructor:IronGames.Tile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Tile::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete player_assets_;
}

void Tile::ArenaDtor(void* object) {
  Tile* _this = reinterpret_cast< Tile* >(object);
  (void)_this;
}
void Tile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Tile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Tile::Clear() {
// @@protoc_insertion_point(message_clear_start:IronGames.Tile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actors_.Clear();
  if (GetArena() == nullptr && player_assets_ != nullptr) {
    delete player_assets_;
  }
  player_assets_ = nullptr;
  terrain_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Tile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 terrain_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          terrain_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .IronGames.Actor actors = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_actors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .IronGames.PlayerAssets player_assets = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_assets(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Tile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IronGames.Tile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 terrain_id = 1;
  if (this->terrain_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_terrain_id(), target);
  }

  // repeated .IronGames.Actor actors = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_actors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_actors(i), target, stream);
  }

  // .IronGames.PlayerAssets player_assets = 3;
  if (this->has_player_assets()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::player_assets(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IronGames.Tile)
  return target;
}

size_t Tile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IronGames.Tile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IronGames.Actor actors = 2;
  total_size += 1UL * this->_internal_actors_size();
  for (const auto& msg : this->actors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .IronGames.PlayerAssets player_assets = 3;
  if (this->has_player_assets()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_assets_);
  }

  // int32 terrain_id = 1;
  if (this->terrain_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_terrain_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IronGames.Tile)
  GOOGLE_DCHECK_NE(&from, this);
  const Tile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Tile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IronGames.Tile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IronGames.Tile)
    MergeFrom(*source);
  }
}

void Tile::MergeFrom(const Tile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IronGames.Tile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  actors_.MergeFrom(from.actors_);
  if (from.has_player_assets()) {
    _internal_mutable_player_assets()->::IronGames::PlayerAssets::MergeFrom(from._internal_player_assets());
  }
  if (from.terrain_id() != 0) {
    _internal_set_terrain_id(from._internal_terrain_id());
  }
}

void Tile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IronGames.Tile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tile::CopyFrom(const Tile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IronGames.Tile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tile::IsInitialized() const {
  return true;
}

void Tile::InternalSwap(Tile* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  actors_.InternalSwap(&other->actors_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Tile, terrain_id_)
      + sizeof(Tile::terrain_id_)
      - PROTOBUF_FIELD_OFFSET(Tile, player_assets_)>(
          reinterpret_cast<char*>(&player_assets_),
          reinterpret_cast<char*>(&other->player_assets_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Tile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SimulationVertex::_Internal {
 public:
  static const ::IronGames::Vector3& position(const SimulationVertex* msg);
  static const ::IronGames::Vector3& material_coordinates(const SimulationVertex* msg);
  static const ::IronGames::Vector3& velocity(const SimulationVertex* msg);
  static const ::IronGames::Vector3& force(const SimulationVertex* msg);
  static const ::IronGames::Vector3& principal_eigenvector(const SimulationVertex* msg);
  static const ::IronGames::Matrix3& separation_tensor(const SimulationVertex* msg);
};

const ::IronGames::Vector3&
SimulationVertex::_Internal::position(const SimulationVertex* msg) {
  return *msg->position_;
}
const ::IronGames::Vector3&
SimulationVertex::_Internal::material_coordinates(const SimulationVertex* msg) {
  return *msg->material_coordinates_;
}
const ::IronGames::Vector3&
SimulationVertex::_Internal::velocity(const SimulationVertex* msg) {
  return *msg->velocity_;
}
const ::IronGames::Vector3&
SimulationVertex::_Internal::force(const SimulationVertex* msg) {
  return *msg->force_;
}
const ::IronGames::Vector3&
SimulationVertex::_Internal::principal_eigenvector(const SimulationVertex* msg) {
  return *msg->principal_eigenvector_;
}
const ::IronGames::Matrix3&
SimulationVertex::_Internal::separation_tensor(const SimulationVertex* msg) {
  return *msg->separation_tensor_;
}
SimulationVertex::SimulationVertex(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  compressive_forces_(arena),
  tensile_forces_(arena),
  collision_forces_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IronGames.SimulationVertex)
}
SimulationVertex::SimulationVertex(const SimulationVertex& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      compressive_forces_(from.compressive_forces_),
      tensile_forces_(from.tensile_forces_),
      collision_forces_(from.collision_forces_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::IronGames::Vector3(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_material_coordinates()) {
    material_coordinates_ = new ::IronGames::Vector3(*from.material_coordinates_);
  } else {
    material_coordinates_ = nullptr;
  }
  if (from._internal_has_velocity()) {
    velocity_ = new ::IronGames::Vector3(*from.velocity_);
  } else {
    velocity_ = nullptr;
  }
  if (from._internal_has_force()) {
    force_ = new ::IronGames::Vector3(*from.force_);
  } else {
    force_ = nullptr;
  }
  if (from._internal_has_principal_eigenvector()) {
    principal_eigenvector_ = new ::IronGames::Vector3(*from.principal_eigenvector_);
  } else {
    principal_eigenvector_ = nullptr;
  }
  if (from._internal_has_separation_tensor()) {
    separation_tensor_ = new ::IronGames::Matrix3(*from.separation_tensor_);
  } else {
    separation_tensor_ = nullptr;
  }
  ::memcpy(&mass_, &from.mass_,
    static_cast<size_t>(reinterpret_cast<char*>(&largest_eigenvalue_) -
    reinterpret_cast<char*>(&mass_)) + sizeof(largest_eigenvalue_));
  // @@protoc_insertion_point(copy_constructor:IronGames.SimulationVertex)
}

void SimulationVertex::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&largest_eigenvalue_) -
    reinterpret_cast<char*>(&position_)) + sizeof(largest_eigenvalue_));
}

SimulationVertex::~SimulationVertex() {
  // @@protoc_insertion_point(destructor:IronGames.SimulationVertex)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SimulationVertex::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete material_coordinates_;
  if (this != internal_default_instance()) delete velocity_;
  if (this != internal_default_instance()) delete force_;
  if (this != internal_default_instance()) delete principal_eigenvector_;
  if (this != internal_default_instance()) delete separation_tensor_;
}

void SimulationVertex::ArenaDtor(void* object) {
  SimulationVertex* _this = reinterpret_cast< SimulationVertex* >(object);
  (void)_this;
}
void SimulationVertex::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimulationVertex::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SimulationVertex::Clear() {
// @@protoc_insertion_point(message_clear_start:IronGames.SimulationVertex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  compressive_forces_.Clear();
  tensile_forces_.Clear();
  collision_forces_.Clear();
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArena() == nullptr && material_coordinates_ != nullptr) {
    delete material_coordinates_;
  }
  material_coordinates_ = nullptr;
  if (GetArena() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
  if (GetArena() == nullptr && force_ != nullptr) {
    delete force_;
  }
  force_ = nullptr;
  if (GetArena() == nullptr && principal_eigenvector_ != nullptr) {
    delete principal_eigenvector_;
  }
  principal_eigenvector_ = nullptr;
  if (GetArena() == nullptr && separation_tensor_ != nullptr) {
    delete separation_tensor_;
  }
  separation_tensor_ = nullptr;
  ::memset(&mass_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&largest_eigenvalue_) -
      reinterpret_cast<char*>(&mass_)) + sizeof(largest_eigenvalue_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimulationVertex::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .IronGames.Vector3 position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IronGames.Vector3 material_coordinates = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_material_coordinates(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IronGames.Vector3 velocity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float mass = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          mass_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .IronGames.Vector3 force = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_force(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float largest_eigenvalue = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          largest_eigenvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .IronGames.Vector3 principal_eigenvector = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_principal_eigenvector(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .IronGames.Vector3 compressive_forces = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_compressive_forces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .IronGames.Vector3 tensile_forces = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tensile_forces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .IronGames.Vector3 collision_forces = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_collision_forces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // .IronGames.Matrix3 separation_tensor = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_separation_tensor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimulationVertex::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IronGames.SimulationVertex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IronGames.Vector3 position = 1;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  // .IronGames.Vector3 material_coordinates = 2;
  if (this->has_material_coordinates()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::material_coordinates(this), target, stream);
  }

  // .IronGames.Vector3 velocity = 3;
  if (this->has_velocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::velocity(this), target, stream);
  }

  // float mass = 4;
  if (!(this->mass() <= 0 && this->mass() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_mass(), target);
  }

  // .IronGames.Vector3 force = 5;
  if (this->has_force()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::force(this), target, stream);
  }

  // float largest_eigenvalue = 6;
  if (!(this->largest_eigenvalue() <= 0 && this->largest_eigenvalue() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_largest_eigenvalue(), target);
  }

  // .IronGames.Vector3 principal_eigenvector = 7;
  if (this->has_principal_eigenvector()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::principal_eigenvector(this), target, stream);
  }

  // repeated .IronGames.Vector3 compressive_forces = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_compressive_forces_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_compressive_forces(i), target, stream);
  }

  // repeated .IronGames.Vector3 tensile_forces = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tensile_forces_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_tensile_forces(i), target, stream);
  }

  // repeated .IronGames.Vector3 collision_forces = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_collision_forces_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_collision_forces(i), target, stream);
  }

  // .IronGames.Matrix3 separation_tensor = 11;
  if (this->has_separation_tensor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::separation_tensor(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IronGames.SimulationVertex)
  return target;
}

size_t SimulationVertex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IronGames.SimulationVertex)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IronGames.Vector3 compressive_forces = 8;
  total_size += 1UL * this->_internal_compressive_forces_size();
  for (const auto& msg : this->compressive_forces_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .IronGames.Vector3 tensile_forces = 9;
  total_size += 1UL * this->_internal_tensile_forces_size();
  for (const auto& msg : this->tensile_forces_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .IronGames.Vector3 collision_forces = 10;
  total_size += 1UL * this->_internal_collision_forces_size();
  for (const auto& msg : this->collision_forces_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .IronGames.Vector3 position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .IronGames.Vector3 material_coordinates = 2;
  if (this->has_material_coordinates()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *material_coordinates_);
  }

  // .IronGames.Vector3 velocity = 3;
  if (this->has_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *velocity_);
  }

  // .IronGames.Vector3 force = 5;
  if (this->has_force()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *force_);
  }

  // .IronGames.Vector3 principal_eigenvector = 7;
  if (this->has_principal_eigenvector()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *principal_eigenvector_);
  }

  // .IronGames.Matrix3 separation_tensor = 11;
  if (this->has_separation_tensor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *separation_tensor_);
  }

  // float mass = 4;
  if (!(this->mass() <= 0 && this->mass() >= 0)) {
    total_size += 1 + 4;
  }

  // float largest_eigenvalue = 6;
  if (!(this->largest_eigenvalue() <= 0 && this->largest_eigenvalue() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimulationVertex::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IronGames.SimulationVertex)
  GOOGLE_DCHECK_NE(&from, this);
  const SimulationVertex* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimulationVertex>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IronGames.SimulationVertex)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IronGames.SimulationVertex)
    MergeFrom(*source);
  }
}

void SimulationVertex::MergeFrom(const SimulationVertex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IronGames.SimulationVertex)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  compressive_forces_.MergeFrom(from.compressive_forces_);
  tensile_forces_.MergeFrom(from.tensile_forces_);
  collision_forces_.MergeFrom(from.collision_forces_);
  if (from.has_position()) {
    _internal_mutable_position()->::IronGames::Vector3::MergeFrom(from._internal_position());
  }
  if (from.has_material_coordinates()) {
    _internal_mutable_material_coordinates()->::IronGames::Vector3::MergeFrom(from._internal_material_coordinates());
  }
  if (from.has_velocity()) {
    _internal_mutable_velocity()->::IronGames::Vector3::MergeFrom(from._internal_velocity());
  }
  if (from.has_force()) {
    _internal_mutable_force()->::IronGames::Vector3::MergeFrom(from._internal_force());
  }
  if (from.has_principal_eigenvector()) {
    _internal_mutable_principal_eigenvector()->::IronGames::Vector3::MergeFrom(from._internal_principal_eigenvector());
  }
  if (from.has_separation_tensor()) {
    _internal_mutable_separation_tensor()->::IronGames::Matrix3::MergeFrom(from._internal_separation_tensor());
  }
  if (!(from.mass() <= 0 && from.mass() >= 0)) {
    _internal_set_mass(from._internal_mass());
  }
  if (!(from.largest_eigenvalue() <= 0 && from.largest_eigenvalue() >= 0)) {
    _internal_set_largest_eigenvalue(from._internal_largest_eigenvalue());
  }
}

void SimulationVertex::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IronGames.SimulationVertex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimulationVertex::CopyFrom(const SimulationVertex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IronGames.SimulationVertex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimulationVertex::IsInitialized() const {
  return true;
}

void SimulationVertex::InternalSwap(SimulationVertex* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  compressive_forces_.InternalSwap(&other->compressive_forces_);
  tensile_forces_.InternalSwap(&other->tensile_forces_);
  collision_forces_.InternalSwap(&other->collision_forces_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimulationVertex, largest_eigenvalue_)
      + sizeof(SimulationVertex::largest_eigenvalue_)
      - PROTOBUF_FIELD_OFFSET(SimulationVertex, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimulationVertex::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SimulationTetrahedra::_Internal {
 public:
  static const ::IronGames::Matrix3& strain_tensor(const SimulationTetrahedra* msg);
  static const ::IronGames::Matrix3& stress_tensor(const SimulationTetrahedra* msg);
};

const ::IronGames::Matrix3&
SimulationTetrahedra::_Internal::strain_tensor(const SimulationTetrahedra* msg) {
  return *msg->strain_tensor_;
}
const ::IronGames::Matrix3&
SimulationTetrahedra::_Internal::stress_tensor(const SimulationTetrahedra* msg) {
  return *msg->stress_tensor_;
}
SimulationTetrahedra::SimulationTetrahedra(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  indices_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IronGames.SimulationTetrahedra)
}
SimulationTetrahedra::SimulationTetrahedra(const SimulationTetrahedra& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      indices_(from.indices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_strain_tensor()) {
    strain_tensor_ = new ::IronGames::Matrix3(*from.strain_tensor_);
  } else {
    strain_tensor_ = nullptr;
  }
  if (from._internal_has_stress_tensor()) {
    stress_tensor_ = new ::IronGames::Matrix3(*from.stress_tensor_);
  } else {
    stress_tensor_ = nullptr;
  }
  ::memcpy(&mass_, &from.mass_,
    static_cast<size_t>(reinterpret_cast<char*>(&volume_) -
    reinterpret_cast<char*>(&mass_)) + sizeof(volume_));
  // @@protoc_insertion_point(copy_constructor:IronGames.SimulationTetrahedra)
}

void SimulationTetrahedra::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&strain_tensor_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&volume_) -
    reinterpret_cast<char*>(&strain_tensor_)) + sizeof(volume_));
}

SimulationTetrahedra::~SimulationTetrahedra() {
  // @@protoc_insertion_point(destructor:IronGames.SimulationTetrahedra)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SimulationTetrahedra::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete strain_tensor_;
  if (this != internal_default_instance()) delete stress_tensor_;
}

void SimulationTetrahedra::ArenaDtor(void* object) {
  SimulationTetrahedra* _this = reinterpret_cast< SimulationTetrahedra* >(object);
  (void)_this;
}
void SimulationTetrahedra::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimulationTetrahedra::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SimulationTetrahedra::Clear() {
// @@protoc_insertion_point(message_clear_start:IronGames.SimulationTetrahedra)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  indices_.Clear();
  if (GetArena() == nullptr && strain_tensor_ != nullptr) {
    delete strain_tensor_;
  }
  strain_tensor_ = nullptr;
  if (GetArena() == nullptr && stress_tensor_ != nullptr) {
    delete stress_tensor_;
  }
  stress_tensor_ = nullptr;
  ::memset(&mass_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&volume_) -
      reinterpret_cast<char*>(&mass_)) + sizeof(volume_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimulationTetrahedra::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float mass = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          mass_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float volume = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated int32 indices = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_indices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IronGames.Matrix3 strain_tensor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_strain_tensor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IronGames.Matrix3 stress_tensor = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_stress_tensor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimulationTetrahedra::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IronGames.SimulationTetrahedra)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float mass = 1;
  if (!(this->mass() <= 0 && this->mass() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_mass(), target);
  }

  // float volume = 2;
  if (!(this->volume() <= 0 && this->volume() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_volume(), target);
  }

  // repeated int32 indices = 3;
  {
    int byte_size = _indices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_indices(), byte_size, target);
    }
  }

  // .IronGames.Matrix3 strain_tensor = 4;
  if (this->has_strain_tensor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::strain_tensor(this), target, stream);
  }

  // .IronGames.Matrix3 stress_tensor = 5;
  if (this->has_stress_tensor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::stress_tensor(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IronGames.SimulationTetrahedra)
  return target;
}

size_t SimulationTetrahedra::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IronGames.SimulationTetrahedra)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 indices = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->indices_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _indices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .IronGames.Matrix3 strain_tensor = 4;
  if (this->has_strain_tensor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *strain_tensor_);
  }

  // .IronGames.Matrix3 stress_tensor = 5;
  if (this->has_stress_tensor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stress_tensor_);
  }

  // float mass = 1;
  if (!(this->mass() <= 0 && this->mass() >= 0)) {
    total_size += 1 + 4;
  }

  // float volume = 2;
  if (!(this->volume() <= 0 && this->volume() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimulationTetrahedra::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IronGames.SimulationTetrahedra)
  GOOGLE_DCHECK_NE(&from, this);
  const SimulationTetrahedra* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimulationTetrahedra>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IronGames.SimulationTetrahedra)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IronGames.SimulationTetrahedra)
    MergeFrom(*source);
  }
}

void SimulationTetrahedra::MergeFrom(const SimulationTetrahedra& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IronGames.SimulationTetrahedra)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  indices_.MergeFrom(from.indices_);
  if (from.has_strain_tensor()) {
    _internal_mutable_strain_tensor()->::IronGames::Matrix3::MergeFrom(from._internal_strain_tensor());
  }
  if (from.has_stress_tensor()) {
    _internal_mutable_stress_tensor()->::IronGames::Matrix3::MergeFrom(from._internal_stress_tensor());
  }
  if (!(from.mass() <= 0 && from.mass() >= 0)) {
    _internal_set_mass(from._internal_mass());
  }
  if (!(from.volume() <= 0 && from.volume() >= 0)) {
    _internal_set_volume(from._internal_volume());
  }
}

void SimulationTetrahedra::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IronGames.SimulationTetrahedra)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimulationTetrahedra::CopyFrom(const SimulationTetrahedra& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IronGames.SimulationTetrahedra)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimulationTetrahedra::IsInitialized() const {
  return true;
}

void SimulationTetrahedra::InternalSwap(SimulationTetrahedra* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  indices_.InternalSwap(&other->indices_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimulationTetrahedra, volume_)
      + sizeof(SimulationTetrahedra::volume_)
      - PROTOBUF_FIELD_OFFSET(SimulationTetrahedra, strain_tensor_)>(
          reinterpret_cast<char*>(&strain_tensor_),
          reinterpret_cast<char*>(&other->strain_tensor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimulationTetrahedra::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SimulationFrame::_Internal {
 public:
};

SimulationFrame::SimulationFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vertices_(arena),
  tetrahedra_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IronGames.SimulationFrame)
}
SimulationFrame::SimulationFrame(const SimulationFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vertices_(from.vertices_),
      tetrahedra_(from.tetrahedra_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:IronGames.SimulationFrame)
}

void SimulationFrame::SharedCtor() {
time_ = 0;
}

SimulationFrame::~SimulationFrame() {
  // @@protoc_insertion_point(destructor:IronGames.SimulationFrame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SimulationFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SimulationFrame::ArenaDtor(void* object) {
  SimulationFrame* _this = reinterpret_cast< SimulationFrame* >(object);
  (void)_this;
}
void SimulationFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimulationFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SimulationFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:IronGames.SimulationFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vertices_.Clear();
  tetrahedra_.Clear();
  time_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimulationFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .IronGames.SimulationVertex vertices = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vertices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .IronGames.SimulationTetrahedra tetrahedra = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tetrahedra(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimulationFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IronGames.SimulationFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float time = 1;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_time(), target);
  }

  // repeated .IronGames.SimulationVertex vertices = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vertices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_vertices(i), target, stream);
  }

  // repeated .IronGames.SimulationTetrahedra tetrahedra = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tetrahedra_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_tetrahedra(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IronGames.SimulationFrame)
  return target;
}

size_t SimulationFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IronGames.SimulationFrame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IronGames.SimulationVertex vertices = 2;
  total_size += 1UL * this->_internal_vertices_size();
  for (const auto& msg : this->vertices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .IronGames.SimulationTetrahedra tetrahedra = 3;
  total_size += 1UL * this->_internal_tetrahedra_size();
  for (const auto& msg : this->tetrahedra_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // float time = 1;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimulationFrame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IronGames.SimulationFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const SimulationFrame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimulationFrame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IronGames.SimulationFrame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IronGames.SimulationFrame)
    MergeFrom(*source);
  }
}

void SimulationFrame::MergeFrom(const SimulationFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IronGames.SimulationFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vertices_.MergeFrom(from.vertices_);
  tetrahedra_.MergeFrom(from.tetrahedra_);
  if (!(from.time() <= 0 && from.time() >= 0)) {
    _internal_set_time(from._internal_time());
  }
}

void SimulationFrame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IronGames.SimulationFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimulationFrame::CopyFrom(const SimulationFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IronGames.SimulationFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimulationFrame::IsInitialized() const {
  return true;
}

void SimulationFrame::InternalSwap(SimulationFrame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vertices_.InternalSwap(&other->vertices_);
  tetrahedra_.InternalSwap(&other->tetrahedra_);
  swap(time_, other->time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SimulationFrame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SimulationSummary::_Internal {
 public:
};

SimulationSummary::SimulationSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  frames_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IronGames.SimulationSummary)
}
SimulationSummary::SimulationSummary(const SimulationSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      frames_(from.frames_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lambda_, &from.lambda_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_num_tetrahedra_) -
    reinterpret_cast<char*>(&lambda_)) + sizeof(max_num_tetrahedra_));
  // @@protoc_insertion_point(copy_constructor:IronGames.SimulationSummary)
}

void SimulationSummary::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lambda_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_num_tetrahedra_) -
    reinterpret_cast<char*>(&lambda_)) + sizeof(max_num_tetrahedra_));
}

SimulationSummary::~SimulationSummary() {
  // @@protoc_insertion_point(destructor:IronGames.SimulationSummary)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SimulationSummary::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SimulationSummary::ArenaDtor(void* object) {
  SimulationSummary* _this = reinterpret_cast< SimulationSummary* >(object);
  (void)_this;
}
void SimulationSummary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimulationSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SimulationSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:IronGames.SimulationSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frames_.Clear();
  ::memset(&lambda_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_num_tetrahedra_) -
      reinterpret_cast<char*>(&lambda_)) + sizeof(max_num_tetrahedra_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimulationSummary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float lambda = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          lambda_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float psi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          psi_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float mu = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          mu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float phi = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          phi_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float density = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          density_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float toughness = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          toughness_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 max_num_vertices = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          max_num_vertices_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_num_tetrahedra = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          max_num_tetrahedra_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .IronGames.SimulationFrame frames = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_frames(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimulationSummary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IronGames.SimulationSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float lambda = 1;
  if (!(this->lambda() <= 0 && this->lambda() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_lambda(), target);
  }

  // float psi = 2;
  if (!(this->psi() <= 0 && this->psi() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_psi(), target);
  }

  // float mu = 3;
  if (!(this->mu() <= 0 && this->mu() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_mu(), target);
  }

  // float phi = 4;
  if (!(this->phi() <= 0 && this->phi() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_phi(), target);
  }

  // float density = 5;
  if (!(this->density() <= 0 && this->density() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_density(), target);
  }

  // float toughness = 6;
  if (!(this->toughness() <= 0 && this->toughness() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_toughness(), target);
  }

  // int32 max_num_vertices = 7;
  if (this->max_num_vertices() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_max_num_vertices(), target);
  }

  // int32 max_num_tetrahedra = 8;
  if (this->max_num_tetrahedra() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_max_num_tetrahedra(), target);
  }

  // repeated .IronGames.SimulationFrame frames = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_frames_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_frames(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IronGames.SimulationSummary)
  return target;
}

size_t SimulationSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IronGames.SimulationSummary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IronGames.SimulationFrame frames = 9;
  total_size += 1UL * this->_internal_frames_size();
  for (const auto& msg : this->frames_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // float lambda = 1;
  if (!(this->lambda() <= 0 && this->lambda() >= 0)) {
    total_size += 1 + 4;
  }

  // float psi = 2;
  if (!(this->psi() <= 0 && this->psi() >= 0)) {
    total_size += 1 + 4;
  }

  // float mu = 3;
  if (!(this->mu() <= 0 && this->mu() >= 0)) {
    total_size += 1 + 4;
  }

  // float phi = 4;
  if (!(this->phi() <= 0 && this->phi() >= 0)) {
    total_size += 1 + 4;
  }

  // float density = 5;
  if (!(this->density() <= 0 && this->density() >= 0)) {
    total_size += 1 + 4;
  }

  // float toughness = 6;
  if (!(this->toughness() <= 0 && this->toughness() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 max_num_vertices = 7;
  if (this->max_num_vertices() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_num_vertices());
  }

  // int32 max_num_tetrahedra = 8;
  if (this->max_num_tetrahedra() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_num_tetrahedra());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimulationSummary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IronGames.SimulationSummary)
  GOOGLE_DCHECK_NE(&from, this);
  const SimulationSummary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimulationSummary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IronGames.SimulationSummary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IronGames.SimulationSummary)
    MergeFrom(*source);
  }
}

void SimulationSummary::MergeFrom(const SimulationSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IronGames.SimulationSummary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  frames_.MergeFrom(from.frames_);
  if (!(from.lambda() <= 0 && from.lambda() >= 0)) {
    _internal_set_lambda(from._internal_lambda());
  }
  if (!(from.psi() <= 0 && from.psi() >= 0)) {
    _internal_set_psi(from._internal_psi());
  }
  if (!(from.mu() <= 0 && from.mu() >= 0)) {
    _internal_set_mu(from._internal_mu());
  }
  if (!(from.phi() <= 0 && from.phi() >= 0)) {
    _internal_set_phi(from._internal_phi());
  }
  if (!(from.density() <= 0 && from.density() >= 0)) {
    _internal_set_density(from._internal_density());
  }
  if (!(from.toughness() <= 0 && from.toughness() >= 0)) {
    _internal_set_toughness(from._internal_toughness());
  }
  if (from.max_num_vertices() != 0) {
    _internal_set_max_num_vertices(from._internal_max_num_vertices());
  }
  if (from.max_num_tetrahedra() != 0) {
    _internal_set_max_num_tetrahedra(from._internal_max_num_tetrahedra());
  }
}

void SimulationSummary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IronGames.SimulationSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimulationSummary::CopyFrom(const SimulationSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IronGames.SimulationSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimulationSummary::IsInitialized() const {
  return true;
}

void SimulationSummary::InternalSwap(SimulationSummary* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  frames_.InternalSwap(&other->frames_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimulationSummary, max_num_tetrahedra_)
      + sizeof(SimulationSummary::max_num_tetrahedra_)
      - PROTOBUF_FIELD_OFFSET(SimulationSummary, lambda_)>(
          reinterpret_cast<char*>(&lambda_),
          reinterpret_cast<char*>(&other->lambda_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimulationSummary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SimulationSummaries::_Internal {
 public:
};

SimulationSummaries::SimulationSummaries(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  summaries_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IronGames.SimulationSummaries)
}
SimulationSummaries::SimulationSummaries(const SimulationSummaries& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      summaries_(from.summaries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IronGames.SimulationSummaries)
}

void SimulationSummaries::SharedCtor() {
}

SimulationSummaries::~SimulationSummaries() {
  // @@protoc_insertion_point(destructor:IronGames.SimulationSummaries)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SimulationSummaries::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SimulationSummaries::ArenaDtor(void* object) {
  SimulationSummaries* _this = reinterpret_cast< SimulationSummaries* >(object);
  (void)_this;
}
void SimulationSummaries::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimulationSummaries::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SimulationSummaries::Clear() {
// @@protoc_insertion_point(message_clear_start:IronGames.SimulationSummaries)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  summaries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimulationSummaries::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .IronGames.SimulationSummary summaries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_summaries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SimulationSummaries::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IronGames.SimulationSummaries)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IronGames.SimulationSummary summaries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_summaries_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_summaries(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IronGames.SimulationSummaries)
  return target;
}

size_t SimulationSummaries::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IronGames.SimulationSummaries)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IronGames.SimulationSummary summaries = 1;
  total_size += 1UL * this->_internal_summaries_size();
  for (const auto& msg : this->summaries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimulationSummaries::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IronGames.SimulationSummaries)
  GOOGLE_DCHECK_NE(&from, this);
  const SimulationSummaries* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimulationSummaries>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IronGames.SimulationSummaries)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IronGames.SimulationSummaries)
    MergeFrom(*source);
  }
}

void SimulationSummaries::MergeFrom(const SimulationSummaries& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IronGames.SimulationSummaries)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  summaries_.MergeFrom(from.summaries_);
}

void SimulationSummaries::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IronGames.SimulationSummaries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimulationSummaries::CopyFrom(const SimulationSummaries& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IronGames.SimulationSummaries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimulationSummaries::IsInitialized() const {
  return true;
}

void SimulationSummaries::InternalSwap(SimulationSummaries* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  summaries_.InternalSwap(&other->summaries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SimulationSummaries::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Box::_Internal {
 public:
  static const ::IronGames::Vector3& min(const Box* msg);
  static const ::IronGames::Vector3& max(const Box* msg);
};

const ::IronGames::Vector3&
Box::_Internal::min(const Box* msg) {
  return *msg->min_;
}
const ::IronGames::Vector3&
Box::_Internal::max(const Box* msg) {
  return *msg->max_;
}
Box::Box(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IronGames.Box)
}
Box::Box(const Box& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_min()) {
    min_ = new ::IronGames::Vector3(*from.min_);
  } else {
    min_ = nullptr;
  }
  if (from._internal_has_max()) {
    max_ = new ::IronGames::Vector3(*from.max_);
  } else {
    max_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:IronGames.Box)
}

void Box::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&min_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&min_)) + sizeof(max_));
}

Box::~Box() {
  // @@protoc_insertion_point(destructor:IronGames.Box)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Box::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete min_;
  if (this != internal_default_instance()) delete max_;
}

void Box::ArenaDtor(void* object) {
  Box* _this = reinterpret_cast< Box* >(object);
  (void)_this;
}
void Box::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Box::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Box::Clear() {
// @@protoc_insertion_point(message_clear_start:IronGames.Box)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && min_ != nullptr) {
    delete min_;
  }
  min_ = nullptr;
  if (GetArena() == nullptr && max_ != nullptr) {
    delete max_;
  }
  max_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Box::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .IronGames.Vector3 min = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_min(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IronGames.Vector3 max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_max(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Box::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IronGames.Box)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IronGames.Vector3 min = 1;
  if (this->has_min()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::min(this), target, stream);
  }

  // .IronGames.Vector3 max = 2;
  if (this->has_max()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::max(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IronGames.Box)
  return target;
}

size_t Box::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IronGames.Box)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .IronGames.Vector3 min = 1;
  if (this->has_min()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *min_);
  }

  // .IronGames.Vector3 max = 2;
  if (this->has_max()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *max_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Box::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IronGames.Box)
  GOOGLE_DCHECK_NE(&from, this);
  const Box* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Box>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IronGames.Box)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IronGames.Box)
    MergeFrom(*source);
  }
}

void Box::MergeFrom(const Box& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IronGames.Box)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_min()) {
    _internal_mutable_min()->::IronGames::Vector3::MergeFrom(from._internal_min());
  }
  if (from.has_max()) {
    _internal_mutable_max()->::IronGames::Vector3::MergeFrom(from._internal_max());
  }
}

void Box::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IronGames.Box)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Box::CopyFrom(const Box& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IronGames.Box)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Box::IsInitialized() const {
  return true;
}

void Box::InternalSwap(Box* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Box, max_)
      + sizeof(Box::max_)
      - PROTOBUF_FIELD_OFFSET(Box, min_)>(
          reinterpret_cast<char*>(&min_),
          reinterpret_cast<char*>(&other->min_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Box::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EditCube::_Internal {
 public:
  static const ::IronGames::Vector3& center(const EditCube* msg);
};

const ::IronGames::Vector3&
EditCube::_Internal::center(const EditCube* msg) {
  return *msg->center_;
}
EditCube::EditCube(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IronGames.EditCube)
}
EditCube::EditCube(const EditCube& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_center()) {
    center_ = new ::IronGames::Vector3(*from.center_);
  } else {
    center_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:IronGames.EditCube)
}

void EditCube::SharedCtor() {
center_ = nullptr;
}

EditCube::~EditCube() {
  // @@protoc_insertion_point(destructor:IronGames.EditCube)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EditCube::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete center_;
}

void EditCube::ArenaDtor(void* object) {
  EditCube* _this = reinterpret_cast< EditCube* >(object);
  (void)_this;
}
void EditCube::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EditCube::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EditCube::Clear() {
// @@protoc_insertion_point(message_clear_start:IronGames.EditCube)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && center_ != nullptr) {
    delete center_;
  }
  center_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EditCube::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .IronGames.Vector3 center = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_center(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EditCube::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IronGames.EditCube)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IronGames.Vector3 center = 1;
  if (this->has_center()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::center(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IronGames.EditCube)
  return target;
}

size_t EditCube::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IronGames.EditCube)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .IronGames.Vector3 center = 1;
  if (this->has_center()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *center_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EditCube::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IronGames.EditCube)
  GOOGLE_DCHECK_NE(&from, this);
  const EditCube* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EditCube>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IronGames.EditCube)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IronGames.EditCube)
    MergeFrom(*source);
  }
}

void EditCube::MergeFrom(const EditCube& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IronGames.EditCube)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_center()) {
    _internal_mutable_center()->::IronGames::Vector3::MergeFrom(from._internal_center());
  }
}

void EditCube::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IronGames.EditCube)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EditCube::CopyFrom(const EditCube& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IronGames.EditCube)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EditCube::IsInitialized() const {
  return true;
}

void EditCube::InternalSwap(EditCube* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(center_, other->center_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EditCube::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TetrahedraMesh::_Internal {
 public:
};

TetrahedraMesh::TetrahedraMesh(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  positions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IronGames.TetrahedraMesh)
}
TetrahedraMesh::TetrahedraMesh(const TetrahedraMesh& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      positions_(from.positions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IronGames.TetrahedraMesh)
}

void TetrahedraMesh::SharedCtor() {
}

TetrahedraMesh::~TetrahedraMesh() {
  // @@protoc_insertion_point(destructor:IronGames.TetrahedraMesh)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TetrahedraMesh::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TetrahedraMesh::ArenaDtor(void* object) {
  TetrahedraMesh* _this = reinterpret_cast< TetrahedraMesh* >(object);
  (void)_this;
}
void TetrahedraMesh::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TetrahedraMesh::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TetrahedraMesh::Clear() {
// @@protoc_insertion_point(message_clear_start:IronGames.TetrahedraMesh)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  positions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TetrahedraMesh::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .IronGames.Vector3 positions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_positions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TetrahedraMesh::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IronGames.TetrahedraMesh)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IronGames.Vector3 positions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_positions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_positions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IronGames.TetrahedraMesh)
  return target;
}

size_t TetrahedraMesh::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IronGames.TetrahedraMesh)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IronGames.Vector3 positions = 1;
  total_size += 1UL * this->_internal_positions_size();
  for (const auto& msg : this->positions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TetrahedraMesh::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IronGames.TetrahedraMesh)
  GOOGLE_DCHECK_NE(&from, this);
  const TetrahedraMesh* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TetrahedraMesh>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IronGames.TetrahedraMesh)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IronGames.TetrahedraMesh)
    MergeFrom(*source);
  }
}

void TetrahedraMesh::MergeFrom(const TetrahedraMesh& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IronGames.TetrahedraMesh)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  positions_.MergeFrom(from.positions_);
}

void TetrahedraMesh::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IronGames.TetrahedraMesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TetrahedraMesh::CopyFrom(const TetrahedraMesh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IronGames.TetrahedraMesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TetrahedraMesh::IsInitialized() const {
  return true;
}

void TetrahedraMesh::InternalSwap(TetrahedraMesh* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  positions_.InternalSwap(&other->positions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TetrahedraMesh::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Asset::_Internal {
 public:
  static const ::IronGames::Box& bounds(const Asset* msg);
};

const ::IronGames::Box&
Asset::_Internal::bounds(const Asset* msg) {
  return *msg->bounds_;
}
Asset::Asset(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cubes_(arena),
  tetrahedra_meshes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IronGames.Asset)
}
Asset::Asset(const Asset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cubes_(from.cubes_),
      tetrahedra_meshes_(from.tetrahedra_meshes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  last_saved_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_saved().empty()) {
    last_saved_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_last_saved(), 
      GetArena());
  }
  author_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_author().empty()) {
    author_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_author(), 
      GetArena());
  }
  asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asset_id().empty()) {
    asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset_id(), 
      GetArena());
  }
  if (from._internal_has_bounds()) {
    bounds_ = new ::IronGames::Box(*from.bounds_);
  } else {
    bounds_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:IronGames.Asset)
}

void Asset::SharedCtor() {
last_saved_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
author_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
bounds_ = nullptr;
}

Asset::~Asset() {
  // @@protoc_insertion_point(destructor:IronGames.Asset)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Asset::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  last_saved_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  author_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete bounds_;
}

void Asset::ArenaDtor(void* object) {
  Asset* _this = reinterpret_cast< Asset* >(object);
  (void)_this;
}
void Asset::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Asset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Asset::Clear() {
// @@protoc_insertion_point(message_clear_start:IronGames.Asset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cubes_.Clear();
  tetrahedra_meshes_.Clear();
  last_saved_.ClearToEmpty();
  author_.ClearToEmpty();
  asset_id_.ClearToEmpty();
  if (GetArena() == nullptr && bounds_ != nullptr) {
    delete bounds_;
  }
  bounds_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Asset::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .IronGames.EditCube cubes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cubes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .IronGames.TetrahedraMesh tetrahedra_Meshes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tetrahedra_meshes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .IronGames.Box bounds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_bounds(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string last_saved = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_last_saved();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "IronGames.Asset.last_saved"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string author = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_author();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "IronGames.Asset.author"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string asset_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_asset_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "IronGames.Asset.asset_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Asset::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IronGames.Asset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IronGames.EditCube cubes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cubes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_cubes(i), target, stream);
  }

  // repeated .IronGames.TetrahedraMesh tetrahedra_Meshes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tetrahedra_meshes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_tetrahedra_meshes(i), target, stream);
  }

  // .IronGames.Box bounds = 3;
  if (this->has_bounds()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::bounds(this), target, stream);
  }

  // string last_saved = 4;
  if (this->last_saved().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_saved().data(), static_cast<int>(this->_internal_last_saved().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IronGames.Asset.last_saved");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_last_saved(), target);
  }

  // string author = 5;
  if (this->author().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_author().data(), static_cast<int>(this->_internal_author().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IronGames.Asset.author");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_author(), target);
  }

  // string asset_id = 6;
  if (this->asset_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset_id().data(), static_cast<int>(this->_internal_asset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IronGames.Asset.asset_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_asset_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IronGames.Asset)
  return target;
}

size_t Asset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IronGames.Asset)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IronGames.EditCube cubes = 1;
  total_size += 1UL * this->_internal_cubes_size();
  for (const auto& msg : this->cubes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .IronGames.TetrahedraMesh tetrahedra_Meshes = 2;
  total_size += 1UL * this->_internal_tetrahedra_meshes_size();
  for (const auto& msg : this->tetrahedra_meshes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string last_saved = 4;
  if (this->last_saved().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_saved());
  }

  // string author = 5;
  if (this->author().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_author());
  }

  // string asset_id = 6;
  if (this->asset_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset_id());
  }

  // .IronGames.Box bounds = 3;
  if (this->has_bounds()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bounds_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Asset::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IronGames.Asset)
  GOOGLE_DCHECK_NE(&from, this);
  const Asset* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Asset>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IronGames.Asset)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IronGames.Asset)
    MergeFrom(*source);
  }
}

void Asset::MergeFrom(const Asset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IronGames.Asset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cubes_.MergeFrom(from.cubes_);
  tetrahedra_meshes_.MergeFrom(from.tetrahedra_meshes_);
  if (from.last_saved().size() > 0) {
    _internal_set_last_saved(from._internal_last_saved());
  }
  if (from.author().size() > 0) {
    _internal_set_author(from._internal_author());
  }
  if (from.asset_id().size() > 0) {
    _internal_set_asset_id(from._internal_asset_id());
  }
  if (from.has_bounds()) {
    _internal_mutable_bounds()->::IronGames::Box::MergeFrom(from._internal_bounds());
  }
}

void Asset::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IronGames.Asset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Asset::CopyFrom(const Asset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IronGames.Asset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Asset::IsInitialized() const {
  return true;
}

void Asset::InternalSwap(Asset* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cubes_.InternalSwap(&other->cubes_);
  tetrahedra_meshes_.InternalSwap(&other->tetrahedra_meshes_);
  last_saved_.Swap(&other->last_saved_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  author_.Swap(&other->author_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  asset_id_.Swap(&other->asset_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(bounds_, other->bounds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Asset::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PalaceAsset::_Internal {
 public:
  static const ::IronGames::Transform& transform(const PalaceAsset* msg);
  static const ::IronGames::Color& color(const PalaceAsset* msg);
  static const ::IronGames::Vector3& scale(const PalaceAsset* msg);
};

const ::IronGames::Transform&
PalaceAsset::_Internal::transform(const PalaceAsset* msg) {
  return *msg->transform_;
}
const ::IronGames::Color&
PalaceAsset::_Internal::color(const PalaceAsset* msg) {
  return *msg->color_;
}
const ::IronGames::Vector3&
PalaceAsset::_Internal::scale(const PalaceAsset* msg) {
  return *msg->scale_;
}
PalaceAsset::PalaceAsset(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IronGames.PalaceAsset)
}
PalaceAsset::PalaceAsset(const PalaceAsset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asset_id().empty()) {
    asset_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset_id(), 
      GetArena());
  }
  if (from._internal_has_transform()) {
    transform_ = new ::IronGames::Transform(*from.transform_);
  } else {
    transform_ = nullptr;
  }
  if (from._internal_has_color()) {
    color_ = new ::IronGames::Color(*from.color_);
  } else {
    color_ = nullptr;
  }
  if (from._internal_has_scale()) {
    scale_ = new ::IronGames::Vector3(*from.scale_);
  } else {
    scale_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:IronGames.PalaceAsset)
}

void PalaceAsset::SharedCtor() {
asset_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&transform_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&scale_) -
    reinterpret_cast<char*>(&transform_)) + sizeof(scale_));
}

PalaceAsset::~PalaceAsset() {
  // @@protoc_insertion_point(destructor:IronGames.PalaceAsset)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PalaceAsset::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  asset_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete transform_;
  if (this != internal_default_instance()) delete color_;
  if (this != internal_default_instance()) delete scale_;
}

void PalaceAsset::ArenaDtor(void* object) {
  PalaceAsset* _this = reinterpret_cast< PalaceAsset* >(object);
  (void)_this;
}
void PalaceAsset::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PalaceAsset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PalaceAsset::Clear() {
// @@protoc_insertion_point(message_clear_start:IronGames.PalaceAsset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  asset_id_.ClearToEmpty();
  if (GetArena() == nullptr && transform_ != nullptr) {
    delete transform_;
  }
  transform_ = nullptr;
  if (GetArena() == nullptr && color_ != nullptr) {
    delete color_;
  }
  color_ = nullptr;
  if (GetArena() == nullptr && scale_ != nullptr) {
    delete scale_;
  }
  scale_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PalaceAsset::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string asset_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_asset_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "IronGames.PalaceAsset.asset_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IronGames.Transform transform = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_transform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IronGames.Color color = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IronGames.Vector3 scale = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_scale(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PalaceAsset::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IronGames.PalaceAsset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string asset_id = 1;
  if (this->asset_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset_id().data(), static_cast<int>(this->_internal_asset_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IronGames.PalaceAsset.asset_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_asset_id(), target);
  }

  // .IronGames.Transform transform = 2;
  if (this->has_transform()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::transform(this), target, stream);
  }

  // .IronGames.Color color = 3;
  if (this->has_color()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::color(this), target, stream);
  }

  // .IronGames.Vector3 scale = 4;
  if (this->has_scale()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::scale(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IronGames.PalaceAsset)
  return target;
}

size_t PalaceAsset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IronGames.PalaceAsset)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string asset_id = 1;
  if (this->asset_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset_id());
  }

  // .IronGames.Transform transform = 2;
  if (this->has_transform()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transform_);
  }

  // .IronGames.Color color = 3;
  if (this->has_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *color_);
  }

  // .IronGames.Vector3 scale = 4;
  if (this->has_scale()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scale_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PalaceAsset::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IronGames.PalaceAsset)
  GOOGLE_DCHECK_NE(&from, this);
  const PalaceAsset* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PalaceAsset>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IronGames.PalaceAsset)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IronGames.PalaceAsset)
    MergeFrom(*source);
  }
}

void PalaceAsset::MergeFrom(const PalaceAsset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IronGames.PalaceAsset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.asset_id().size() > 0) {
    _internal_set_asset_id(from._internal_asset_id());
  }
  if (from.has_transform()) {
    _internal_mutable_transform()->::IronGames::Transform::MergeFrom(from._internal_transform());
  }
  if (from.has_color()) {
    _internal_mutable_color()->::IronGames::Color::MergeFrom(from._internal_color());
  }
  if (from.has_scale()) {
    _internal_mutable_scale()->::IronGames::Vector3::MergeFrom(from._internal_scale());
  }
}

void PalaceAsset::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IronGames.PalaceAsset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PalaceAsset::CopyFrom(const PalaceAsset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IronGames.PalaceAsset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PalaceAsset::IsInitialized() const {
  return true;
}

void PalaceAsset::InternalSwap(PalaceAsset* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  asset_id_.Swap(&other->asset_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PalaceAsset, scale_)
      + sizeof(PalaceAsset::scale_)
      - PROTOBUF_FIELD_OFFSET(PalaceAsset, transform_)>(
          reinterpret_cast<char*>(&transform_),
          reinterpret_cast<char*>(&other->transform_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PalaceAsset::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PlayerAssets::_Internal {
 public:
};

PlayerAssets::PlayerAssets(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  assets_(arena),
  palace_assets_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IronGames.PlayerAssets)
}
PlayerAssets::PlayerAssets(const PlayerAssets& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      assets_(from.assets_),
      palace_assets_(from.palace_assets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IronGames.PlayerAssets)
}

void PlayerAssets::SharedCtor() {
}

PlayerAssets::~PlayerAssets() {
  // @@protoc_insertion_point(destructor:IronGames.PlayerAssets)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlayerAssets::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PlayerAssets::ArenaDtor(void* object) {
  PlayerAssets* _this = reinterpret_cast< PlayerAssets* >(object);
  (void)_this;
}
void PlayerAssets::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerAssets::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayerAssets::Clear() {
// @@protoc_insertion_point(message_clear_start:IronGames.PlayerAssets)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  assets_.Clear();
  palace_assets_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerAssets::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .IronGames.Asset assets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_assets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .IronGames.PalaceAsset palace_assets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_palace_assets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerAssets::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IronGames.PlayerAssets)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IronGames.Asset assets = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_assets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_assets(i), target, stream);
  }

  // repeated .IronGames.PalaceAsset palace_assets = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_palace_assets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_palace_assets(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IronGames.PlayerAssets)
  return target;
}

size_t PlayerAssets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IronGames.PlayerAssets)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IronGames.Asset assets = 1;
  total_size += 1UL * this->_internal_assets_size();
  for (const auto& msg : this->assets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .IronGames.PalaceAsset palace_assets = 2;
  total_size += 1UL * this->_internal_palace_assets_size();
  for (const auto& msg : this->palace_assets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerAssets::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IronGames.PlayerAssets)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerAssets* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerAssets>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IronGames.PlayerAssets)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IronGames.PlayerAssets)
    MergeFrom(*source);
  }
}

void PlayerAssets::MergeFrom(const PlayerAssets& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IronGames.PlayerAssets)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  assets_.MergeFrom(from.assets_);
  palace_assets_.MergeFrom(from.palace_assets_);
}

void PlayerAssets::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IronGames.PlayerAssets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerAssets::CopyFrom(const PlayerAssets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IronGames.PlayerAssets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerAssets::IsInitialized() const {
  return true;
}

void PlayerAssets::InternalSwap(PlayerAssets* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  assets_.InternalSwap(&other->assets_);
  palace_assets_.InternalSwap(&other->palace_assets_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerAssets::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EventPlayerConnected::_Internal {
 public:
  static const ::IronGames::Player& player(const EventPlayerConnected* msg);
};

const ::IronGames::Player&
EventPlayerConnected::_Internal::player(const EventPlayerConnected* msg) {
  return *msg->player_;
}
EventPlayerConnected::EventPlayerConnected(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IronGames.EventPlayerConnected)
}
EventPlayerConnected::EventPlayerConnected(const EventPlayerConnected& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    player_ = new ::IronGames::Player(*from.player_);
  } else {
    player_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:IronGames.EventPlayerConnected)
}

void EventPlayerConnected::SharedCtor() {
player_ = nullptr;
}

EventPlayerConnected::~EventPlayerConnected() {
  // @@protoc_insertion_point(destructor:IronGames.EventPlayerConnected)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EventPlayerConnected::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete player_;
}

void EventPlayerConnected::ArenaDtor(void* object) {
  EventPlayerConnected* _this = reinterpret_cast< EventPlayerConnected* >(object);
  (void)_this;
}
void EventPlayerConnected::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EventPlayerConnected::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EventPlayerConnected::Clear() {
// @@protoc_insertion_point(message_clear_start:IronGames.EventPlayerConnected)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventPlayerConnected::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .IronGames.Player player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EventPlayerConnected::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IronGames.EventPlayerConnected)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IronGames.Player player = 1;
  if (this->has_player()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IronGames.EventPlayerConnected)
  return target;
}

size_t EventPlayerConnected::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IronGames.EventPlayerConnected)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .IronGames.Player player = 1;
  if (this->has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventPlayerConnected::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IronGames.EventPlayerConnected)
  GOOGLE_DCHECK_NE(&from, this);
  const EventPlayerConnected* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EventPlayerConnected>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IronGames.EventPlayerConnected)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IronGames.EventPlayerConnected)
    MergeFrom(*source);
  }
}

void EventPlayerConnected::MergeFrom(const EventPlayerConnected& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IronGames.EventPlayerConnected)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player()) {
    _internal_mutable_player()->::IronGames::Player::MergeFrom(from._internal_player());
  }
}

void EventPlayerConnected::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IronGames.EventPlayerConnected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventPlayerConnected::CopyFrom(const EventPlayerConnected& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IronGames.EventPlayerConnected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventPlayerConnected::IsInitialized() const {
  return true;
}

void EventPlayerConnected::InternalSwap(EventPlayerConnected* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(player_, other->player_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventPlayerConnected::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EventPlayerChanged::_Internal {
 public:
  static const ::IronGames::Player& player(const EventPlayerChanged* msg);
};

const ::IronGames::Player&
EventPlayerChanged::_Internal::player(const EventPlayerChanged* msg) {
  return *msg->player_;
}
EventPlayerChanged::EventPlayerChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IronGames.EventPlayerChanged)
}
EventPlayerChanged::EventPlayerChanged(const EventPlayerChanged& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    player_ = new ::IronGames::Player(*from.player_);
  } else {
    player_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:IronGames.EventPlayerChanged)
}

void EventPlayerChanged::SharedCtor() {
player_ = nullptr;
}

EventPlayerChanged::~EventPlayerChanged() {
  // @@protoc_insertion_point(destructor:IronGames.EventPlayerChanged)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EventPlayerChanged::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete player_;
}

void EventPlayerChanged::ArenaDtor(void* object) {
  EventPlayerChanged* _this = reinterpret_cast< EventPlayerChanged* >(object);
  (void)_this;
}
void EventPlayerChanged::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EventPlayerChanged::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EventPlayerChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:IronGames.EventPlayerChanged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventPlayerChanged::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .IronGames.Player player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EventPlayerChanged::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IronGames.EventPlayerChanged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IronGames.Player player = 1;
  if (this->has_player()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IronGames.EventPlayerChanged)
  return target;
}

size_t EventPlayerChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IronGames.EventPlayerChanged)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .IronGames.Player player = 1;
  if (this->has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventPlayerChanged::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IronGames.EventPlayerChanged)
  GOOGLE_DCHECK_NE(&from, this);
  const EventPlayerChanged* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EventPlayerChanged>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IronGames.EventPlayerChanged)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IronGames.EventPlayerChanged)
    MergeFrom(*source);
  }
}

void EventPlayerChanged::MergeFrom(const EventPlayerChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IronGames.EventPlayerChanged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player()) {
    _internal_mutable_player()->::IronGames::Player::MergeFrom(from._internal_player());
  }
}

void EventPlayerChanged::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IronGames.EventPlayerChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventPlayerChanged::CopyFrom(const EventPlayerChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IronGames.EventPlayerChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventPlayerChanged::IsInitialized() const {
  return true;
}

void EventPlayerChanged::InternalSwap(EventPlayerChanged* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(player_, other->player_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventPlayerChanged::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EventPlayerDisconnected::_Internal {
 public:
  static const ::IronGames::Player& player(const EventPlayerDisconnected* msg);
};

const ::IronGames::Player&
EventPlayerDisconnected::_Internal::player(const EventPlayerDisconnected* msg) {
  return *msg->player_;
}
EventPlayerDisconnected::EventPlayerDisconnected(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IronGames.EventPlayerDisconnected)
}
EventPlayerDisconnected::EventPlayerDisconnected(const EventPlayerDisconnected& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    player_ = new ::IronGames::Player(*from.player_);
  } else {
    player_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:IronGames.EventPlayerDisconnected)
}

void EventPlayerDisconnected::SharedCtor() {
player_ = nullptr;
}

EventPlayerDisconnected::~EventPlayerDisconnected() {
  // @@protoc_insertion_point(destructor:IronGames.EventPlayerDisconnected)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EventPlayerDisconnected::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete player_;
}

void EventPlayerDisconnected::ArenaDtor(void* object) {
  EventPlayerDisconnected* _this = reinterpret_cast< EventPlayerDisconnected* >(object);
  (void)_this;
}
void EventPlayerDisconnected::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EventPlayerDisconnected::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EventPlayerDisconnected::Clear() {
// @@protoc_insertion_point(message_clear_start:IronGames.EventPlayerDisconnected)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventPlayerDisconnected::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .IronGames.Player player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EventPlayerDisconnected::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IronGames.EventPlayerDisconnected)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IronGames.Player player = 1;
  if (this->has_player()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IronGames.EventPlayerDisconnected)
  return target;
}

size_t EventPlayerDisconnected::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IronGames.EventPlayerDisconnected)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .IronGames.Player player = 1;
  if (this->has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventPlayerDisconnected::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IronGames.EventPlayerDisconnected)
  GOOGLE_DCHECK_NE(&from, this);
  const EventPlayerDisconnected* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EventPlayerDisconnected>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IronGames.EventPlayerDisconnected)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IronGames.EventPlayerDisconnected)
    MergeFrom(*source);
  }
}

void EventPlayerDisconnected::MergeFrom(const EventPlayerDisconnected& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IronGames.EventPlayerDisconnected)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player()) {
    _internal_mutable_player()->::IronGames::Player::MergeFrom(from._internal_player());
  }
}

void EventPlayerDisconnected::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IronGames.EventPlayerDisconnected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventPlayerDisconnected::CopyFrom(const EventPlayerDisconnected& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IronGames.EventPlayerDisconnected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventPlayerDisconnected::IsInitialized() const {
  return true;
}

void EventPlayerDisconnected::InternalSwap(EventPlayerDisconnected* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(player_, other->player_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventPlayerDisconnected::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EventUnitCreation::_Internal {
 public:
  static const ::IronGames::Transform& transform(const EventUnitCreation* msg);
};

const ::IronGames::Transform&
EventUnitCreation::_Internal::transform(const EventUnitCreation* msg) {
  return *msg->transform_;
}
EventUnitCreation::EventUnitCreation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IronGames.EventUnitCreation)
}
EventUnitCreation::EventUnitCreation(const EventUnitCreation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transform()) {
    transform_ = new ::IronGames::Transform(*from.transform_);
  } else {
    transform_ = nullptr;
  }
  ::memcpy(&unit_id_, &from.unit_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&owner_id_) -
    reinterpret_cast<char*>(&unit_id_)) + sizeof(owner_id_));
  // @@protoc_insertion_point(copy_constructor:IronGames.EventUnitCreation)
}

void EventUnitCreation::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&transform_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&owner_id_) -
    reinterpret_cast<char*>(&transform_)) + sizeof(owner_id_));
}

EventUnitCreation::~EventUnitCreation() {
  // @@protoc_insertion_point(destructor:IronGames.EventUnitCreation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EventUnitCreation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete transform_;
}

void EventUnitCreation::ArenaDtor(void* object) {
  EventUnitCreation* _this = reinterpret_cast< EventUnitCreation* >(object);
  (void)_this;
}
void EventUnitCreation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EventUnitCreation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EventUnitCreation::Clear() {
// @@protoc_insertion_point(message_clear_start:IronGames.EventUnitCreation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && transform_ != nullptr) {
    delete transform_;
  }
  transform_ = nullptr;
  ::memset(&unit_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&owner_id_) -
      reinterpret_cast<char*>(&unit_id_)) + sizeof(owner_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventUnitCreation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 unit_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          unit_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 owner_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          owner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IronGames.Transform transform = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_transform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EventUnitCreation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IronGames.EventUnitCreation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 unit_id = 1;
  if (this->unit_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_unit_id(), target);
  }

  // int32 type_id = 2;
  if (this->type_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type_id(), target);
  }

  // int32 owner_id = 3;
  if (this->owner_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_owner_id(), target);
  }

  // .IronGames.Transform transform = 4;
  if (this->has_transform()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::transform(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IronGames.EventUnitCreation)
  return target;
}

size_t EventUnitCreation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IronGames.EventUnitCreation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .IronGames.Transform transform = 4;
  if (this->has_transform()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transform_);
  }

  // int32 unit_id = 1;
  if (this->unit_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_unit_id());
  }

  // int32 type_id = 2;
  if (this->type_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type_id());
  }

  // int32 owner_id = 3;
  if (this->owner_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_owner_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventUnitCreation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IronGames.EventUnitCreation)
  GOOGLE_DCHECK_NE(&from, this);
  const EventUnitCreation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EventUnitCreation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IronGames.EventUnitCreation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IronGames.EventUnitCreation)
    MergeFrom(*source);
  }
}

void EventUnitCreation::MergeFrom(const EventUnitCreation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IronGames.EventUnitCreation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_transform()) {
    _internal_mutable_transform()->::IronGames::Transform::MergeFrom(from._internal_transform());
  }
  if (from.unit_id() != 0) {
    _internal_set_unit_id(from._internal_unit_id());
  }
  if (from.type_id() != 0) {
    _internal_set_type_id(from._internal_type_id());
  }
  if (from.owner_id() != 0) {
    _internal_set_owner_id(from._internal_owner_id());
  }
}

void EventUnitCreation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IronGames.EventUnitCreation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventUnitCreation::CopyFrom(const EventUnitCreation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IronGames.EventUnitCreation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventUnitCreation::IsInitialized() const {
  return true;
}

void EventUnitCreation::InternalSwap(EventUnitCreation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EventUnitCreation, owner_id_)
      + sizeof(EventUnitCreation::owner_id_)
      - PROTOBUF_FIELD_OFFSET(EventUnitCreation, transform_)>(
          reinterpret_cast<char*>(&transform_),
          reinterpret_cast<char*>(&other->transform_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EventUnitCreation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EventActorCreationRequest::_Internal {
 public:
  static const ::IronGames::Transform& transform(const EventActorCreationRequest* msg);
};

const ::IronGames::Transform&
EventActorCreationRequest::_Internal::transform(const EventActorCreationRequest* msg) {
  return *msg->transform_;
}
EventActorCreationRequest::EventActorCreationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IronGames.EventActorCreationRequest)
}
EventActorCreationRequest::EventActorCreationRequest(const EventActorCreationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transform()) {
    transform_ = new ::IronGames::Transform(*from.transform_);
  } else {
    transform_ = nullptr;
  }
  ::memcpy(&type_id_, &from.type_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&owner_id_) -
    reinterpret_cast<char*>(&type_id_)) + sizeof(owner_id_));
  // @@protoc_insertion_point(copy_constructor:IronGames.EventActorCreationRequest)
}

void EventActorCreationRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&transform_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&owner_id_) -
    reinterpret_cast<char*>(&transform_)) + sizeof(owner_id_));
}

EventActorCreationRequest::~EventActorCreationRequest() {
  // @@protoc_insertion_point(destructor:IronGames.EventActorCreationRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EventActorCreationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete transform_;
}

void EventActorCreationRequest::ArenaDtor(void* object) {
  EventActorCreationRequest* _this = reinterpret_cast< EventActorCreationRequest* >(object);
  (void)_this;
}
void EventActorCreationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EventActorCreationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EventActorCreationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:IronGames.EventActorCreationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && transform_ != nullptr) {
    delete transform_;
  }
  transform_ = nullptr;
  ::memset(&type_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&owner_id_) -
      reinterpret_cast<char*>(&type_id_)) + sizeof(owner_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventActorCreationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 type_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 owner_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          owner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IronGames.Transform transform = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_transform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EventActorCreationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IronGames.EventActorCreationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type_id = 1;
  if (this->type_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type_id(), target);
  }

  // int32 owner_id = 2;
  if (this->owner_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_owner_id(), target);
  }

  // .IronGames.Transform transform = 3;
  if (this->has_transform()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::transform(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IronGames.EventActorCreationRequest)
  return target;
}

size_t EventActorCreationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IronGames.EventActorCreationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .IronGames.Transform transform = 3;
  if (this->has_transform()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transform_);
  }

  // int32 type_id = 1;
  if (this->type_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type_id());
  }

  // int32 owner_id = 2;
  if (this->owner_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_owner_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventActorCreationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IronGames.EventActorCreationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EventActorCreationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EventActorCreationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IronGames.EventActorCreationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IronGames.EventActorCreationRequest)
    MergeFrom(*source);
  }
}

void EventActorCreationRequest::MergeFrom(const EventActorCreationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IronGames.EventActorCreationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_transform()) {
    _internal_mutable_transform()->::IronGames::Transform::MergeFrom(from._internal_transform());
  }
  if (from.type_id() != 0) {
    _internal_set_type_id(from._internal_type_id());
  }
  if (from.owner_id() != 0) {
    _internal_set_owner_id(from._internal_owner_id());
  }
}

void EventActorCreationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IronGames.EventActorCreationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventActorCreationRequest::CopyFrom(const EventActorCreationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IronGames.EventActorCreationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventActorCreationRequest::IsInitialized() const {
  return true;
}

void EventActorCreationRequest::InternalSwap(EventActorCreationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EventActorCreationRequest, owner_id_)
      + sizeof(EventActorCreationRequest::owner_id_)
      - PROTOBUF_FIELD_OFFSET(EventActorCreationRequest, transform_)>(
          reinterpret_cast<char*>(&transform_),
          reinterpret_cast<char*>(&other->transform_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EventActorCreationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EventUnitDestruction::_Internal {
 public:
};

EventUnitDestruction::EventUnitDestruction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IronGames.EventUnitDestruction)
}
EventUnitDestruction::EventUnitDestruction(const EventUnitDestruction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  unit_id_ = from.unit_id_;
  // @@protoc_insertion_point(copy_constructor:IronGames.EventUnitDestruction)
}

void EventUnitDestruction::SharedCtor() {
unit_id_ = 0;
}

EventUnitDestruction::~EventUnitDestruction() {
  // @@protoc_insertion_point(destructor:IronGames.EventUnitDestruction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EventUnitDestruction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EventUnitDestruction::ArenaDtor(void* object) {
  EventUnitDestruction* _this = reinterpret_cast< EventUnitDestruction* >(object);
  (void)_this;
}
void EventUnitDestruction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EventUnitDestruction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EventUnitDestruction::Clear() {
// @@protoc_insertion_point(message_clear_start:IronGames.EventUnitDestruction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unit_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventUnitDestruction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 unit_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          unit_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EventUnitDestruction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IronGames.EventUnitDestruction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 unit_id = 1;
  if (this->unit_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_unit_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IronGames.EventUnitDestruction)
  return target;
}

size_t EventUnitDestruction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IronGames.EventUnitDestruction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 unit_id = 1;
  if (this->unit_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_unit_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventUnitDestruction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IronGames.EventUnitDestruction)
  GOOGLE_DCHECK_NE(&from, this);
  const EventUnitDestruction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EventUnitDestruction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IronGames.EventUnitDestruction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IronGames.EventUnitDestruction)
    MergeFrom(*source);
  }
}

void EventUnitDestruction::MergeFrom(const EventUnitDestruction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IronGames.EventUnitDestruction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.unit_id() != 0) {
    _internal_set_unit_id(from._internal_unit_id());
  }
}

void EventUnitDestruction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IronGames.EventUnitDestruction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventUnitDestruction::CopyFrom(const EventUnitDestruction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IronGames.EventUnitDestruction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventUnitDestruction::IsInitialized() const {
  return true;
}

void EventUnitDestruction::InternalSwap(EventUnitDestruction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(unit_id_, other->unit_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventUnitDestruction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EventBuildingCreation::_Internal {
 public:
  static const ::IronGames::Transform& transform(const EventBuildingCreation* msg);
};

const ::IronGames::Transform&
EventBuildingCreation::_Internal::transform(const EventBuildingCreation* msg) {
  return *msg->transform_;
}
EventBuildingCreation::EventBuildingCreation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IronGames.EventBuildingCreation)
}
EventBuildingCreation::EventBuildingCreation(const EventBuildingCreation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transform()) {
    transform_ = new ::IronGames::Transform(*from.transform_);
  } else {
    transform_ = nullptr;
  }
  ::memcpy(&building_id_, &from.building_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_id_) -
    reinterpret_cast<char*>(&building_id_)) + sizeof(type_id_));
  // @@protoc_insertion_point(copy_constructor:IronGames.EventBuildingCreation)
}

void EventBuildingCreation::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&transform_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_id_) -
    reinterpret_cast<char*>(&transform_)) + sizeof(type_id_));
}

EventBuildingCreation::~EventBuildingCreation() {
  // @@protoc_insertion_point(destructor:IronGames.EventBuildingCreation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EventBuildingCreation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete transform_;
}

void EventBuildingCreation::ArenaDtor(void* object) {
  EventBuildingCreation* _this = reinterpret_cast< EventBuildingCreation* >(object);
  (void)_this;
}
void EventBuildingCreation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EventBuildingCreation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EventBuildingCreation::Clear() {
// @@protoc_insertion_point(message_clear_start:IronGames.EventBuildingCreation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && transform_ != nullptr) {
    delete transform_;
  }
  transform_ = nullptr;
  ::memset(&building_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_id_) -
      reinterpret_cast<char*>(&building_id_)) + sizeof(type_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventBuildingCreation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 building_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          building_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IronGames.Transform transform = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_transform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EventBuildingCreation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IronGames.EventBuildingCreation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 building_id = 1;
  if (this->building_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_building_id(), target);
  }

  // int32 type_id = 2;
  if (this->type_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type_id(), target);
  }

  // .IronGames.Transform transform = 3;
  if (this->has_transform()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::transform(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IronGames.EventBuildingCreation)
  return target;
}

size_t EventBuildingCreation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IronGames.EventBuildingCreation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .IronGames.Transform transform = 3;
  if (this->has_transform()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transform_);
  }

  // int32 building_id = 1;
  if (this->building_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_building_id());
  }

  // int32 type_id = 2;
  if (this->type_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventBuildingCreation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IronGames.EventBuildingCreation)
  GOOGLE_DCHECK_NE(&from, this);
  const EventBuildingCreation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EventBuildingCreation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IronGames.EventBuildingCreation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IronGames.EventBuildingCreation)
    MergeFrom(*source);
  }
}

void EventBuildingCreation::MergeFrom(const EventBuildingCreation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IronGames.EventBuildingCreation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_transform()) {
    _internal_mutable_transform()->::IronGames::Transform::MergeFrom(from._internal_transform());
  }
  if (from.building_id() != 0) {
    _internal_set_building_id(from._internal_building_id());
  }
  if (from.type_id() != 0) {
    _internal_set_type_id(from._internal_type_id());
  }
}

void EventBuildingCreation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IronGames.EventBuildingCreation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventBuildingCreation::CopyFrom(const EventBuildingCreation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IronGames.EventBuildingCreation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventBuildingCreation::IsInitialized() const {
  return true;
}

void EventBuildingCreation::InternalSwap(EventBuildingCreation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EventBuildingCreation, type_id_)
      + sizeof(EventBuildingCreation::type_id_)
      - PROTOBUF_FIELD_OFFSET(EventBuildingCreation, transform_)>(
          reinterpret_cast<char*>(&transform_),
          reinterpret_cast<char*>(&other->transform_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EventBuildingCreation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EventBuildingDestruction::_Internal {
 public:
};

EventBuildingDestruction::EventBuildingDestruction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IronGames.EventBuildingDestruction)
}
EventBuildingDestruction::EventBuildingDestruction(const EventBuildingDestruction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  building_id_ = from.building_id_;
  // @@protoc_insertion_point(copy_constructor:IronGames.EventBuildingDestruction)
}

void EventBuildingDestruction::SharedCtor() {
building_id_ = 0;
}

EventBuildingDestruction::~EventBuildingDestruction() {
  // @@protoc_insertion_point(destructor:IronGames.EventBuildingDestruction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EventBuildingDestruction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EventBuildingDestruction::ArenaDtor(void* object) {
  EventBuildingDestruction* _this = reinterpret_cast< EventBuildingDestruction* >(object);
  (void)_this;
}
void EventBuildingDestruction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EventBuildingDestruction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EventBuildingDestruction::Clear() {
// @@protoc_insertion_point(message_clear_start:IronGames.EventBuildingDestruction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  building_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventBuildingDestruction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 building_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          building_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EventBuildingDestruction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IronGames.EventBuildingDestruction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 building_id = 1;
  if (this->building_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_building_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IronGames.EventBuildingDestruction)
  return target;
}

size_t EventBuildingDestruction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IronGames.EventBuildingDestruction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 building_id = 1;
  if (this->building_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_building_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventBuildingDestruction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IronGames.EventBuildingDestruction)
  GOOGLE_DCHECK_NE(&from, this);
  const EventBuildingDestruction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EventBuildingDestruction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IronGames.EventBuildingDestruction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IronGames.EventBuildingDestruction)
    MergeFrom(*source);
  }
}

void EventBuildingDestruction::MergeFrom(const EventBuildingDestruction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IronGames.EventBuildingDestruction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.building_id() != 0) {
    _internal_set_building_id(from._internal_building_id());
  }
}

void EventBuildingDestruction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IronGames.EventBuildingDestruction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventBuildingDestruction::CopyFrom(const EventBuildingDestruction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IronGames.EventBuildingDestruction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventBuildingDestruction::IsInitialized() const {
  return true;
}

void EventBuildingDestruction::InternalSwap(EventBuildingDestruction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(building_id_, other->building_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventBuildingDestruction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CommandMove::_Internal {
 public:
  static const ::IronGames::Vector3& destination(const CommandMove* msg);
};

const ::IronGames::Vector3&
CommandMove::_Internal::destination(const CommandMove* msg) {
  return *msg->destination_;
}
CommandMove::CommandMove(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IronGames.CommandMove)
}
CommandMove::CommandMove(const CommandMove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_destination()) {
    destination_ = new ::IronGames::Vector3(*from.destination_);
  } else {
    destination_ = nullptr;
  }
  unit_id_ = from.unit_id_;
  // @@protoc_insertion_point(copy_constructor:IronGames.CommandMove)
}

void CommandMove::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&destination_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&unit_id_) -
    reinterpret_cast<char*>(&destination_)) + sizeof(unit_id_));
}

CommandMove::~CommandMove() {
  // @@protoc_insertion_point(destructor:IronGames.CommandMove)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandMove::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete destination_;
}

void CommandMove::ArenaDtor(void* object) {
  CommandMove* _this = reinterpret_cast< CommandMove* >(object);
  (void)_this;
}
void CommandMove::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandMove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandMove::Clear() {
// @@protoc_insertion_point(message_clear_start:IronGames.CommandMove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && destination_ != nullptr) {
    delete destination_;
  }
  destination_ = nullptr;
  unit_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandMove::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 unit_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          unit_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IronGames.Vector3 destination = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_destination(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandMove::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IronGames.CommandMove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 unit_id = 1;
  if (this->unit_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_unit_id(), target);
  }

  // .IronGames.Vector3 destination = 2;
  if (this->has_destination()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::destination(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IronGames.CommandMove)
  return target;
}

size_t CommandMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IronGames.CommandMove)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .IronGames.Vector3 destination = 2;
  if (this->has_destination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *destination_);
  }

  // int32 unit_id = 1;
  if (this->unit_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_unit_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandMove::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IronGames.CommandMove)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandMove* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandMove>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IronGames.CommandMove)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IronGames.CommandMove)
    MergeFrom(*source);
  }
}

void CommandMove::MergeFrom(const CommandMove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IronGames.CommandMove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_destination()) {
    _internal_mutable_destination()->::IronGames::Vector3::MergeFrom(from._internal_destination());
  }
  if (from.unit_id() != 0) {
    _internal_set_unit_id(from._internal_unit_id());
  }
}

void CommandMove::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IronGames.CommandMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandMove::CopyFrom(const CommandMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IronGames.CommandMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandMove::IsInitialized() const {
  return true;
}

void CommandMove::InternalSwap(CommandMove* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandMove, unit_id_)
      + sizeof(CommandMove::unit_id_)
      - PROTOBUF_FIELD_OFFSET(CommandMove, destination_)>(
          reinterpret_cast<char*>(&destination_),
          reinterpret_cast<char*>(&other->destination_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandMove::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CommandAttack::_Internal {
 public:
};

CommandAttack::CommandAttack(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IronGames.CommandAttack)
}
CommandAttack::CommandAttack(const CommandAttack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&unit_id_, &from.unit_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_id_) -
    reinterpret_cast<char*>(&unit_id_)) + sizeof(target_id_));
  // @@protoc_insertion_point(copy_constructor:IronGames.CommandAttack)
}

void CommandAttack::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&unit_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&target_id_) -
    reinterpret_cast<char*>(&unit_id_)) + sizeof(target_id_));
}

CommandAttack::~CommandAttack() {
  // @@protoc_insertion_point(destructor:IronGames.CommandAttack)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandAttack::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CommandAttack::ArenaDtor(void* object) {
  CommandAttack* _this = reinterpret_cast< CommandAttack* >(object);
  (void)_this;
}
void CommandAttack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandAttack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandAttack::Clear() {
// @@protoc_insertion_point(message_clear_start:IronGames.CommandAttack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&unit_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_id_) -
      reinterpret_cast<char*>(&unit_id_)) + sizeof(target_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandAttack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 unit_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          unit_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 target_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          target_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandAttack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IronGames.CommandAttack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 unit_id = 1;
  if (this->unit_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_unit_id(), target);
  }

  // int32 target_id = 2;
  if (this->target_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_target_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IronGames.CommandAttack)
  return target;
}

size_t CommandAttack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IronGames.CommandAttack)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 unit_id = 1;
  if (this->unit_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_unit_id());
  }

  // int32 target_id = 2;
  if (this->target_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_target_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandAttack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IronGames.CommandAttack)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandAttack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandAttack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IronGames.CommandAttack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IronGames.CommandAttack)
    MergeFrom(*source);
  }
}

void CommandAttack::MergeFrom(const CommandAttack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IronGames.CommandAttack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.unit_id() != 0) {
    _internal_set_unit_id(from._internal_unit_id());
  }
  if (from.target_id() != 0) {
    _internal_set_target_id(from._internal_target_id());
  }
}

void CommandAttack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IronGames.CommandAttack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandAttack::CopyFrom(const CommandAttack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IronGames.CommandAttack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandAttack::IsInitialized() const {
  return true;
}

void CommandAttack::InternalSwap(CommandAttack* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandAttack, target_id_)
      + sizeof(CommandAttack::target_id_)
      - PROTOBUF_FIELD_OFFSET(CommandAttack, unit_id_)>(
          reinterpret_cast<char*>(&unit_id_),
          reinterpret_cast<char*>(&other->unit_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandAttack::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CommandAttackMove::_Internal {
 public:
  static const ::IronGames::Vector3& destination(const CommandAttackMove* msg);
};

const ::IronGames::Vector3&
CommandAttackMove::_Internal::destination(const CommandAttackMove* msg) {
  return *msg->destination_;
}
CommandAttackMove::CommandAttackMove(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IronGames.CommandAttackMove)
}
CommandAttackMove::CommandAttackMove(const CommandAttackMove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_destination()) {
    destination_ = new ::IronGames::Vector3(*from.destination_);
  } else {
    destination_ = nullptr;
  }
  unit_id_ = from.unit_id_;
  // @@protoc_insertion_point(copy_constructor:IronGames.CommandAttackMove)
}

void CommandAttackMove::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&destination_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&unit_id_) -
    reinterpret_cast<char*>(&destination_)) + sizeof(unit_id_));
}

CommandAttackMove::~CommandAttackMove() {
  // @@protoc_insertion_point(destructor:IronGames.CommandAttackMove)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandAttackMove::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete destination_;
}

void CommandAttackMove::ArenaDtor(void* object) {
  CommandAttackMove* _this = reinterpret_cast< CommandAttackMove* >(object);
  (void)_this;
}
void CommandAttackMove::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandAttackMove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandAttackMove::Clear() {
// @@protoc_insertion_point(message_clear_start:IronGames.CommandAttackMove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && destination_ != nullptr) {
    delete destination_;
  }
  destination_ = nullptr;
  unit_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandAttackMove::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 unit_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          unit_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IronGames.Vector3 destination = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_destination(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandAttackMove::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IronGames.CommandAttackMove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 unit_id = 1;
  if (this->unit_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_unit_id(), target);
  }

  // .IronGames.Vector3 destination = 2;
  if (this->has_destination()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::destination(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IronGames.CommandAttackMove)
  return target;
}

size_t CommandAttackMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IronGames.CommandAttackMove)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .IronGames.Vector3 destination = 2;
  if (this->has_destination()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *destination_);
  }

  // int32 unit_id = 1;
  if (this->unit_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_unit_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandAttackMove::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IronGames.CommandAttackMove)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandAttackMove* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandAttackMove>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IronGames.CommandAttackMove)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IronGames.CommandAttackMove)
    MergeFrom(*source);
  }
}

void CommandAttackMove::MergeFrom(const CommandAttackMove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IronGames.CommandAttackMove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_destination()) {
    _internal_mutable_destination()->::IronGames::Vector3::MergeFrom(from._internal_destination());
  }
  if (from.unit_id() != 0) {
    _internal_set_unit_id(from._internal_unit_id());
  }
}

void CommandAttackMove::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IronGames.CommandAttackMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandAttackMove::CopyFrom(const CommandAttackMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IronGames.CommandAttackMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandAttackMove::IsInitialized() const {
  return true;
}

void CommandAttackMove::InternalSwap(CommandAttackMove* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandAttackMove, unit_id_)
      + sizeof(CommandAttackMove::unit_id_)
      - PROTOBUF_FIELD_OFFSET(CommandAttackMove, destination_)>(
          reinterpret_cast<char*>(&destination_),
          reinterpret_cast<char*>(&other->destination_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandAttackMove::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EventUnitCommand::_Internal {
 public:
  static const ::IronGames::CommandMove& move(const EventUnitCommand* msg);
  static const ::IronGames::CommandAttack& attack(const EventUnitCommand* msg);
  static const ::IronGames::CommandAttackMove& attack_move(const EventUnitCommand* msg);
};

const ::IronGames::CommandMove&
EventUnitCommand::_Internal::move(const EventUnitCommand* msg) {
  return *msg->command_.move_;
}
const ::IronGames::CommandAttack&
EventUnitCommand::_Internal::attack(const EventUnitCommand* msg) {
  return *msg->command_.attack_;
}
const ::IronGames::CommandAttackMove&
EventUnitCommand::_Internal::attack_move(const EventUnitCommand* msg) {
  return *msg->command_.attack_move_;
}
void EventUnitCommand::set_allocated_move(::IronGames::CommandMove* move) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_command();
  if (move) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(move);
    if (message_arena != submessage_arena) {
      move = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, move, submessage_arena);
    }
    set_has_move();
    command_.move_ = move;
  }
  // @@protoc_insertion_point(field_set_allocated:IronGames.EventUnitCommand.move)
}
void EventUnitCommand::set_allocated_attack(::IronGames::CommandAttack* attack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_command();
  if (attack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(attack);
    if (message_arena != submessage_arena) {
      attack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attack, submessage_arena);
    }
    set_has_attack();
    command_.attack_ = attack;
  }
  // @@protoc_insertion_point(field_set_allocated:IronGames.EventUnitCommand.attack)
}
void EventUnitCommand::set_allocated_attack_move(::IronGames::CommandAttackMove* attack_move) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_command();
  if (attack_move) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(attack_move);
    if (message_arena != submessage_arena) {
      attack_move = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attack_move, submessage_arena);
    }
    set_has_attack_move();
    command_.attack_move_ = attack_move;
  }
  // @@protoc_insertion_point(field_set_allocated:IronGames.EventUnitCommand.attack_move)
}
EventUnitCommand::EventUnitCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IronGames.EventUnitCommand)
}
EventUnitCommand::EventUnitCommand(const EventUnitCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_command();
  switch (from.command_case()) {
    case kMove: {
      _internal_mutable_move()->::IronGames::CommandMove::MergeFrom(from._internal_move());
      break;
    }
    case kAttack: {
      _internal_mutable_attack()->::IronGames::CommandAttack::MergeFrom(from._internal_attack());
      break;
    }
    case kAttackMove: {
      _internal_mutable_attack_move()->::IronGames::CommandAttackMove::MergeFrom(from._internal_attack_move());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:IronGames.EventUnitCommand)
}

void EventUnitCommand::SharedCtor() {
clear_has_command();
}

EventUnitCommand::~EventUnitCommand() {
  // @@protoc_insertion_point(destructor:IronGames.EventUnitCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EventUnitCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_command()) {
    clear_command();
  }
}

void EventUnitCommand::ArenaDtor(void* object) {
  EventUnitCommand* _this = reinterpret_cast< EventUnitCommand* >(object);
  (void)_this;
}
void EventUnitCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EventUnitCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EventUnitCommand::clear_command() {
// @@protoc_insertion_point(one_of_clear_start:IronGames.EventUnitCommand)
  switch (command_case()) {
    case kMove: {
      if (GetArena() == nullptr) {
        delete command_.move_;
      }
      break;
    }
    case kAttack: {
      if (GetArena() == nullptr) {
        delete command_.attack_;
      }
      break;
    }
    case kAttackMove: {
      if (GetArena() == nullptr) {
        delete command_.attack_move_;
      }
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = COMMAND_NOT_SET;
}


void EventUnitCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:IronGames.EventUnitCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_command();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventUnitCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .IronGames.CommandMove move = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_move(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IronGames.CommandAttack attack = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_attack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IronGames.CommandAttackMove attack_move = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_attack_move(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EventUnitCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IronGames.EventUnitCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IronGames.CommandMove move = 1;
  if (_internal_has_move()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::move(this), target, stream);
  }

  // .IronGames.CommandAttack attack = 2;
  if (_internal_has_attack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::attack(this), target, stream);
  }

  // .IronGames.CommandAttackMove attack_move = 3;
  if (_internal_has_attack_move()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::attack_move(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IronGames.EventUnitCommand)
  return target;
}

size_t EventUnitCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IronGames.EventUnitCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (command_case()) {
    // .IronGames.CommandMove move = 1;
    case kMove: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.move_);
      break;
    }
    // .IronGames.CommandAttack attack = 2;
    case kAttack: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.attack_);
      break;
    }
    // .IronGames.CommandAttackMove attack_move = 3;
    case kAttackMove: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *command_.attack_move_);
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventUnitCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IronGames.EventUnitCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const EventUnitCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EventUnitCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IronGames.EventUnitCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IronGames.EventUnitCommand)
    MergeFrom(*source);
  }
}

void EventUnitCommand::MergeFrom(const EventUnitCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IronGames.EventUnitCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.command_case()) {
    case kMove: {
      _internal_mutable_move()->::IronGames::CommandMove::MergeFrom(from._internal_move());
      break;
    }
    case kAttack: {
      _internal_mutable_attack()->::IronGames::CommandAttack::MergeFrom(from._internal_attack());
      break;
    }
    case kAttackMove: {
      _internal_mutable_attack_move()->::IronGames::CommandAttackMove::MergeFrom(from._internal_attack_move());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
}

void EventUnitCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IronGames.EventUnitCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventUnitCommand::CopyFrom(const EventUnitCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IronGames.EventUnitCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventUnitCommand::IsInitialized() const {
  return true;
}

void EventUnitCommand::InternalSwap(EventUnitCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(command_, other->command_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventUnitCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EventPlayerReadyToStartGame::_Internal {
 public:
};

EventPlayerReadyToStartGame::EventPlayerReadyToStartGame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IronGames.EventPlayerReadyToStartGame)
}
EventPlayerReadyToStartGame::EventPlayerReadyToStartGame(const EventPlayerReadyToStartGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IronGames.EventPlayerReadyToStartGame)
}

void EventPlayerReadyToStartGame::SharedCtor() {
}

EventPlayerReadyToStartGame::~EventPlayerReadyToStartGame() {
  // @@protoc_insertion_point(destructor:IronGames.EventPlayerReadyToStartGame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EventPlayerReadyToStartGame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EventPlayerReadyToStartGame::ArenaDtor(void* object) {
  EventPlayerReadyToStartGame* _this = reinterpret_cast< EventPlayerReadyToStartGame* >(object);
  (void)_this;
}
void EventPlayerReadyToStartGame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EventPlayerReadyToStartGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EventPlayerReadyToStartGame::Clear() {
// @@protoc_insertion_point(message_clear_start:IronGames.EventPlayerReadyToStartGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventPlayerReadyToStartGame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EventPlayerReadyToStartGame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IronGames.EventPlayerReadyToStartGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IronGames.EventPlayerReadyToStartGame)
  return target;
}

size_t EventPlayerReadyToStartGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IronGames.EventPlayerReadyToStartGame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventPlayerReadyToStartGame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IronGames.EventPlayerReadyToStartGame)
  GOOGLE_DCHECK_NE(&from, this);
  const EventPlayerReadyToStartGame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EventPlayerReadyToStartGame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IronGames.EventPlayerReadyToStartGame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IronGames.EventPlayerReadyToStartGame)
    MergeFrom(*source);
  }
}

void EventPlayerReadyToStartGame::MergeFrom(const EventPlayerReadyToStartGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IronGames.EventPlayerReadyToStartGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void EventPlayerReadyToStartGame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IronGames.EventPlayerReadyToStartGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventPlayerReadyToStartGame::CopyFrom(const EventPlayerReadyToStartGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IronGames.EventPlayerReadyToStartGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventPlayerReadyToStartGame::IsInitialized() const {
  return true;
}

void EventPlayerReadyToStartGame::InternalSwap(EventPlayerReadyToStartGame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventPlayerReadyToStartGame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EventGameStart::_Internal {
 public:
};

EventGameStart::EventGameStart(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IronGames.EventGameStart)
}
EventGameStart::EventGameStart(const EventGameStart& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IronGames.EventGameStart)
}

void EventGameStart::SharedCtor() {
}

EventGameStart::~EventGameStart() {
  // @@protoc_insertion_point(destructor:IronGames.EventGameStart)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EventGameStart::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EventGameStart::ArenaDtor(void* object) {
  EventGameStart* _this = reinterpret_cast< EventGameStart* >(object);
  (void)_this;
}
void EventGameStart::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EventGameStart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EventGameStart::Clear() {
// @@protoc_insertion_point(message_clear_start:IronGames.EventGameStart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventGameStart::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EventGameStart::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IronGames.EventGameStart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IronGames.EventGameStart)
  return target;
}

size_t EventGameStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IronGames.EventGameStart)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventGameStart::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IronGames.EventGameStart)
  GOOGLE_DCHECK_NE(&from, this);
  const EventGameStart* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EventGameStart>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IronGames.EventGameStart)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IronGames.EventGameStart)
    MergeFrom(*source);
  }
}

void EventGameStart::MergeFrom(const EventGameStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IronGames.EventGameStart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void EventGameStart::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IronGames.EventGameStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventGameStart::CopyFrom(const EventGameStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IronGames.EventGameStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventGameStart::IsInitialized() const {
  return true;
}

void EventGameStart::InternalSwap(EventGameStart* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventGameStart::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EventAllPlayersReadyForGameToStart::_Internal {
 public:
};

EventAllPlayersReadyForGameToStart::EventAllPlayersReadyForGameToStart(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IronGames.EventAllPlayersReadyForGameToStart)
}
EventAllPlayersReadyForGameToStart::EventAllPlayersReadyForGameToStart(const EventAllPlayersReadyForGameToStart& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IronGames.EventAllPlayersReadyForGameToStart)
}

void EventAllPlayersReadyForGameToStart::SharedCtor() {
}

EventAllPlayersReadyForGameToStart::~EventAllPlayersReadyForGameToStart() {
  // @@protoc_insertion_point(destructor:IronGames.EventAllPlayersReadyForGameToStart)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EventAllPlayersReadyForGameToStart::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EventAllPlayersReadyForGameToStart::ArenaDtor(void* object) {
  EventAllPlayersReadyForGameToStart* _this = reinterpret_cast< EventAllPlayersReadyForGameToStart* >(object);
  (void)_this;
}
void EventAllPlayersReadyForGameToStart::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EventAllPlayersReadyForGameToStart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EventAllPlayersReadyForGameToStart::Clear() {
// @@protoc_insertion_point(message_clear_start:IronGames.EventAllPlayersReadyForGameToStart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventAllPlayersReadyForGameToStart::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EventAllPlayersReadyForGameToStart::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IronGames.EventAllPlayersReadyForGameToStart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IronGames.EventAllPlayersReadyForGameToStart)
  return target;
}

size_t EventAllPlayersReadyForGameToStart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IronGames.EventAllPlayersReadyForGameToStart)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventAllPlayersReadyForGameToStart::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IronGames.EventAllPlayersReadyForGameToStart)
  GOOGLE_DCHECK_NE(&from, this);
  const EventAllPlayersReadyForGameToStart* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EventAllPlayersReadyForGameToStart>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IronGames.EventAllPlayersReadyForGameToStart)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IronGames.EventAllPlayersReadyForGameToStart)
    MergeFrom(*source);
  }
}

void EventAllPlayersReadyForGameToStart::MergeFrom(const EventAllPlayersReadyForGameToStart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IronGames.EventAllPlayersReadyForGameToStart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void EventAllPlayersReadyForGameToStart::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IronGames.EventAllPlayersReadyForGameToStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventAllPlayersReadyForGameToStart::CopyFrom(const EventAllPlayersReadyForGameToStart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IronGames.EventAllPlayersReadyForGameToStart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventAllPlayersReadyForGameToStart::IsInitialized() const {
  return true;
}

void EventAllPlayersReadyForGameToStart::InternalSwap(EventAllPlayersReadyForGameToStart* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventAllPlayersReadyForGameToStart::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EventPlayerLoadedGame::_Internal {
 public:
};

EventPlayerLoadedGame::EventPlayerLoadedGame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IronGames.EventPlayerLoadedGame)
}
EventPlayerLoadedGame::EventPlayerLoadedGame(const EventPlayerLoadedGame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IronGames.EventPlayerLoadedGame)
}

void EventPlayerLoadedGame::SharedCtor() {
}

EventPlayerLoadedGame::~EventPlayerLoadedGame() {
  // @@protoc_insertion_point(destructor:IronGames.EventPlayerLoadedGame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EventPlayerLoadedGame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EventPlayerLoadedGame::ArenaDtor(void* object) {
  EventPlayerLoadedGame* _this = reinterpret_cast< EventPlayerLoadedGame* >(object);
  (void)_this;
}
void EventPlayerLoadedGame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EventPlayerLoadedGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EventPlayerLoadedGame::Clear() {
// @@protoc_insertion_point(message_clear_start:IronGames.EventPlayerLoadedGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventPlayerLoadedGame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EventPlayerLoadedGame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IronGames.EventPlayerLoadedGame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IronGames.EventPlayerLoadedGame)
  return target;
}

size_t EventPlayerLoadedGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IronGames.EventPlayerLoadedGame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventPlayerLoadedGame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IronGames.EventPlayerLoadedGame)
  GOOGLE_DCHECK_NE(&from, this);
  const EventPlayerLoadedGame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EventPlayerLoadedGame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IronGames.EventPlayerLoadedGame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IronGames.EventPlayerLoadedGame)
    MergeFrom(*source);
  }
}

void EventPlayerLoadedGame::MergeFrom(const EventPlayerLoadedGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IronGames.EventPlayerLoadedGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void EventPlayerLoadedGame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IronGames.EventPlayerLoadedGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventPlayerLoadedGame::CopyFrom(const EventPlayerLoadedGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IronGames.EventPlayerLoadedGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventPlayerLoadedGame::IsInitialized() const {
  return true;
}

void EventPlayerLoadedGame::InternalSwap(EventPlayerLoadedGame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventPlayerLoadedGame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EventPlayerLoadedTile::_Internal {
 public:
  static const ::IronGames::Tile& tile(const EventPlayerLoadedTile* msg);
};

const ::IronGames::Tile&
EventPlayerLoadedTile::_Internal::tile(const EventPlayerLoadedTile* msg) {
  return *msg->tile_;
}
EventPlayerLoadedTile::EventPlayerLoadedTile(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IronGames.EventPlayerLoadedTile)
}
EventPlayerLoadedTile::EventPlayerLoadedTile(const EventPlayerLoadedTile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tile()) {
    tile_ = new ::IronGames::Tile(*from.tile_);
  } else {
    tile_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:IronGames.EventPlayerLoadedTile)
}

void EventPlayerLoadedTile::SharedCtor() {
tile_ = nullptr;
}

EventPlayerLoadedTile::~EventPlayerLoadedTile() {
  // @@protoc_insertion_point(destructor:IronGames.EventPlayerLoadedTile)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EventPlayerLoadedTile::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete tile_;
}

void EventPlayerLoadedTile::ArenaDtor(void* object) {
  EventPlayerLoadedTile* _this = reinterpret_cast< EventPlayerLoadedTile* >(object);
  (void)_this;
}
void EventPlayerLoadedTile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EventPlayerLoadedTile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EventPlayerLoadedTile::Clear() {
// @@protoc_insertion_point(message_clear_start:IronGames.EventPlayerLoadedTile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && tile_ != nullptr) {
    delete tile_;
  }
  tile_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventPlayerLoadedTile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .IronGames.Tile tile = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tile(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EventPlayerLoadedTile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IronGames.EventPlayerLoadedTile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IronGames.Tile tile = 1;
  if (this->has_tile()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tile(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IronGames.EventPlayerLoadedTile)
  return target;
}

size_t EventPlayerLoadedTile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IronGames.EventPlayerLoadedTile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .IronGames.Tile tile = 1;
  if (this->has_tile()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tile_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventPlayerLoadedTile::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IronGames.EventPlayerLoadedTile)
  GOOGLE_DCHECK_NE(&from, this);
  const EventPlayerLoadedTile* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EventPlayerLoadedTile>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IronGames.EventPlayerLoadedTile)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IronGames.EventPlayerLoadedTile)
    MergeFrom(*source);
  }
}

void EventPlayerLoadedTile::MergeFrom(const EventPlayerLoadedTile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IronGames.EventPlayerLoadedTile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tile()) {
    _internal_mutable_tile()->::IronGames::Tile::MergeFrom(from._internal_tile());
  }
}

void EventPlayerLoadedTile::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IronGames.EventPlayerLoadedTile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventPlayerLoadedTile::CopyFrom(const EventPlayerLoadedTile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IronGames.EventPlayerLoadedTile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventPlayerLoadedTile::IsInitialized() const {
  return true;
}

void EventPlayerLoadedTile::InternalSwap(EventPlayerLoadedTile* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(tile_, other->tile_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventPlayerLoadedTile::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Event::_Internal {
 public:
  static const ::IronGames::EventPlayerConnected& player_connected(const Event* msg);
  static const ::IronGames::EventPlayerDisconnected& player_disconnected(const Event* msg);
  static const ::IronGames::EventUnitCreation& unit_creation(const Event* msg);
  static const ::IronGames::EventActorCreationRequest& actor_creation_request(const Event* msg);
  static const ::IronGames::EventUnitDestruction& unit_destruction(const Event* msg);
  static const ::IronGames::EventBuildingCreation& building_creation(const Event* msg);
  static const ::IronGames::EventBuildingDestruction& building_destruction(const Event* msg);
  static const ::IronGames::EventUnitCommand& unit_command(const Event* msg);
  static const ::IronGames::EventPlayerReadyToStartGame& player_ready_to_start_game(const Event* msg);
  static const ::IronGames::EventGameStart& game_start(const Event* msg);
  static const ::IronGames::EventPlayerChanged& player_changed(const Event* msg);
  static const ::IronGames::EventAllPlayersReadyForGameToStart& all_players_ready_for_game_to_start(const Event* msg);
  static const ::IronGames::EventPlayerLoadedTile& player_loaded_tile(const Event* msg);
  static const ::IronGames::EventPlayerLoadedGame& player_loaded_game(const Event* msg);
};

const ::IronGames::EventPlayerConnected&
Event::_Internal::player_connected(const Event* msg) {
  return *msg->event_.player_connected_;
}
const ::IronGames::EventPlayerDisconnected&
Event::_Internal::player_disconnected(const Event* msg) {
  return *msg->event_.player_disconnected_;
}
const ::IronGames::EventUnitCreation&
Event::_Internal::unit_creation(const Event* msg) {
  return *msg->event_.unit_creation_;
}
const ::IronGames::EventActorCreationRequest&
Event::_Internal::actor_creation_request(const Event* msg) {
  return *msg->event_.actor_creation_request_;
}
const ::IronGames::EventUnitDestruction&
Event::_Internal::unit_destruction(const Event* msg) {
  return *msg->event_.unit_destruction_;
}
const ::IronGames::EventBuildingCreation&
Event::_Internal::building_creation(const Event* msg) {
  return *msg->event_.building_creation_;
}
const ::IronGames::EventBuildingDestruction&
Event::_Internal::building_destruction(const Event* msg) {
  return *msg->event_.building_destruction_;
}
const ::IronGames::EventUnitCommand&
Event::_Internal::unit_command(const Event* msg) {
  return *msg->event_.unit_command_;
}
const ::IronGames::EventPlayerReadyToStartGame&
Event::_Internal::player_ready_to_start_game(const Event* msg) {
  return *msg->event_.player_ready_to_start_game_;
}
const ::IronGames::EventGameStart&
Event::_Internal::game_start(const Event* msg) {
  return *msg->event_.game_start_;
}
const ::IronGames::EventPlayerChanged&
Event::_Internal::player_changed(const Event* msg) {
  return *msg->event_.player_changed_;
}
const ::IronGames::EventAllPlayersReadyForGameToStart&
Event::_Internal::all_players_ready_for_game_to_start(const Event* msg) {
  return *msg->event_.all_players_ready_for_game_to_start_;
}
const ::IronGames::EventPlayerLoadedTile&
Event::_Internal::player_loaded_tile(const Event* msg) {
  return *msg->event_.player_loaded_tile_;
}
const ::IronGames::EventPlayerLoadedGame&
Event::_Internal::player_loaded_game(const Event* msg) {
  return *msg->event_.player_loaded_game_;
}
void Event::set_allocated_player_connected(::IronGames::EventPlayerConnected* player_connected) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (player_connected) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(player_connected);
    if (message_arena != submessage_arena) {
      player_connected = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_connected, submessage_arena);
    }
    set_has_player_connected();
    event_.player_connected_ = player_connected;
  }
  // @@protoc_insertion_point(field_set_allocated:IronGames.Event.player_connected)
}
void Event::set_allocated_player_disconnected(::IronGames::EventPlayerDisconnected* player_disconnected) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (player_disconnected) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(player_disconnected);
    if (message_arena != submessage_arena) {
      player_disconnected = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_disconnected, submessage_arena);
    }
    set_has_player_disconnected();
    event_.player_disconnected_ = player_disconnected;
  }
  // @@protoc_insertion_point(field_set_allocated:IronGames.Event.player_disconnected)
}
void Event::set_allocated_unit_creation(::IronGames::EventUnitCreation* unit_creation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (unit_creation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(unit_creation);
    if (message_arena != submessage_arena) {
      unit_creation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unit_creation, submessage_arena);
    }
    set_has_unit_creation();
    event_.unit_creation_ = unit_creation;
  }
  // @@protoc_insertion_point(field_set_allocated:IronGames.Event.unit_creation)
}
void Event::set_allocated_actor_creation_request(::IronGames::EventActorCreationRequest* actor_creation_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (actor_creation_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(actor_creation_request);
    if (message_arena != submessage_arena) {
      actor_creation_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actor_creation_request, submessage_arena);
    }
    set_has_actor_creation_request();
    event_.actor_creation_request_ = actor_creation_request;
  }
  // @@protoc_insertion_point(field_set_allocated:IronGames.Event.actor_creation_request)
}
void Event::set_allocated_unit_destruction(::IronGames::EventUnitDestruction* unit_destruction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (unit_destruction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(unit_destruction);
    if (message_arena != submessage_arena) {
      unit_destruction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unit_destruction, submessage_arena);
    }
    set_has_unit_destruction();
    event_.unit_destruction_ = unit_destruction;
  }
  // @@protoc_insertion_point(field_set_allocated:IronGames.Event.unit_destruction)
}
void Event::set_allocated_building_creation(::IronGames::EventBuildingCreation* building_creation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (building_creation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(building_creation);
    if (message_arena != submessage_arena) {
      building_creation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, building_creation, submessage_arena);
    }
    set_has_building_creation();
    event_.building_creation_ = building_creation;
  }
  // @@protoc_insertion_point(field_set_allocated:IronGames.Event.building_creation)
}
void Event::set_allocated_building_destruction(::IronGames::EventBuildingDestruction* building_destruction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (building_destruction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(building_destruction);
    if (message_arena != submessage_arena) {
      building_destruction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, building_destruction, submessage_arena);
    }
    set_has_building_destruction();
    event_.building_destruction_ = building_destruction;
  }
  // @@protoc_insertion_point(field_set_allocated:IronGames.Event.building_destruction)
}
void Event::set_allocated_unit_command(::IronGames::EventUnitCommand* unit_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (unit_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(unit_command);
    if (message_arena != submessage_arena) {
      unit_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unit_command, submessage_arena);
    }
    set_has_unit_command();
    event_.unit_command_ = unit_command;
  }
  // @@protoc_insertion_point(field_set_allocated:IronGames.Event.unit_command)
}
void Event::set_allocated_player_ready_to_start_game(::IronGames::EventPlayerReadyToStartGame* player_ready_to_start_game) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (player_ready_to_start_game) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(player_ready_to_start_game);
    if (message_arena != submessage_arena) {
      player_ready_to_start_game = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_ready_to_start_game, submessage_arena);
    }
    set_has_player_ready_to_start_game();
    event_.player_ready_to_start_game_ = player_ready_to_start_game;
  }
  // @@protoc_insertion_point(field_set_allocated:IronGames.Event.player_ready_to_start_Game)
}
void Event::set_allocated_game_start(::IronGames::EventGameStart* game_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (game_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(game_start);
    if (message_arena != submessage_arena) {
      game_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, game_start, submessage_arena);
    }
    set_has_game_start();
    event_.game_start_ = game_start;
  }
  // @@protoc_insertion_point(field_set_allocated:IronGames.Event.game_start)
}
void Event::set_allocated_player_changed(::IronGames::EventPlayerChanged* player_changed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (player_changed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(player_changed);
    if (message_arena != submessage_arena) {
      player_changed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_changed, submessage_arena);
    }
    set_has_player_changed();
    event_.player_changed_ = player_changed;
  }
  // @@protoc_insertion_point(field_set_allocated:IronGames.Event.player_changed)
}
void Event::set_allocated_all_players_ready_for_game_to_start(::IronGames::EventAllPlayersReadyForGameToStart* all_players_ready_for_game_to_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (all_players_ready_for_game_to_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(all_players_ready_for_game_to_start);
    if (message_arena != submessage_arena) {
      all_players_ready_for_game_to_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, all_players_ready_for_game_to_start, submessage_arena);
    }
    set_has_all_players_ready_for_game_to_start();
    event_.all_players_ready_for_game_to_start_ = all_players_ready_for_game_to_start;
  }
  // @@protoc_insertion_point(field_set_allocated:IronGames.Event.all_players_ready_for_game_to_start)
}
void Event::set_allocated_player_loaded_tile(::IronGames::EventPlayerLoadedTile* player_loaded_tile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (player_loaded_tile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(player_loaded_tile);
    if (message_arena != submessage_arena) {
      player_loaded_tile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_loaded_tile, submessage_arena);
    }
    set_has_player_loaded_tile();
    event_.player_loaded_tile_ = player_loaded_tile;
  }
  // @@protoc_insertion_point(field_set_allocated:IronGames.Event.player_loaded_tile)
}
void Event::set_allocated_player_loaded_game(::IronGames::EventPlayerLoadedGame* player_loaded_game) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (player_loaded_game) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(player_loaded_game);
    if (message_arena != submessage_arena) {
      player_loaded_game = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_loaded_game, submessage_arena);
    }
    set_has_player_loaded_game();
    event_.player_loaded_game_ = player_loaded_game;
  }
  // @@protoc_insertion_point(field_set_allocated:IronGames.Event.player_loaded_game)
}
Event::Event(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IronGames.Event)
}
Event::Event(const Event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&sender_id_) -
    reinterpret_cast<char*>(&time_)) + sizeof(sender_id_));
  clear_has_event();
  switch (from.event_case()) {
    case kPlayerConnected: {
      _internal_mutable_player_connected()->::IronGames::EventPlayerConnected::MergeFrom(from._internal_player_connected());
      break;
    }
    case kPlayerDisconnected: {
      _internal_mutable_player_disconnected()->::IronGames::EventPlayerDisconnected::MergeFrom(from._internal_player_disconnected());
      break;
    }
    case kUnitCreation: {
      _internal_mutable_unit_creation()->::IronGames::EventUnitCreation::MergeFrom(from._internal_unit_creation());
      break;
    }
    case kActorCreationRequest: {
      _internal_mutable_actor_creation_request()->::IronGames::EventActorCreationRequest::MergeFrom(from._internal_actor_creation_request());
      break;
    }
    case kUnitDestruction: {
      _internal_mutable_unit_destruction()->::IronGames::EventUnitDestruction::MergeFrom(from._internal_unit_destruction());
      break;
    }
    case kBuildingCreation: {
      _internal_mutable_building_creation()->::IronGames::EventBuildingCreation::MergeFrom(from._internal_building_creation());
      break;
    }
    case kBuildingDestruction: {
      _internal_mutable_building_destruction()->::IronGames::EventBuildingDestruction::MergeFrom(from._internal_building_destruction());
      break;
    }
    case kUnitCommand: {
      _internal_mutable_unit_command()->::IronGames::EventUnitCommand::MergeFrom(from._internal_unit_command());
      break;
    }
    case kPlayerReadyToStartGame: {
      _internal_mutable_player_ready_to_start_game()->::IronGames::EventPlayerReadyToStartGame::MergeFrom(from._internal_player_ready_to_start_game());
      break;
    }
    case kGameStart: {
      _internal_mutable_game_start()->::IronGames::EventGameStart::MergeFrom(from._internal_game_start());
      break;
    }
    case kPlayerChanged: {
      _internal_mutable_player_changed()->::IronGames::EventPlayerChanged::MergeFrom(from._internal_player_changed());
      break;
    }
    case kAllPlayersReadyForGameToStart: {
      _internal_mutable_all_players_ready_for_game_to_start()->::IronGames::EventAllPlayersReadyForGameToStart::MergeFrom(from._internal_all_players_ready_for_game_to_start());
      break;
    }
    case kPlayerLoadedTile: {
      _internal_mutable_player_loaded_tile()->::IronGames::EventPlayerLoadedTile::MergeFrom(from._internal_player_loaded_tile());
      break;
    }
    case kPlayerLoadedGame: {
      _internal_mutable_player_loaded_game()->::IronGames::EventPlayerLoadedGame::MergeFrom(from._internal_player_loaded_game());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:IronGames.Event)
}

void Event::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sender_id_) -
    reinterpret_cast<char*>(&time_)) + sizeof(sender_id_));
clear_has_event();
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:IronGames.Event)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Event::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_event()) {
    clear_event();
  }
}

void Event::ArenaDtor(void* object) {
  Event* _this = reinterpret_cast< Event* >(object);
  (void)_this;
}
void Event::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Event::clear_event() {
// @@protoc_insertion_point(one_of_clear_start:IronGames.Event)
  switch (event_case()) {
    case kPlayerConnected: {
      if (GetArena() == nullptr) {
        delete event_.player_connected_;
      }
      break;
    }
    case kPlayerDisconnected: {
      if (GetArena() == nullptr) {
        delete event_.player_disconnected_;
      }
      break;
    }
    case kUnitCreation: {
      if (GetArena() == nullptr) {
        delete event_.unit_creation_;
      }
      break;
    }
    case kActorCreationRequest: {
      if (GetArena() == nullptr) {
        delete event_.actor_creation_request_;
      }
      break;
    }
    case kUnitDestruction: {
      if (GetArena() == nullptr) {
        delete event_.unit_destruction_;
      }
      break;
    }
    case kBuildingCreation: {
      if (GetArena() == nullptr) {
        delete event_.building_creation_;
      }
      break;
    }
    case kBuildingDestruction: {
      if (GetArena() == nullptr) {
        delete event_.building_destruction_;
      }
      break;
    }
    case kUnitCommand: {
      if (GetArena() == nullptr) {
        delete event_.unit_command_;
      }
      break;
    }
    case kPlayerReadyToStartGame: {
      if (GetArena() == nullptr) {
        delete event_.player_ready_to_start_game_;
      }
      break;
    }
    case kGameStart: {
      if (GetArena() == nullptr) {
        delete event_.game_start_;
      }
      break;
    }
    case kPlayerChanged: {
      if (GetArena() == nullptr) {
        delete event_.player_changed_;
      }
      break;
    }
    case kAllPlayersReadyForGameToStart: {
      if (GetArena() == nullptr) {
        delete event_.all_players_ready_for_game_to_start_;
      }
      break;
    }
    case kPlayerLoadedTile: {
      if (GetArena() == nullptr) {
        delete event_.player_loaded_tile_;
      }
      break;
    }
    case kPlayerLoadedGame: {
      if (GetArena() == nullptr) {
        delete event_.player_loaded_game_;
      }
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EVENT_NOT_SET;
}


void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:IronGames.Event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sender_id_) -
      reinterpret_cast<char*>(&time_)) + sizeof(sender_id_));
  clear_event();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Event::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sender_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sender_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IronGames.EventPlayerConnected player_connected = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_connected(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IronGames.EventPlayerDisconnected player_disconnected = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_disconnected(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IronGames.EventUnitCreation unit_creation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_unit_creation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IronGames.EventActorCreationRequest actor_creation_request = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_actor_creation_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IronGames.EventUnitDestruction unit_destruction = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_unit_destruction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IronGames.EventBuildingCreation building_creation = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_building_creation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IronGames.EventBuildingDestruction building_destruction = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_building_destruction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IronGames.EventUnitCommand unit_command = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_unit_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IronGames.EventPlayerReadyToStartGame player_ready_to_start_Game = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_ready_to_start_game(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IronGames.EventGameStart game_start = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IronGames.EventPlayerChanged player_changed = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_changed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IronGames.EventAllPlayersReadyForGameToStart all_players_ready_for_game_to_start = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_all_players_ready_for_game_to_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IronGames.EventPlayerLoadedTile player_loaded_tile = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_loaded_tile(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .IronGames.EventPlayerLoadedGame player_loaded_game = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_loaded_game(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Event::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IronGames.Event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  // int32 sender_id = 2;
  if (this->sender_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_sender_id(), target);
  }

  // .IronGames.EventPlayerConnected player_connected = 3;
  if (_internal_has_player_connected()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::player_connected(this), target, stream);
  }

  // .IronGames.EventPlayerDisconnected player_disconnected = 4;
  if (_internal_has_player_disconnected()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::player_disconnected(this), target, stream);
  }

  // .IronGames.EventUnitCreation unit_creation = 5;
  if (_internal_has_unit_creation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::unit_creation(this), target, stream);
  }

  // .IronGames.EventActorCreationRequest actor_creation_request = 6;
  if (_internal_has_actor_creation_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::actor_creation_request(this), target, stream);
  }

  // .IronGames.EventUnitDestruction unit_destruction = 7;
  if (_internal_has_unit_destruction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::unit_destruction(this), target, stream);
  }

  // .IronGames.EventBuildingCreation building_creation = 8;
  if (_internal_has_building_creation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::building_creation(this), target, stream);
  }

  // .IronGames.EventBuildingDestruction building_destruction = 9;
  if (_internal_has_building_destruction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::building_destruction(this), target, stream);
  }

  // .IronGames.EventUnitCommand unit_command = 10;
  if (_internal_has_unit_command()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::unit_command(this), target, stream);
  }

  // .IronGames.EventPlayerReadyToStartGame player_ready_to_start_Game = 11;
  if (_internal_has_player_ready_to_start_game()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::player_ready_to_start_game(this), target, stream);
  }

  // .IronGames.EventGameStart game_start = 12;
  if (_internal_has_game_start()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::game_start(this), target, stream);
  }

  // .IronGames.EventPlayerChanged player_changed = 13;
  if (_internal_has_player_changed()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::player_changed(this), target, stream);
  }

  // .IronGames.EventAllPlayersReadyForGameToStart all_players_ready_for_game_to_start = 14;
  if (_internal_has_all_players_ready_for_game_to_start()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::all_players_ready_for_game_to_start(this), target, stream);
  }

  // .IronGames.EventPlayerLoadedTile player_loaded_tile = 15;
  if (_internal_has_player_loaded_tile()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::player_loaded_tile(this), target, stream);
  }

  // .IronGames.EventPlayerLoadedGame player_loaded_game = 16;
  if (_internal_has_player_loaded_game()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::player_loaded_game(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IronGames.Event)
  return target;
}

size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IronGames.Event)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  // int32 sender_id = 2;
  if (this->sender_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sender_id());
  }

  switch (event_case()) {
    // .IronGames.EventPlayerConnected player_connected = 3;
    case kPlayerConnected: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.player_connected_);
      break;
    }
    // .IronGames.EventPlayerDisconnected player_disconnected = 4;
    case kPlayerDisconnected: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.player_disconnected_);
      break;
    }
    // .IronGames.EventUnitCreation unit_creation = 5;
    case kUnitCreation: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.unit_creation_);
      break;
    }
    // .IronGames.EventActorCreationRequest actor_creation_request = 6;
    case kActorCreationRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.actor_creation_request_);
      break;
    }
    // .IronGames.EventUnitDestruction unit_destruction = 7;
    case kUnitDestruction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.unit_destruction_);
      break;
    }
    // .IronGames.EventBuildingCreation building_creation = 8;
    case kBuildingCreation: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.building_creation_);
      break;
    }
    // .IronGames.EventBuildingDestruction building_destruction = 9;
    case kBuildingDestruction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.building_destruction_);
      break;
    }
    // .IronGames.EventUnitCommand unit_command = 10;
    case kUnitCommand: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.unit_command_);
      break;
    }
    // .IronGames.EventPlayerReadyToStartGame player_ready_to_start_Game = 11;
    case kPlayerReadyToStartGame: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.player_ready_to_start_game_);
      break;
    }
    // .IronGames.EventGameStart game_start = 12;
    case kGameStart: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.game_start_);
      break;
    }
    // .IronGames.EventPlayerChanged player_changed = 13;
    case kPlayerChanged: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.player_changed_);
      break;
    }
    // .IronGames.EventAllPlayersReadyForGameToStart all_players_ready_for_game_to_start = 14;
    case kAllPlayersReadyForGameToStart: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.all_players_ready_for_game_to_start_);
      break;
    }
    // .IronGames.EventPlayerLoadedTile player_loaded_tile = 15;
    case kPlayerLoadedTile: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.player_loaded_tile_);
      break;
    }
    // .IronGames.EventPlayerLoadedGame player_loaded_game = 16;
    case kPlayerLoadedGame: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.player_loaded_game_);
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IronGames.Event)
  GOOGLE_DCHECK_NE(&from, this);
  const Event* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Event>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IronGames.Event)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IronGames.Event)
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IronGames.Event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.sender_id() != 0) {
    _internal_set_sender_id(from._internal_sender_id());
  }
  switch (from.event_case()) {
    case kPlayerConnected: {
      _internal_mutable_player_connected()->::IronGames::EventPlayerConnected::MergeFrom(from._internal_player_connected());
      break;
    }
    case kPlayerDisconnected: {
      _internal_mutable_player_disconnected()->::IronGames::EventPlayerDisconnected::MergeFrom(from._internal_player_disconnected());
      break;
    }
    case kUnitCreation: {
      _internal_mutable_unit_creation()->::IronGames::EventUnitCreation::MergeFrom(from._internal_unit_creation());
      break;
    }
    case kActorCreationRequest: {
      _internal_mutable_actor_creation_request()->::IronGames::EventActorCreationRequest::MergeFrom(from._internal_actor_creation_request());
      break;
    }
    case kUnitDestruction: {
      _internal_mutable_unit_destruction()->::IronGames::EventUnitDestruction::MergeFrom(from._internal_unit_destruction());
      break;
    }
    case kBuildingCreation: {
      _internal_mutable_building_creation()->::IronGames::EventBuildingCreation::MergeFrom(from._internal_building_creation());
      break;
    }
    case kBuildingDestruction: {
      _internal_mutable_building_destruction()->::IronGames::EventBuildingDestruction::MergeFrom(from._internal_building_destruction());
      break;
    }
    case kUnitCommand: {
      _internal_mutable_unit_command()->::IronGames::EventUnitCommand::MergeFrom(from._internal_unit_command());
      break;
    }
    case kPlayerReadyToStartGame: {
      _internal_mutable_player_ready_to_start_game()->::IronGames::EventPlayerReadyToStartGame::MergeFrom(from._internal_player_ready_to_start_game());
      break;
    }
    case kGameStart: {
      _internal_mutable_game_start()->::IronGames::EventGameStart::MergeFrom(from._internal_game_start());
      break;
    }
    case kPlayerChanged: {
      _internal_mutable_player_changed()->::IronGames::EventPlayerChanged::MergeFrom(from._internal_player_changed());
      break;
    }
    case kAllPlayersReadyForGameToStart: {
      _internal_mutable_all_players_ready_for_game_to_start()->::IronGames::EventAllPlayersReadyForGameToStart::MergeFrom(from._internal_all_players_ready_for_game_to_start());
      break;
    }
    case kPlayerLoadedTile: {
      _internal_mutable_player_loaded_tile()->::IronGames::EventPlayerLoadedTile::MergeFrom(from._internal_player_loaded_tile());
      break;
    }
    case kPlayerLoadedGame: {
      _internal_mutable_player_loaded_game()->::IronGames::EventPlayerLoadedGame::MergeFrom(from._internal_player_loaded_game());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
}

void Event::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IronGames.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IronGames.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  return true;
}

void Event::InternalSwap(Event* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Event, sender_id_)
      + sizeof(Event::sender_id_)
      - PROTOBUF_FIELD_OFFSET(Event, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
  swap(event_, other->event_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Event::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EventList::_Internal {
 public:
};

EventList::EventList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  events_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IronGames.EventList)
}
EventList::EventList(const EventList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      events_(from.events_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IronGames.EventList)
}

void EventList::SharedCtor() {
}

EventList::~EventList() {
  // @@protoc_insertion_point(destructor:IronGames.EventList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EventList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EventList::ArenaDtor(void* object) {
  EventList* _this = reinterpret_cast< EventList* >(object);
  (void)_this;
}
void EventList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EventList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EventList::Clear() {
// @@protoc_insertion_point(message_clear_start:IronGames.EventList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .IronGames.Event events = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EventList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IronGames.EventList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .IronGames.Event events = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_events(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IronGames.EventList)
  return target;
}

size_t EventList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IronGames.EventList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IronGames.Event events = 1;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IronGames.EventList)
  GOOGLE_DCHECK_NE(&from, this);
  const EventList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EventList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IronGames.EventList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IronGames.EventList)
    MergeFrom(*source);
  }
}

void EventList::MergeFrom(const EventList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IronGames.EventList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
}

void EventList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IronGames.EventList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventList::CopyFrom(const EventList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IronGames.EventList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventList::IsInitialized() const {
  return true;
}

void EventList::InternalSwap(EventList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  events_.InternalSwap(&other->events_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class JoinGameRequest::_Internal {
 public:
  static const ::IronGames::Player& player(const JoinGameRequest* msg);
};

const ::IronGames::Player&
JoinGameRequest::_Internal::player(const JoinGameRequest* msg) {
  return *msg->player_;
}
JoinGameRequest::JoinGameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IronGames.JoinGameRequest)
}
JoinGameRequest::JoinGameRequest(const JoinGameRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    player_ = new ::IronGames::Player(*from.player_);
  } else {
    player_ = nullptr;
  }
  game_id_ = from.game_id_;
  // @@protoc_insertion_point(copy_constructor:IronGames.JoinGameRequest)
}

void JoinGameRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&game_id_) -
    reinterpret_cast<char*>(&player_)) + sizeof(game_id_));
}

JoinGameRequest::~JoinGameRequest() {
  // @@protoc_insertion_point(destructor:IronGames.JoinGameRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JoinGameRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete player_;
}

void JoinGameRequest::ArenaDtor(void* object) {
  JoinGameRequest* _this = reinterpret_cast< JoinGameRequest* >(object);
  (void)_this;
}
void JoinGameRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JoinGameRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JoinGameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:IronGames.JoinGameRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
  game_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JoinGameRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .IronGames.Player player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 game_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JoinGameRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IronGames.JoinGameRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IronGames.Player player = 1;
  if (this->has_player()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player(this), target, stream);
  }

  // int32 game_id = 2;
  if (this->game_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_game_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IronGames.JoinGameRequest)
  return target;
}

size_t JoinGameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IronGames.JoinGameRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .IronGames.Player player = 1;
  if (this->has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_);
  }

  // int32 game_id = 2;
  if (this->game_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_game_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JoinGameRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IronGames.JoinGameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const JoinGameRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JoinGameRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IronGames.JoinGameRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IronGames.JoinGameRequest)
    MergeFrom(*source);
  }
}

void JoinGameRequest::MergeFrom(const JoinGameRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IronGames.JoinGameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player()) {
    _internal_mutable_player()->::IronGames::Player::MergeFrom(from._internal_player());
  }
  if (from.game_id() != 0) {
    _internal_set_game_id(from._internal_game_id());
  }
}

void JoinGameRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IronGames.JoinGameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinGameRequest::CopyFrom(const JoinGameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IronGames.JoinGameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinGameRequest::IsInitialized() const {
  return true;
}

void JoinGameRequest::InternalSwap(JoinGameRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JoinGameRequest, game_id_)
      + sizeof(JoinGameRequest::game_id_)
      - PROTOBUF_FIELD_OFFSET(JoinGameRequest, player_)>(
          reinterpret_cast<char*>(&player_),
          reinterpret_cast<char*>(&other->player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JoinGameRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class JoinGameResponse::_Internal {
 public:
};

JoinGameResponse::JoinGameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  players_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IronGames.JoinGameResponse)
}
JoinGameResponse::JoinGameResponse(const JoinGameResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      players_(from.players_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  player_id_ = from.player_id_;
  // @@protoc_insertion_point(copy_constructor:IronGames.JoinGameResponse)
}

void JoinGameResponse::SharedCtor() {
player_id_ = 0;
}

JoinGameResponse::~JoinGameResponse() {
  // @@protoc_insertion_point(destructor:IronGames.JoinGameResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JoinGameResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void JoinGameResponse::ArenaDtor(void* object) {
  JoinGameResponse* _this = reinterpret_cast< JoinGameResponse* >(object);
  (void)_this;
}
void JoinGameResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JoinGameResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JoinGameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:IronGames.JoinGameResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  player_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JoinGameResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .IronGames.Player players = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JoinGameResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IronGames.JoinGameResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // repeated .IronGames.Player players = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_players(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IronGames.JoinGameResponse)
  return target;
}

size_t JoinGameResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IronGames.JoinGameResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .IronGames.Player players = 2;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 player_id = 1;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_player_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JoinGameResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IronGames.JoinGameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const JoinGameResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JoinGameResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IronGames.JoinGameResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IronGames.JoinGameResponse)
    MergeFrom(*source);
  }
}

void JoinGameResponse::MergeFrom(const JoinGameResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IronGames.JoinGameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  if (from.player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
}

void JoinGameResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IronGames.JoinGameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinGameResponse::CopyFrom(const JoinGameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IronGames.JoinGameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinGameResponse::IsInitialized() const {
  return true;
}

void JoinGameResponse::InternalSwap(JoinGameResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  players_.InternalSwap(&other->players_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JoinGameResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ExitGameRequest::_Internal {
 public:
};

ExitGameRequest::ExitGameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IronGames.ExitGameRequest)
}
ExitGameRequest::ExitGameRequest(const ExitGameRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  player_id_ = from.player_id_;
  // @@protoc_insertion_point(copy_constructor:IronGames.ExitGameRequest)
}

void ExitGameRequest::SharedCtor() {
player_id_ = 0;
}

ExitGameRequest::~ExitGameRequest() {
  // @@protoc_insertion_point(destructor:IronGames.ExitGameRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExitGameRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ExitGameRequest::ArenaDtor(void* object) {
  ExitGameRequest* _this = reinterpret_cast< ExitGameRequest* >(object);
  (void)_this;
}
void ExitGameRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExitGameRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExitGameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:IronGames.ExitGameRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExitGameRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExitGameRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IronGames.ExitGameRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IronGames.ExitGameRequest)
  return target;
}

size_t ExitGameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IronGames.ExitGameRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->player_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_player_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExitGameRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IronGames.ExitGameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ExitGameRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExitGameRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IronGames.ExitGameRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IronGames.ExitGameRequest)
    MergeFrom(*source);
  }
}

void ExitGameRequest::MergeFrom(const ExitGameRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IronGames.ExitGameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.player_id() != 0) {
    _internal_set_player_id(from._internal_player_id());
  }
}

void ExitGameRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IronGames.ExitGameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExitGameRequest::CopyFrom(const ExitGameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IronGames.ExitGameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExitGameRequest::IsInitialized() const {
  return true;
}

void ExitGameRequest::InternalSwap(ExitGameRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExitGameRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ExitGameResponse::_Internal {
 public:
};

ExitGameResponse::ExitGameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IronGames.ExitGameResponse)
}
ExitGameResponse::ExitGameResponse(const ExitGameResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IronGames.ExitGameResponse)
}

void ExitGameResponse::SharedCtor() {
}

ExitGameResponse::~ExitGameResponse() {
  // @@protoc_insertion_point(destructor:IronGames.ExitGameResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExitGameResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ExitGameResponse::ArenaDtor(void* object) {
  ExitGameResponse* _this = reinterpret_cast< ExitGameResponse* >(object);
  (void)_this;
}
void ExitGameResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExitGameResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExitGameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:IronGames.ExitGameResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExitGameResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExitGameResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IronGames.ExitGameResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IronGames.ExitGameResponse)
  return target;
}

size_t ExitGameResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IronGames.ExitGameResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExitGameResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IronGames.ExitGameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ExitGameResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExitGameResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IronGames.ExitGameResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IronGames.ExitGameResponse)
    MergeFrom(*source);
  }
}

void ExitGameResponse::MergeFrom(const ExitGameResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IronGames.ExitGameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ExitGameResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IronGames.ExitGameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExitGameResponse::CopyFrom(const ExitGameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IronGames.ExitGameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExitGameResponse::IsInitialized() const {
  return true;
}

void ExitGameResponse::InternalSwap(ExitGameResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExitGameResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SubscribeEventsRequest::_Internal {
 public:
  static const ::IronGames::Player& player(const SubscribeEventsRequest* msg);
};

const ::IronGames::Player&
SubscribeEventsRequest::_Internal::player(const SubscribeEventsRequest* msg) {
  return *msg->player_;
}
SubscribeEventsRequest::SubscribeEventsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IronGames.SubscribeEventsRequest)
}
SubscribeEventsRequest::SubscribeEventsRequest(const SubscribeEventsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    player_ = new ::IronGames::Player(*from.player_);
  } else {
    player_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:IronGames.SubscribeEventsRequest)
}

void SubscribeEventsRequest::SharedCtor() {
player_ = nullptr;
}

SubscribeEventsRequest::~SubscribeEventsRequest() {
  // @@protoc_insertion_point(destructor:IronGames.SubscribeEventsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SubscribeEventsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete player_;
}

void SubscribeEventsRequest::ArenaDtor(void* object) {
  SubscribeEventsRequest* _this = reinterpret_cast< SubscribeEventsRequest* >(object);
  (void)_this;
}
void SubscribeEventsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribeEventsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubscribeEventsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:IronGames.SubscribeEventsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeEventsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .IronGames.Player player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeEventsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IronGames.SubscribeEventsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .IronGames.Player player = 1;
  if (this->has_player()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IronGames.SubscribeEventsRequest)
  return target;
}

size_t SubscribeEventsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IronGames.SubscribeEventsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .IronGames.Player player = 1;
  if (this->has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeEventsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IronGames.SubscribeEventsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeEventsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeEventsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IronGames.SubscribeEventsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IronGames.SubscribeEventsRequest)
    MergeFrom(*source);
  }
}

void SubscribeEventsRequest::MergeFrom(const SubscribeEventsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IronGames.SubscribeEventsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player()) {
    _internal_mutable_player()->::IronGames::Player::MergeFrom(from._internal_player());
  }
}

void SubscribeEventsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IronGames.SubscribeEventsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeEventsRequest::CopyFrom(const SubscribeEventsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IronGames.SubscribeEventsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeEventsRequest::IsInitialized() const {
  return true;
}

void SubscribeEventsRequest::InternalSwap(SubscribeEventsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(player_, other->player_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeEventsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SendEventResponse::_Internal {
 public:
};

SendEventResponse::SendEventResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IronGames.SendEventResponse)
}
SendEventResponse::SendEventResponse(const SendEventResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IronGames.SendEventResponse)
}

void SendEventResponse::SharedCtor() {
}

SendEventResponse::~SendEventResponse() {
  // @@protoc_insertion_point(destructor:IronGames.SendEventResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SendEventResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SendEventResponse::ArenaDtor(void* object) {
  SendEventResponse* _this = reinterpret_cast< SendEventResponse* >(object);
  (void)_this;
}
void SendEventResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SendEventResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SendEventResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:IronGames.SendEventResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendEventResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendEventResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IronGames.SendEventResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IronGames.SendEventResponse)
  return target;
}

size_t SendEventResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IronGames.SendEventResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendEventResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IronGames.SendEventResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SendEventResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendEventResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IronGames.SendEventResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IronGames.SendEventResponse)
    MergeFrom(*source);
  }
}

void SendEventResponse::MergeFrom(const SendEventResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IronGames.SendEventResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SendEventResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IronGames.SendEventResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendEventResponse::CopyFrom(const SendEventResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IronGames.SendEventResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendEventResponse::IsInitialized() const {
  return true;
}

void SendEventResponse::InternalSwap(SendEventResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendEventResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NewGameRequest::_Internal {
 public:
};

NewGameRequest::NewGameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IronGames.NewGameRequest)
}
NewGameRequest::NewGameRequest(const NewGameRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IronGames.NewGameRequest)
}

void NewGameRequest::SharedCtor() {
}

NewGameRequest::~NewGameRequest() {
  // @@protoc_insertion_point(destructor:IronGames.NewGameRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NewGameRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NewGameRequest::ArenaDtor(void* object) {
  NewGameRequest* _this = reinterpret_cast< NewGameRequest* >(object);
  (void)_this;
}
void NewGameRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NewGameRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NewGameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:IronGames.NewGameRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewGameRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NewGameRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IronGames.NewGameRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IronGames.NewGameRequest)
  return target;
}

size_t NewGameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IronGames.NewGameRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewGameRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IronGames.NewGameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NewGameRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NewGameRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IronGames.NewGameRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IronGames.NewGameRequest)
    MergeFrom(*source);
  }
}

void NewGameRequest::MergeFrom(const NewGameRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IronGames.NewGameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void NewGameRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IronGames.NewGameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewGameRequest::CopyFrom(const NewGameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IronGames.NewGameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewGameRequest::IsInitialized() const {
  return true;
}

void NewGameRequest::InternalSwap(NewGameRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NewGameRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NewGameResponse::_Internal {
 public:
};

NewGameResponse::NewGameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IronGames.NewGameResponse)
}
NewGameResponse::NewGameResponse(const NewGameResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  game_id_ = from.game_id_;
  // @@protoc_insertion_point(copy_constructor:IronGames.NewGameResponse)
}

void NewGameResponse::SharedCtor() {
game_id_ = 0;
}

NewGameResponse::~NewGameResponse() {
  // @@protoc_insertion_point(destructor:IronGames.NewGameResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NewGameResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NewGameResponse::ArenaDtor(void* object) {
  NewGameResponse* _this = reinterpret_cast< NewGameResponse* >(object);
  (void)_this;
}
void NewGameResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NewGameResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NewGameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:IronGames.NewGameResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewGameResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NewGameResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IronGames.NewGameResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 game_id = 1;
  if (this->game_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_game_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IronGames.NewGameResponse)
  return target;
}

size_t NewGameResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IronGames.NewGameResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 game_id = 1;
  if (this->game_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_game_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewGameResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IronGames.NewGameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NewGameResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NewGameResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IronGames.NewGameResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IronGames.NewGameResponse)
    MergeFrom(*source);
  }
}

void NewGameResponse::MergeFrom(const NewGameResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IronGames.NewGameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.game_id() != 0) {
    _internal_set_game_id(from._internal_game_id());
  }
}

void NewGameResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IronGames.NewGameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewGameResponse::CopyFrom(const NewGameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IronGames.NewGameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewGameResponse::IsInitialized() const {
  return true;
}

void NewGameResponse::InternalSwap(NewGameResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(game_id_, other->game_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NewGameResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EndGameRequest::_Internal {
 public:
};

EndGameRequest::EndGameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IronGames.EndGameRequest)
}
EndGameRequest::EndGameRequest(const EndGameRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  game_id_ = from.game_id_;
  // @@protoc_insertion_point(copy_constructor:IronGames.EndGameRequest)
}

void EndGameRequest::SharedCtor() {
game_id_ = 0;
}

EndGameRequest::~EndGameRequest() {
  // @@protoc_insertion_point(destructor:IronGames.EndGameRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EndGameRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EndGameRequest::ArenaDtor(void* object) {
  EndGameRequest* _this = reinterpret_cast< EndGameRequest* >(object);
  (void)_this;
}
void EndGameRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EndGameRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EndGameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:IronGames.EndGameRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EndGameRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 game_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          game_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EndGameRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IronGames.EndGameRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 game_id = 1;
  if (this->game_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_game_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IronGames.EndGameRequest)
  return target;
}

size_t EndGameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IronGames.EndGameRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 game_id = 1;
  if (this->game_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_game_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EndGameRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IronGames.EndGameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EndGameRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EndGameRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IronGames.EndGameRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IronGames.EndGameRequest)
    MergeFrom(*source);
  }
}

void EndGameRequest::MergeFrom(const EndGameRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IronGames.EndGameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.game_id() != 0) {
    _internal_set_game_id(from._internal_game_id());
  }
}

void EndGameRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IronGames.EndGameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EndGameRequest::CopyFrom(const EndGameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IronGames.EndGameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndGameRequest::IsInitialized() const {
  return true;
}

void EndGameRequest::InternalSwap(EndGameRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(game_id_, other->game_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EndGameRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EndGameResponse::_Internal {
 public:
};

EndGameResponse::EndGameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:IronGames.EndGameResponse)
}
EndGameResponse::EndGameResponse(const EndGameResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:IronGames.EndGameResponse)
}

void EndGameResponse::SharedCtor() {
}

EndGameResponse::~EndGameResponse() {
  // @@protoc_insertion_point(destructor:IronGames.EndGameResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EndGameResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void EndGameResponse::ArenaDtor(void* object) {
  EndGameResponse* _this = reinterpret_cast< EndGameResponse* >(object);
  (void)_this;
}
void EndGameResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EndGameResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EndGameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:IronGames.EndGameResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EndGameResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EndGameResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IronGames.EndGameResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IronGames.EndGameResponse)
  return target;
}

size_t EndGameResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IronGames.EndGameResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EndGameResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IronGames.EndGameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const EndGameResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EndGameResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IronGames.EndGameResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IronGames.EndGameResponse)
    MergeFrom(*source);
  }
}

void EndGameResponse::MergeFrom(const EndGameResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IronGames.EndGameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void EndGameResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IronGames.EndGameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EndGameResponse::CopyFrom(const EndGameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IronGames.EndGameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndGameResponse::IsInitialized() const {
  return true;
}

void EndGameResponse::InternalSwap(EndGameResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EndGameResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace IronGames
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::IronGames::Color* Arena::CreateMaybeMessage< ::IronGames::Color >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IronGames::Color >(arena);
}
template<> PROTOBUF_NOINLINE ::IronGames::Vector3* Arena::CreateMaybeMessage< ::IronGames::Vector3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IronGames::Vector3 >(arena);
}
template<> PROTOBUF_NOINLINE ::IronGames::Matrix3* Arena::CreateMaybeMessage< ::IronGames::Matrix3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IronGames::Matrix3 >(arena);
}
template<> PROTOBUF_NOINLINE ::IronGames::Quaternion* Arena::CreateMaybeMessage< ::IronGames::Quaternion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IronGames::Quaternion >(arena);
}
template<> PROTOBUF_NOINLINE ::IronGames::Transform* Arena::CreateMaybeMessage< ::IronGames::Transform >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IronGames::Transform >(arena);
}
template<> PROTOBUF_NOINLINE ::IronGames::Parameter* Arena::CreateMaybeMessage< ::IronGames::Parameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IronGames::Parameter >(arena);
}
template<> PROTOBUF_NOINLINE ::IronGames::Player* Arena::CreateMaybeMessage< ::IronGames::Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IronGames::Player >(arena);
}
template<> PROTOBUF_NOINLINE ::IronGames::Actor* Arena::CreateMaybeMessage< ::IronGames::Actor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IronGames::Actor >(arena);
}
template<> PROTOBUF_NOINLINE ::IronGames::Tile* Arena::CreateMaybeMessage< ::IronGames::Tile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IronGames::Tile >(arena);
}
template<> PROTOBUF_NOINLINE ::IronGames::SimulationVertex* Arena::CreateMaybeMessage< ::IronGames::SimulationVertex >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IronGames::SimulationVertex >(arena);
}
template<> PROTOBUF_NOINLINE ::IronGames::SimulationTetrahedra* Arena::CreateMaybeMessage< ::IronGames::SimulationTetrahedra >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IronGames::SimulationTetrahedra >(arena);
}
template<> PROTOBUF_NOINLINE ::IronGames::SimulationFrame* Arena::CreateMaybeMessage< ::IronGames::SimulationFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IronGames::SimulationFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::IronGames::SimulationSummary* Arena::CreateMaybeMessage< ::IronGames::SimulationSummary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IronGames::SimulationSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::IronGames::SimulationSummaries* Arena::CreateMaybeMessage< ::IronGames::SimulationSummaries >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IronGames::SimulationSummaries >(arena);
}
template<> PROTOBUF_NOINLINE ::IronGames::Box* Arena::CreateMaybeMessage< ::IronGames::Box >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IronGames::Box >(arena);
}
template<> PROTOBUF_NOINLINE ::IronGames::EditCube* Arena::CreateMaybeMessage< ::IronGames::EditCube >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IronGames::EditCube >(arena);
}
template<> PROTOBUF_NOINLINE ::IronGames::TetrahedraMesh* Arena::CreateMaybeMessage< ::IronGames::TetrahedraMesh >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IronGames::TetrahedraMesh >(arena);
}
template<> PROTOBUF_NOINLINE ::IronGames::Asset* Arena::CreateMaybeMessage< ::IronGames::Asset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IronGames::Asset >(arena);
}
template<> PROTOBUF_NOINLINE ::IronGames::PalaceAsset* Arena::CreateMaybeMessage< ::IronGames::PalaceAsset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IronGames::PalaceAsset >(arena);
}
template<> PROTOBUF_NOINLINE ::IronGames::PlayerAssets* Arena::CreateMaybeMessage< ::IronGames::PlayerAssets >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IronGames::PlayerAssets >(arena);
}
template<> PROTOBUF_NOINLINE ::IronGames::EventPlayerConnected* Arena::CreateMaybeMessage< ::IronGames::EventPlayerConnected >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IronGames::EventPlayerConnected >(arena);
}
template<> PROTOBUF_NOINLINE ::IronGames::EventPlayerChanged* Arena::CreateMaybeMessage< ::IronGames::EventPlayerChanged >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IronGames::EventPlayerChanged >(arena);
}
template<> PROTOBUF_NOINLINE ::IronGames::EventPlayerDisconnected* Arena::CreateMaybeMessage< ::IronGames::EventPlayerDisconnected >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IronGames::EventPlayerDisconnected >(arena);
}
template<> PROTOBUF_NOINLINE ::IronGames::EventUnitCreation* Arena::CreateMaybeMessage< ::IronGames::EventUnitCreation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IronGames::EventUnitCreation >(arena);
}
template<> PROTOBUF_NOINLINE ::IronGames::EventActorCreationRequest* Arena::CreateMaybeMessage< ::IronGames::EventActorCreationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IronGames::EventActorCreationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::IronGames::EventUnitDestruction* Arena::CreateMaybeMessage< ::IronGames::EventUnitDestruction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IronGames::EventUnitDestruction >(arena);
}
template<> PROTOBUF_NOINLINE ::IronGames::EventBuildingCreation* Arena::CreateMaybeMessage< ::IronGames::EventBuildingCreation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IronGames::EventBuildingCreation >(arena);
}
template<> PROTOBUF_NOINLINE ::IronGames::EventBuildingDestruction* Arena::CreateMaybeMessage< ::IronGames::EventBuildingDestruction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IronGames::EventBuildingDestruction >(arena);
}
template<> PROTOBUF_NOINLINE ::IronGames::CommandMove* Arena::CreateMaybeMessage< ::IronGames::CommandMove >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IronGames::CommandMove >(arena);
}
template<> PROTOBUF_NOINLINE ::IronGames::CommandAttack* Arena::CreateMaybeMessage< ::IronGames::CommandAttack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IronGames::CommandAttack >(arena);
}
template<> PROTOBUF_NOINLINE ::IronGames::CommandAttackMove* Arena::CreateMaybeMessage< ::IronGames::CommandAttackMove >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IronGames::CommandAttackMove >(arena);
}
template<> PROTOBUF_NOINLINE ::IronGames::EventUnitCommand* Arena::CreateMaybeMessage< ::IronGames::EventUnitCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IronGames::EventUnitCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::IronGames::EventPlayerReadyToStartGame* Arena::CreateMaybeMessage< ::IronGames::EventPlayerReadyToStartGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IronGames::EventPlayerReadyToStartGame >(arena);
}
template<> PROTOBUF_NOINLINE ::IronGames::EventGameStart* Arena::CreateMaybeMessage< ::IronGames::EventGameStart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IronGames::EventGameStart >(arena);
}
template<> PROTOBUF_NOINLINE ::IronGames::EventAllPlayersReadyForGameToStart* Arena::CreateMaybeMessage< ::IronGames::EventAllPlayersReadyForGameToStart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IronGames::EventAllPlayersReadyForGameToStart >(arena);
}
template<> PROTOBUF_NOINLINE ::IronGames::EventPlayerLoadedGame* Arena::CreateMaybeMessage< ::IronGames::EventPlayerLoadedGame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IronGames::EventPlayerLoadedGame >(arena);
}
template<> PROTOBUF_NOINLINE ::IronGames::EventPlayerLoadedTile* Arena::CreateMaybeMessage< ::IronGames::EventPlayerLoadedTile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IronGames::EventPlayerLoadedTile >(arena);
}
template<> PROTOBUF_NOINLINE ::IronGames::Event* Arena::CreateMaybeMessage< ::IronGames::Event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IronGames::Event >(arena);
}
template<> PROTOBUF_NOINLINE ::IronGames::EventList* Arena::CreateMaybeMessage< ::IronGames::EventList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IronGames::EventList >(arena);
}
template<> PROTOBUF_NOINLINE ::IronGames::JoinGameRequest* Arena::CreateMaybeMessage< ::IronGames::JoinGameRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IronGames::JoinGameRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::IronGames::JoinGameResponse* Arena::CreateMaybeMessage< ::IronGames::JoinGameResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IronGames::JoinGameResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::IronGames::ExitGameRequest* Arena::CreateMaybeMessage< ::IronGames::ExitGameRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IronGames::ExitGameRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::IronGames::ExitGameResponse* Arena::CreateMaybeMessage< ::IronGames::ExitGameResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IronGames::ExitGameResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::IronGames::SubscribeEventsRequest* Arena::CreateMaybeMessage< ::IronGames::SubscribeEventsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IronGames::SubscribeEventsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::IronGames::SendEventResponse* Arena::CreateMaybeMessage< ::IronGames::SendEventResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IronGames::SendEventResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::IronGames::NewGameRequest* Arena::CreateMaybeMessage< ::IronGames::NewGameRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IronGames::NewGameRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::IronGames::NewGameResponse* Arena::CreateMaybeMessage< ::IronGames::NewGameResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IronGames::NewGameResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::IronGames::EndGameRequest* Arena::CreateMaybeMessage< ::IronGames::EndGameRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IronGames::EndGameRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::IronGames::EndGameResponse* Arena::CreateMaybeMessage< ::IronGames::EndGameResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IronGames::EndGameResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
